/*
 * generated by Xtext 2.10.0
 */
grammar InternalAle;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.eclipse.ecoretools.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.ecoretools.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.ecoretools.services.AleGrammarAccess;

}
@parser::members {
	private AleGrammarAccess grammarAccess;

	public void setGrammarAccess(AleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulerRoot
entryRulerRoot
:
{ before(grammarAccess.getRRootRule()); }
	 rulerRoot
{ after(grammarAccess.getRRootRule()); } 
	 EOF 
;

// Rule rRoot
rulerRoot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRRootAccess().getGroup()); }
		(rule__RRoot__Group__0)
		{ after(grammarAccess.getRRootAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerImport
entryRulerImport
:
{ before(grammarAccess.getRImportRule()); }
	 rulerImport
{ after(grammarAccess.getRImportRule()); } 
	 EOF 
;

// Rule rImport
rulerImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRImportAccess().getGroup()); }
		(rule__RImport__Group__0)
		{ after(grammarAccess.getRImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerService
entryRulerService
:
{ before(grammarAccess.getRServiceRule()); }
	 rulerService
{ after(grammarAccess.getRServiceRule()); } 
	 EOF 
;

// Rule rService
rulerService 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRServiceAccess().getGroup()); }
		(rule__RService__Group__0)
		{ after(grammarAccess.getRServiceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerClass
entryRulerClass
:
{ before(grammarAccess.getRClassRule()); }
	 rulerClass
{ after(grammarAccess.getRClassRule()); } 
	 EOF 
;

// Rule rClass
rulerClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRClassAccess().getAlternatives()); }
		(rule__RClass__Alternatives)
		{ after(grammarAccess.getRClassAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerOpenClass
entryRulerOpenClass
:
{ before(grammarAccess.getROpenClassRule()); }
	 rulerOpenClass
{ after(grammarAccess.getROpenClassRule()); } 
	 EOF 
;

// Rule rOpenClass
rulerOpenClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getROpenClassAccess().getGroup()); }
		(rule__ROpenClass__Group__0)
		{ after(grammarAccess.getROpenClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerNewClass
entryRulerNewClass
:
{ before(grammarAccess.getRNewClassRule()); }
	 rulerNewClass
{ after(grammarAccess.getRNewClassRule()); } 
	 EOF 
;

// Rule rNewClass
rulerNewClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRNewClassAccess().getGroup()); }
		(rule__RNewClass__Group__0)
		{ after(grammarAccess.getRNewClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerOperation
entryRulerOperation
:
{ before(grammarAccess.getROperationRule()); }
	 rulerOperation
{ after(grammarAccess.getROperationRule()); } 
	 EOF 
;

// Rule rOperation
rulerOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getROperationAccess().getGroup()); }
		(rule__ROperation__Group__0)
		{ after(grammarAccess.getROperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerTag
entryRulerTag
:
{ before(grammarAccess.getRTagRule()); }
	 rulerTag
{ after(grammarAccess.getRTagRule()); } 
	 EOF 
;

// Rule rTag
rulerTag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRTagAccess().getGroup()); }
		(rule__RTag__Group__0)
		{ after(grammarAccess.getRTagAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerParameters
entryRulerParameters
:
{ before(grammarAccess.getRParametersRule()); }
	 rulerParameters
{ after(grammarAccess.getRParametersRule()); } 
	 EOF 
;

// Rule rParameters
rulerParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRParametersAccess().getGroup()); }
		(rule__RParameters__Group__0)
		{ after(grammarAccess.getRParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerVariable
entryRulerVariable
:
{ before(grammarAccess.getRVariableRule()); }
	 rulerVariable
{ after(grammarAccess.getRVariableRule()); } 
	 EOF 
;

// Rule rVariable
rulerVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRVariableAccess().getGroup()); }
		(rule__RVariable__Group__0)
		{ after(grammarAccess.getRVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerAttribute
entryRulerAttribute
:
{ before(grammarAccess.getRAttributeRule()); }
	 rulerAttribute
{ after(grammarAccess.getRAttributeRule()); } 
	 EOF 
;

// Rule rAttribute
rulerAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRAttributeAccess().getGroup()); }
		(rule__RAttribute__Group__0)
		{ after(grammarAccess.getRAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerStatement
entryRulerStatement
:
{ before(grammarAccess.getRStatementRule()); }
	 rulerStatement
{ after(grammarAccess.getRStatementRule()); } 
	 EOF 
;

// Rule rStatement
rulerStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRStatementAccess().getAlternatives()); }
		(rule__RStatement__Alternatives)
		{ after(grammarAccess.getRStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerVarDecl
entryRulerVarDecl
:
{ before(grammarAccess.getRVarDeclRule()); }
	 rulerVarDecl
{ after(grammarAccess.getRVarDeclRule()); } 
	 EOF 
;

// Rule rVarDecl
rulerVarDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRVarDeclAccess().getGroup()); }
		(rule__RVarDecl__Group__0)
		{ after(grammarAccess.getRVarDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerAssign
entryRulerAssign
:
{ before(grammarAccess.getRAssignRule()); }
	 rulerAssign
{ after(grammarAccess.getRAssignRule()); } 
	 EOF 
;

// Rule rAssign
rulerAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRAssignAccess().getGroup()); }
		(rule__RAssign__Group__0)
		{ after(grammarAccess.getRAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerForEach
entryRulerForEach
:
{ before(grammarAccess.getRForEachRule()); }
	 rulerForEach
{ after(grammarAccess.getRForEachRule()); } 
	 EOF 
;

// Rule rForEach
rulerForEach 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRForEachAccess().getGroup()); }
		(rule__RForEach__Group__0)
		{ after(grammarAccess.getRForEachAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerCollection
entryRulerCollection
:
{ before(grammarAccess.getRCollectionRule()); }
	 rulerCollection
{ after(grammarAccess.getRCollectionRule()); } 
	 EOF 
;

// Rule rCollection
rulerCollection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRCollectionAccess().getAlternatives()); }
		(rule__RCollection__Alternatives)
		{ after(grammarAccess.getRCollectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerBlock
entryRulerBlock
:
{ before(grammarAccess.getRBlockRule()); }
	 rulerBlock
{ after(grammarAccess.getRBlockRule()); } 
	 EOF 
;

// Rule rBlock
rulerBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRBlockAccess().getGroup()); }
		(rule__RBlock__Group__0)
		{ after(grammarAccess.getRBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerIf
entryRulerIf
:
{ before(grammarAccess.getRIfRule()); }
	 rulerIf
{ after(grammarAccess.getRIfRule()); } 
	 EOF 
;

// Rule rIf
rulerIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRIfAccess().getGroup()); }
		(rule__RIf__Group__0)
		{ after(grammarAccess.getRIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerWhile
entryRulerWhile
:
{ before(grammarAccess.getRWhileRule()); }
	 rulerWhile
{ after(grammarAccess.getRWhileRule()); } 
	 EOF 
;

// Rule rWhile
rulerWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRWhileAccess().getGroup()); }
		(rule__RWhile__Group__0)
		{ after(grammarAccess.getRWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerExpression
entryRulerExpression
:
{ before(grammarAccess.getRExpressionRule()); }
	 rulerExpression
{ after(grammarAccess.getRExpressionRule()); } 
	 EOF 
;

// Rule rExpression
rulerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRExpressionAccess().getGroup()); }
		(rule__RExpression__Group__0)
		{ after(grammarAccess.getRExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpression
entryRuleexpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerecExpression
entryRulerecExpression
:
{ before(grammarAccess.getRecExpressionRule()); }
	 rulerecExpression
{ after(grammarAccess.getRecExpressionRule()); } 
	 EOF 
;

// Rule recExpression
rulerecExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecExpressionAccess().getGroup()); }
		(rule__RecExpression__Group__0)
		{ after(grammarAccess.getRecExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulenavigationSegment
entryRulenavigationSegment
:
{ before(grammarAccess.getNavigationSegmentRule()); }
	 rulenavigationSegment
{ after(grammarAccess.getNavigationSegmentRule()); } 
	 EOF 
;

// Rule navigationSegment
rulenavigationSegment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavigationSegmentAccess().getAlternatives()); }
		(rule__NavigationSegment__Alternatives)
		{ after(grammarAccess.getNavigationSegmentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulenonLeftRecExpression
entryRulenonLeftRecExpression
:
{ before(grammarAccess.getNonLeftRecExpressionRule()); }
	 rulenonLeftRecExpression
{ after(grammarAccess.getNonLeftRecExpressionRule()); } 
	 EOF 
;

// Rule nonLeftRecExpression
rulenonLeftRecExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getAlternatives()); }
		(rule__NonLeftRecExpression__Alternatives)
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulebinding
entryRulebinding
:
{ before(grammarAccess.getBindingRule()); }
	 rulebinding
{ after(grammarAccess.getBindingRule()); } 
	 EOF 
;

// Rule binding
rulebinding 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBindingAccess().getGroup()); }
		(rule__Binding__Group__0)
		{ after(grammarAccess.getBindingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
=======
// Entry rule entryRuleaddOp
entryRuleaddOp
:
{ before(grammarAccess.getAddOpRule()); }
	 ruleaddOp
{ after(grammarAccess.getAddOpRule()); } 
	 EOF 
;

// Rule addOp
ruleaddOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddOpAccess().getAlternatives()); }
		(rule__AddOp__Alternatives)
		{ after(grammarAccess.getAddOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecompOp
entryRulecompOp
:
{ before(grammarAccess.getCompOpRule()); }
	 rulecompOp
{ after(grammarAccess.getCompOpRule()); } 
	 EOF 
;

// Rule compOp
rulecompOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompOpAccess().getAlternatives()); }
		(rule__CompOp__Alternatives)
		{ after(grammarAccess.getCompOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

>>>>>>> local-ale-lang
// Entry rule entryRulecallExp
entryRulecallExp
:
{ before(grammarAccess.getCallExpRule()); }
	 rulecallExp
{ after(grammarAccess.getCallExpRule()); } 
	 EOF 
;

// Rule callExp
rulecallExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallExpAccess().getAlternatives()); }
		(rule__CallExp__Alternatives)
		{ after(grammarAccess.getCallExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
=======
// Entry rule entryRulelambdaExpression
entryRulelambdaExpression
:
{ before(grammarAccess.getLambdaExpressionRule()); }
	 rulelambdaExpression
{ after(grammarAccess.getLambdaExpressionRule()); } 
	 EOF 
;

// Rule lambdaExpression
rulelambdaExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLambdaExpressionAccess().getExpressionParserRuleCall()); }
		ruleexpression
		{ after(grammarAccess.getLambdaExpressionAccess().getExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

>>>>>>> local-ale-lang
// Entry rule entryRulecollectionIterator
entryRulecollectionIterator
:
{ before(grammarAccess.getCollectionIteratorRule()); }
	 rulecollectionIterator
{ after(grammarAccess.getCollectionIteratorRule()); } 
	 EOF 
;

// Rule collectionIterator
rulecollectionIterator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getAlternatives()); }
		(rule__CollectionIterator__Alternatives)
		{ after(grammarAccess.getCollectionIteratorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpressionSequence
entryRuleexpressionSequence
:
{ before(grammarAccess.getExpressionSequenceRule()); }
	 ruleexpressionSequence
{ after(grammarAccess.getExpressionSequenceRule()); } 
	 EOF 
;

// Rule expressionSequence
ruleexpressionSequence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionSequenceAccess().getGroup()); }
		(rule__ExpressionSequence__Group__0)?
		{ after(grammarAccess.getExpressionSequenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevariableDefinition
entryRulevariableDefinition
:
{ before(grammarAccess.getVariableDefinitionRule()); }
	 rulevariableDefinition
{ after(grammarAccess.getVariableDefinitionRule()); } 
	 EOF 
;

// Rule variableDefinition
rulevariableDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDefinitionAccess().getGroup()); }
		(rule__VariableDefinition__Group__0)
		{ after(grammarAccess.getVariableDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleliteral
entryRuleliteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleliteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule literal
ruleliteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeLiteral
entryRuletypeLiteral
:
{ before(grammarAccess.getTypeLiteralRule()); }
	 ruletypeLiteral
{ after(grammarAccess.getTypeLiteralRule()); } 
	 EOF 
;

// Rule typeLiteral
ruletypeLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeLiteralAccess().getAlternatives()); }
		(rule__TypeLiteral__Alternatives)
		{ after(grammarAccess.getTypeLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleclassifierTypeRule
entryRuleclassifierTypeRule
:
{ before(grammarAccess.getClassifierTypeRuleRule()); }
	 ruleclassifierTypeRule
{ after(grammarAccess.getClassifierTypeRuleRule()); } 
	 EOF 
;

// Rule classifierTypeRule
ruleclassifierTypeRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassifierTypeRuleAccess().getAlternatives()); }
		(rule__ClassifierTypeRule__Alternatives)
		{ after(grammarAccess.getClassifierTypeRuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerType
entryRulerType
:
{ before(grammarAccess.getRTypeRule()); }
	 rulerType
{ after(grammarAccess.getRTypeRule()); } 
	 EOF 
;

// Rule rType
rulerType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRTypeAccess().getAlternatives()); }
		(rule__RType__Alternatives)
		{ after(grammarAccess.getRTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerQualified
entryRulerQualified
:
{ before(grammarAccess.getRQualifiedRule()); }
	 rulerQualified
{ after(grammarAccess.getRQualifiedRule()); } 
	 EOF 
;

// Rule rQualified
rulerQualified 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRQualifiedAccess().getGroup()); }
		(rule__RQualified__Group__0)
		{ after(grammarAccess.getRQualifiedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RClass__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getRClassAccess().getGroup_0()); }
		(rule__RClass__Group_0__0)
		{ after(grammarAccess.getRClassAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRClassAccess().getGroup_1()); }
		(rule__RClass__Group_1__0)
		{ after(grammarAccess.getRClassAccess().getGroup_1()); }
=======
		{ before(grammarAccess.getRClassAccess().getROpenClassParserRuleCall_0()); }
		rulerOpenClass
		{ after(grammarAccess.getRClassAccess().getROpenClassParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRClassAccess().getRNewClassParserRuleCall_1()); }
		rulerNewClass
		{ after(grammarAccess.getRClassAccess().getRNewClassParserRuleCall_1()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getROperationAccess().getDefKeyword_1_0()); }
		'def'
		{ after(grammarAccess.getROperationAccess().getDefKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getROperationAccess().getOverrideKeyword_1_1()); }
		'override'
		{ after(grammarAccess.getROperationAccess().getOverrideKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getRStatementAccess().getGroup_0()); }
		(rule__RStatement__Group_0__0)
		{ after(grammarAccess.getRStatementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getGroup_1()); }
		(rule__RStatement__Group_1__0)
		{ after(grammarAccess.getRStatementAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getGroup_2()); }
		(rule__RStatement__Group_2__0)
		{ after(grammarAccess.getRStatementAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getGroup_3()); }
		(rule__RStatement__Group_3__0)
		{ after(grammarAccess.getRStatementAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getGroup_4()); }
		(rule__RStatement__Group_4__0)
		{ after(grammarAccess.getRStatementAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getGroup_5()); }
		(rule__RStatement__Group_5__0)
		{ after(grammarAccess.getRStatementAccess().getGroup_5()); }
=======
		{ before(grammarAccess.getRStatementAccess().getRVarDeclParserRuleCall_0()); }
		rulerVarDecl
		{ after(grammarAccess.getRStatementAccess().getRVarDeclParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getRAssignParserRuleCall_1()); }
		rulerAssign
		{ after(grammarAccess.getRStatementAccess().getRAssignParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getRForEachParserRuleCall_2()); }
		rulerForEach
		{ after(grammarAccess.getRStatementAccess().getRForEachParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getRWhileParserRuleCall_3()); }
		rulerWhile
		{ after(grammarAccess.getRStatementAccess().getRWhileParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getRIfParserRuleCall_4()); }
		rulerIf
		{ after(grammarAccess.getRStatementAccess().getRIfParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getRStatementAccess().getRExpressionParserRuleCall_5()); }
		rulerExpression
		{ after(grammarAccess.getRStatementAccess().getRExpressionParserRuleCall_5()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RCollection__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRCollectionAccess().getGroup_0()); }
		(rule__RCollection__Group_0__0)
		{ after(grammarAccess.getRCollectionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRCollectionAccess().getExpressionParserRuleCall_1()); }
		ruleexpression
		{ after(grammarAccess.getRCollectionAccess().getExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecExpression__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecExpressionAccess().getNavigationSegmentParserRuleCall_0_0()); }
		rulenavigationSegment
		{ after(grammarAccess.getRecExpressionAccess().getNavigationSegmentParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRecExpressionAccess().getGroup_0_1()); }
		(rule__RecExpression__Group_0_1__0)
		{ after(grammarAccess.getRecExpressionAccess().getGroup_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getRecExpressionAccess().getGroup_0_2()); }
		(rule__RecExpression__Group_0_2__0)
		{ after(grammarAccess.getRecExpressionAccess().getGroup_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getRecExpressionAccess().getGroup_0_3()); }
		(rule__RecExpression__Group_0_3__0)
		{ after(grammarAccess.getRecExpressionAccess().getGroup_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getRecExpressionAccess().getGroup_0_4()); }
		(rule__RecExpression__Group_0_4__0)
		{ after(grammarAccess.getRecExpressionAccess().getGroup_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getRecExpressionAccess().getGroup_0_5()); }
		(rule__RecExpression__Group_0_5__0)
		{ after(grammarAccess.getRecExpressionAccess().getGroup_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getRecExpressionAccess().getGroup_0_6()); }
		(rule__RecExpression__Group_0_6__0)
		{ after(grammarAccess.getRecExpressionAccess().getGroup_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getRecExpressionAccess().getGroup_0_7()); }
		(rule__RecExpression__Group_0_7__0)
		{ after(grammarAccess.getRecExpressionAccess().getGroup_0_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationSegment__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationSegmentAccess().getGroup_0()); }
		(rule__NavigationSegment__Group_0__0)
		{ after(grammarAccess.getNavigationSegmentAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNavigationSegmentAccess().getGroup_1()); }
		(rule__NavigationSegment__Group_1__0)
		{ after(grammarAccess.getNavigationSegmentAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getNavigationSegmentAccess().getGroup_2()); }
		(rule__NavigationSegment__Group_2__0)
		{ after(grammarAccess.getNavigationSegmentAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NonLeftRecExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getGroup_0()); }
		(rule__NonLeftRecExpression__Group_0__0)
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getGroup_1()); }
		(rule__NonLeftRecExpression__Group_1__0)
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getGroup_1()); }
	)
	|
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getGroup_2()); }
		(rule__NonLeftRecExpression__Group_2__0)
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getGroup_3()); }
		(rule__NonLeftRecExpression__Group_3__0)
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getGroup_3()); }
=======
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getIdentTerminalRuleCall_2()); }
		RULE_IDENT
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getIdentTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getLiteralParserRuleCall_3()); }
		ruleliteral
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getLiteralParserRuleCall_3()); }
>>>>>>> local-ale-lang
	)
	|
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getGroup_4()); }
		(rule__NonLeftRecExpression__Group_4__0)
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getGroup_5()); }
		(rule__NonLeftRecExpression__Group_5__0)
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getGroup_6()); }
		(rule__NonLeftRecExpression__Group_6__0)
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getGroup_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
=======
rule__AddOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOpAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getAddOpAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddOpAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getAddOpAccess().getHyphenMinusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompOpAccess().getLessThanSignEqualsSignKeyword_0()); }
		'<='
		{ after(grammarAccess.getCompOpAccess().getLessThanSignEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompOpAccess().getGreaterThanSignEqualsSignKeyword_1()); }
		'>='
		{ after(grammarAccess.getCompOpAccess().getGreaterThanSignEqualsSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompOpAccess().getExclamationMarkEqualsSignKeyword_2()); }
		'!='
		{ after(grammarAccess.getCompOpAccess().getExclamationMarkEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompOpAccess().getLessThanSignGreaterThanSignKeyword_3()); }
		'<>'
		{ after(grammarAccess.getCompOpAccess().getLessThanSignGreaterThanSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getCompOpAccess().getEqualsSignKeyword_4()); }
		'='
		{ after(grammarAccess.getCompOpAccess().getEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getCompOpAccess().getEqualsSignEqualsSignKeyword_5()); }
		'=='
		{ after(grammarAccess.getCompOpAccess().getEqualsSignEqualsSignKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getCompOpAccess().getLessThanSignKeyword_6()); }
		'<'
		{ after(grammarAccess.getCompOpAccess().getLessThanSignKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getCompOpAccess().getGreaterThanSignKeyword_7()); }
		'>'
		{ after(grammarAccess.getCompOpAccess().getGreaterThanSignKeyword_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

>>>>>>> local-ale-lang
rule__CallExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallExpAccess().getGroup_0()); }
		(rule__CallExp__Group_0__0)
		{ after(grammarAccess.getCallExpAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCallExpAccess().getGroup_1()); }
		(rule__CallExp__Group_1__0)
		{ after(grammarAccess.getCallExpAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionIterator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getSelectKeyword_0()); }
		'select'
		{ after(grammarAccess.getCollectionIteratorAccess().getSelectKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getRejectKeyword_1()); }
		'reject'
		{ after(grammarAccess.getCollectionIteratorAccess().getRejectKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getCollectKeyword_2()); }
		'collect'
		{ after(grammarAccess.getCollectionIteratorAccess().getCollectKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getAnyKeyword_3()); }
		'any'
		{ after(grammarAccess.getCollectionIteratorAccess().getAnyKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getExistsKeyword_4()); }
		'exists'
		{ after(grammarAccess.getCollectionIteratorAccess().getExistsKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getForAllKeyword_5()); }
		'forAll'
		{ after(grammarAccess.getCollectionIteratorAccess().getForAllKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getIsUniqueKeyword_6()); }
		'isUnique'
		{ after(grammarAccess.getCollectionIteratorAccess().getIsUniqueKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getOneKeyword_7()); }
		'one'
		{ after(grammarAccess.getCollectionIteratorAccess().getOneKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getSortedByKeyword_8()); }
		'sortedBy'
		{ after(grammarAccess.getCollectionIteratorAccess().getSortedByKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionIteratorAccess().getClosureKeyword_9()); }
		'closure'
		{ after(grammarAccess.getCollectionIteratorAccess().getClosureKeyword_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()); }
	)
	|
	(
<<<<<<< HEAD
		{ before(grammarAccess.getLiteralAccess().getREALTerminalRuleCall_2()); }
		RULE_REAL
		{ after(grammarAccess.getLiteralAccess().getREALTerminalRuleCall_2()); }
=======
		{ before(grammarAccess.getLiteralAccess().getRealTerminalRuleCall_2()); }
		RULE_REAL
		{ after(grammarAccess.getLiteralAccess().getRealTerminalRuleCall_2()); }
>>>>>>> local-ale-lang
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getTrueKeyword_3()); }
		'true'
		{ after(grammarAccess.getLiteralAccess().getTrueKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getFalseKeyword_4()); }
		'false'
		{ after(grammarAccess.getLiteralAccess().getFalseKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getNullKeyword_5()); }
		'null'
		{ after(grammarAccess.getLiteralAccess().getNullKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_6()); }
		(rule__Literal__Group_6__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_7()); }
		(rule__Literal__Group_7__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_7()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_8()); }
		(rule__Literal__Group_8__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_8()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_9()); }
		(rule__Literal__Group_9__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_9()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getTypeLiteralParserRuleCall_10()); }
		ruletypeLiteral
		{ after(grammarAccess.getLiteralAccess().getTypeLiteralParserRuleCall_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getTypeLiteralAccess().getGroup_0()); }
		(rule__TypeLiteral__Group_0__0)
		{ after(grammarAccess.getTypeLiteralAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getGroup_1()); }
		(rule__TypeLiteral__Group_1__0)
		{ after(grammarAccess.getTypeLiteralAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getGroup_2()); }
		(rule__TypeLiteral__Group_2__0)
		{ after(grammarAccess.getTypeLiteralAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getGroup_3()); }
		(rule__TypeLiteral__Group_3__0)
		{ after(grammarAccess.getTypeLiteralAccess().getGroup_3()); }
=======
		{ before(grammarAccess.getTypeLiteralAccess().getStringKeyword_0()); }
		'String'
		{ after(grammarAccess.getTypeLiteralAccess().getStringKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getIntegerKeyword_1()); }
		'Integer'
		{ after(grammarAccess.getTypeLiteralAccess().getIntegerKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getRealKeyword_2()); }
		'Real'
		{ after(grammarAccess.getTypeLiteralAccess().getRealKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getBooleanKeyword_3()); }
		'Boolean'
		{ after(grammarAccess.getTypeLiteralAccess().getBooleanKeyword_3()); }
>>>>>>> local-ale-lang
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getGroup_4()); }
		(rule__TypeLiteral__Group_4__0)
		{ after(grammarAccess.getTypeLiteralAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getGroup_5()); }
		(rule__TypeLiteral__Group_5__0)
		{ after(grammarAccess.getTypeLiteralAccess().getGroup_5()); }
	)
	|
	(
<<<<<<< HEAD
		{ before(grammarAccess.getTypeLiteralAccess().getGroup_6()); }
		(rule__TypeLiteral__Group_6__0)
		{ after(grammarAccess.getTypeLiteralAccess().getGroup_6()); }
=======
		{ before(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_6()); }
		ruleclassifierTypeRule
		{ after(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_6()); }
>>>>>>> local-ale-lang
	)
	|
	(
		{ before(grammarAccess.getTypeLiteralAccess().getGroup_7()); }
		(rule__TypeLiteral__Group_7__0)
		{ after(grammarAccess.getTypeLiteralAccess().getGroup_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierTypeRule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassifierTypeRuleAccess().getGroup_0()); }
		(rule__ClassifierTypeRule__Group_0__0)
		{ after(grammarAccess.getClassifierTypeRuleAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassifierTypeRuleAccess().getGroup_1()); }
		(rule__ClassifierTypeRule__Group_1__0)
		{ after(grammarAccess.getClassifierTypeRuleAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRTypeAccess().getRQualifiedParserRuleCall_0()); }
		rulerQualified
		{ after(grammarAccess.getRTypeAccess().getRQualifiedParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRTypeAccess().getTypeLiteralParserRuleCall_1()); }
		ruletypeLiteral
		{ after(grammarAccess.getRTypeAccess().getTypeLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RRoot__Group__0__Impl
	rule__RRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRRootAccess().getBehaviorKeyword_0()); }
	'behavior'
	{ after(grammarAccess.getRRootAccess().getBehaviorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RRoot__Group__1__Impl
	rule__RRoot__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRRootAccess().getRQualifiedParserRuleCall_1()); }
	rulerQualified
	{ after(grammarAccess.getRRootAccess().getRQualifiedParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RRoot__Group__2__Impl
	rule__RRoot__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRRootAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getRRootAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RRoot__Group__3__Impl
	rule__RRoot__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRRootAccess().getRImportParserRuleCall_3()); }
	(rulerImport)*
	{ after(grammarAccess.getRRootAccess().getRImportParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RRoot__Group__4__Impl
	rule__RRoot__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRRootAccess().getRServiceParserRuleCall_4()); }
	(rulerService)*
	{ after(grammarAccess.getRRootAccess().getRServiceParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RRoot__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RRoot__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRRootAccess().getXtendedClassesAssignment_5()); }
	(rule__RRoot__XtendedClassesAssignment_5)*
	{ after(grammarAccess.getRRootAccess().getXtendedClassesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RImport__Group__0__Impl
	rule__RImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getRImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RImport__Group__1__Impl
	rule__RImport__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRImportAccess().getRQualifiedParserRuleCall_1()); }
	rulerQualified
	{ after(grammarAccess.getRImportAccess().getRQualifiedParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RImport__Group__2__Impl
	rule__RImport__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRImportAccess().getAsKeyword_2()); }
	'as'
	{ after(grammarAccess.getRImportAccess().getAsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RImport__Group__3__Impl
	rule__RImport__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRImportAccess().getIDENTTerminalRuleCall_3()); }
	RULE_IDENT
	{ after(grammarAccess.getRImportAccess().getIDENTTerminalRuleCall_3()); }
=======
	{ before(grammarAccess.getRImportAccess().getIdentTerminalRuleCall_3()); }
	RULE_IDENT
	{ after(grammarAccess.getRImportAccess().getIdentTerminalRuleCall_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RImport__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RImport__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRImportAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getRImportAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RService__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RService__Group__0__Impl
	rule__RService__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRServiceAccess().getUseKeyword_0()); }
	'use'
	{ after(grammarAccess.getRServiceAccess().getUseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RService__Group__1__Impl
	rule__RService__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRServiceAccess().getIDENTTerminalRuleCall_1()); }
	RULE_IDENT
	{ after(grammarAccess.getRServiceAccess().getIDENTTerminalRuleCall_1()); }
=======
	{ before(grammarAccess.getRServiceAccess().getIdentTerminalRuleCall_1()); }
	RULE_IDENT
	{ after(grammarAccess.getRServiceAccess().getIdentTerminalRuleCall_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RService__Group__2__Impl
	rule__RService__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRServiceAccess().getGroup_2()); }
	(rule__RService__Group_2__0)*
	{ after(grammarAccess.getRServiceAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RService__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRServiceAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getRServiceAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RService__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RService__Group_2__0__Impl
	rule__RService__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRServiceAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getRServiceAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RService__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RService__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRServiceAccess().getIDENTTerminalRuleCall_2_1()); }
	RULE_IDENT
	{ after(grammarAccess.getRServiceAccess().getIDENTTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RClass__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RClass__Group_0__0__Impl
	rule__RClass__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RClass__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRClassAccess().getROpenClassAction_0_0()); }
	()
	{ after(grammarAccess.getRClassAccess().getROpenClassAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RClass__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RClass__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RClass__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRClassAccess().getOpenClassAssignment_0_1()); }
	(rule__RClass__OpenClassAssignment_0_1)
	{ after(grammarAccess.getRClassAccess().getOpenClassAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RClass__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RClass__Group_1__0__Impl
	rule__RClass__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RClass__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRClassAccess().getRNewClassAction_1_0()); }
	()
	{ after(grammarAccess.getRClassAccess().getRNewClassAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RClass__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RClass__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RClass__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRClassAccess().getNewClassAssignment_1_1()); }
	(rule__RClass__NewClassAssignment_1_1)
	{ after(grammarAccess.getRClassAccess().getNewClassAssignment_1_1()); }
=======
	{ before(grammarAccess.getRServiceAccess().getIdentTerminalRuleCall_2_1()); }
	RULE_IDENT
	{ after(grammarAccess.getRServiceAccess().getIdentTerminalRuleCall_2_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ROpenClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group__0__Impl
	rule__ROpenClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getOpenKeyword_0()); }
	'open'
	{ after(grammarAccess.getROpenClassAccess().getOpenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group__1__Impl
	rule__ROpenClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getClassKeyword_1()); }
	'class'
	{ after(grammarAccess.getROpenClassAccess().getClassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group__2__Impl
	rule__ROpenClass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getNameAssignment_2()); }
	(rule__ROpenClass__NameAssignment_2)
	{ after(grammarAccess.getROpenClassAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group__3__Impl
	rule__ROpenClass__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getGroup_3()); }
	(rule__ROpenClass__Group_3__0)?
	{ after(grammarAccess.getROpenClassAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group__4__Impl
	rule__ROpenClass__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getROpenClassAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group__5__Impl
	rule__ROpenClass__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getAttributesAssignment_5()); }
	(rule__ROpenClass__AttributesAssignment_5)*
	{ after(grammarAccess.getROpenClassAccess().getAttributesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group__6__Impl
	rule__ROpenClass__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getOperationsAssignment_6()); }
	(rule__ROpenClass__OperationsAssignment_6)*
	{ after(grammarAccess.getROpenClassAccess().getOperationsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getROpenClassAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ROpenClass__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group_3__0__Impl
	rule__ROpenClass__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getExtendsKeyword_3_0()); }
	'extends'
	{ after(grammarAccess.getROpenClassAccess().getExtendsKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group_3__1__Impl
	rule__ROpenClass__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getRQualifiedParserRuleCall_3_1()); }
	rulerQualified
	{ after(grammarAccess.getROpenClassAccess().getRQualifiedParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getGroup_3_2()); }
	(rule__ROpenClass__Group_3_2__0)*
	{ after(grammarAccess.getROpenClassAccess().getGroup_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ROpenClass__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group_3_2__0__Impl
	rule__ROpenClass__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getCommaKeyword_3_2_0()); }
	','
	{ after(grammarAccess.getROpenClassAccess().getCommaKeyword_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROpenClass__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROpenClassAccess().getRQualifiedParserRuleCall_3_2_1()); }
	rulerQualified
	{ after(grammarAccess.getROpenClassAccess().getRQualifiedParserRuleCall_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RNewClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RNewClass__Group__0__Impl
	rule__RNewClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRNewClassAccess().getClassKeyword_0()); }
	'class'
	{ after(grammarAccess.getRNewClassAccess().getClassKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RNewClass__Group__1__Impl
	rule__RNewClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRNewClassAccess().getNameAssignment_1()); }
	(rule__RNewClass__NameAssignment_1)
	{ after(grammarAccess.getRNewClassAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RNewClass__Group__2__Impl
	rule__RNewClass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRNewClassAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRNewClassAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RNewClass__Group__3__Impl
	rule__RNewClass__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRNewClassAccess().getAttributesAssignment_3()); }
	(rule__RNewClass__AttributesAssignment_3)*
	{ after(grammarAccess.getRNewClassAccess().getAttributesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RNewClass__Group__4__Impl
	rule__RNewClass__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRNewClassAccess().getOperationsAssignment_4()); }
	(rule__RNewClass__OperationsAssignment_4)*
	{ after(grammarAccess.getRNewClassAccess().getOperationsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RNewClass__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRNewClassAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getRNewClassAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ROperation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROperation__Group__0__Impl
	rule__ROperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROperationAccess().getRTagParserRuleCall_0()); }
	(rulerTag)*
	{ after(grammarAccess.getROperationAccess().getRTagParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROperation__Group__1__Impl
	rule__ROperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROperationAccess().getAlternatives_1()); }
	(rule__ROperation__Alternatives_1)
	{ after(grammarAccess.getROperationAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROperation__Group__2__Impl
	rule__ROperation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROperationAccess().getTypeAssignment_2()); }
	(rule__ROperation__TypeAssignment_2)
	{ after(grammarAccess.getROperationAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROperation__Group__3__Impl
	rule__ROperation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROperationAccess().getNameAssignment_3()); }
	(rule__ROperation__NameAssignment_3)
	{ after(grammarAccess.getROperationAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROperation__Group__4__Impl
	rule__ROperation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROperationAccess().getLeftParenthesisKeyword_4()); }
	'('
	{ after(grammarAccess.getROperationAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROperation__Group__5__Impl
	rule__ROperation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROperationAccess().getParamListAssignment_5()); }
	(rule__ROperation__ParamListAssignment_5)?
	{ after(grammarAccess.getROperationAccess().getParamListAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROperation__Group__6__Impl
	rule__ROperation__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROperationAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getROperationAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ROperation__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getROperationAccess().getBodyAssignment_7()); }
	(rule__ROperation__BodyAssignment_7)
	{ after(grammarAccess.getROperationAccess().getBodyAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RTag__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTag__Group__0__Impl
	rule__RTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RTag__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRTagAccess().getCommercialAtKeyword_0()); }
	'@'
	{ after(grammarAccess.getRTagAccess().getCommercialAtKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RTag__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RTag__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RTag__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRTagAccess().getIDENTTerminalRuleCall_1()); }
	RULE_IDENT
	{ after(grammarAccess.getRTagAccess().getIDENTTerminalRuleCall_1()); }
=======
	{ before(grammarAccess.getRTagAccess().getIdentTerminalRuleCall_1()); }
	RULE_IDENT
	{ after(grammarAccess.getRTagAccess().getIdentTerminalRuleCall_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RParameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RParameters__Group__0__Impl
	rule__RParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RParameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRParametersAccess().getParamsAssignment_0()); }
	(rule__RParameters__ParamsAssignment_0)
	{ after(grammarAccess.getRParametersAccess().getParamsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RParameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RParameters__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RParameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRParametersAccess().getGroup_1()); }
	(rule__RParameters__Group_1__0)*
	{ after(grammarAccess.getRParametersAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RParameters__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RParameters__Group_1__0__Impl
	rule__RParameters__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RParameters__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRParametersAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getRParametersAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RParameters__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RParameters__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RParameters__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRParametersAccess().getParamsAssignment_1_1()); }
	(rule__RParameters__ParamsAssignment_1_1)
	{ after(grammarAccess.getRParametersAccess().getParamsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RVariable__Group__0__Impl
	rule__RVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRVariableAccess().getTypeAssignment_0()); }
	(rule__RVariable__TypeAssignment_0)
	{ after(grammarAccess.getRVariableAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRVariableAccess().getNameAssignment_1()); }
	(rule__RVariable__NameAssignment_1)
	{ after(grammarAccess.getRVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RAttribute__Group__0__Impl
	rule__RAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRAttributeAccess().getTypeAssignment_0()); }
	(rule__RAttribute__TypeAssignment_0)
	{ after(grammarAccess.getRAttributeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RAttribute__Group__1__Impl
	rule__RAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRAttributeAccess().getNameAssignment_1()); }
	(rule__RAttribute__NameAssignment_1)
	{ after(grammarAccess.getRAttributeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RAttribute__Group__2__Impl
	rule__RAttribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRAttributeAccess().getGroup_2()); }
	(rule__RAttribute__Group_2__0)?
	{ after(grammarAccess.getRAttributeAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RAttribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRAttributeAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getRAttributeAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RAttribute__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RAttribute__Group_2__0__Impl
	rule__RAttribute__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRAttributeAccess().getColonEqualsSignKeyword_2_0()); }
	':='
	{ after(grammarAccess.getRAttributeAccess().getColonEqualsSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RAttribute__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRAttributeAccess().getExprAssignment_2_1()); }
	(rule__RAttribute__ExprAssignment_2_1)
	{ after(grammarAccess.getRAttributeAccess().getExprAssignment_2_1()); }
=======
	{ before(grammarAccess.getRAttributeAccess().getExpressionParserRuleCall_2_1()); }
	ruleexpression
	{ after(grammarAccess.getRAttributeAccess().getExpressionParserRuleCall_2_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RStatement__Group_0__0
=======
rule__RVarDecl__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_0__0__Impl
	rule__RStatement__Group_0__1
=======
	rule__RVarDecl__Group__0__Impl
	rule__RVarDecl__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_0__0__Impl
=======
rule__RVarDecl__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getRValDeclAction_0_0()); }
	()
	{ after(grammarAccess.getRStatementAccess().getRValDeclAction_0_0()); }
=======
	{ before(grammarAccess.getRVarDeclAccess().getRTypeParserRuleCall_0()); }
	rulerType
	{ after(grammarAccess.getRVarDeclAccess().getRTypeParserRuleCall_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_0__1
=======
rule__RVarDecl__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_0__1__Impl
=======
	rule__RVarDecl__Group__1__Impl
	rule__RVarDecl__Group__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_0__1__Impl
=======
rule__RVarDecl__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getStmtAssignment_0_1()); }
	(rule__RStatement__StmtAssignment_0_1)
	{ after(grammarAccess.getRStatementAccess().getStmtAssignment_0_1()); }
=======
	{ before(grammarAccess.getRVarDeclAccess().getIdentTerminalRuleCall_1()); }
	RULE_IDENT
	{ after(grammarAccess.getRVarDeclAccess().getIdentTerminalRuleCall_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RStatement__Group_1__0
=======
rule__RVarDecl__Group__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_1__0__Impl
	rule__RStatement__Group_1__1
=======
	rule__RVarDecl__Group__2__Impl
	rule__RVarDecl__Group__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_1__0__Impl
=======
rule__RVarDecl__Group__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getRAssignAction_1_0()); }
	()
	{ after(grammarAccess.getRStatementAccess().getRAssignAction_1_0()); }
=======
	{ before(grammarAccess.getRVarDeclAccess().getGroup_2()); }
	(rule__RVarDecl__Group_2__0)?
	{ after(grammarAccess.getRVarDeclAccess().getGroup_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_1__1
=======
rule__RVarDecl__Group__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_1__1__Impl
=======
	rule__RVarDecl__Group__3__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_1__1__Impl
=======
rule__RVarDecl__Group__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getStmtAssignment_1_1()); }
	(rule__RStatement__StmtAssignment_1_1)
	{ after(grammarAccess.getRStatementAccess().getStmtAssignment_1_1()); }
=======
	{ before(grammarAccess.getRVarDeclAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getRVarDeclAccess().getSemicolonKeyword_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RStatement__Group_2__0
=======
rule__RVarDecl__Group_2__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_2__0__Impl
	rule__RStatement__Group_2__1
=======
	rule__RVarDecl__Group_2__0__Impl
	rule__RVarDecl__Group_2__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_2__0__Impl
=======
rule__RVarDecl__Group_2__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getRForEachAction_2_0()); }
	()
	{ after(grammarAccess.getRStatementAccess().getRForEachAction_2_0()); }
=======
	{ before(grammarAccess.getRVarDeclAccess().getColonEqualsSignKeyword_2_0()); }
	':='
	{ after(grammarAccess.getRVarDeclAccess().getColonEqualsSignKeyword_2_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_2__1
=======
rule__RVarDecl__Group_2__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_2__1__Impl
=======
	rule__RVarDecl__Group_2__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_2__1__Impl
=======
rule__RVarDecl__Group_2__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getForEachAssignment_2_1()); }
	(rule__RStatement__ForEachAssignment_2_1)
	{ after(grammarAccess.getRStatementAccess().getForEachAssignment_2_1()); }
=======
	{ before(grammarAccess.getRVarDeclAccess().getExpressionParserRuleCall_2_1()); }
	ruleexpression
	{ after(grammarAccess.getRVarDeclAccess().getExpressionParserRuleCall_2_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RStatement__Group_3__0
=======
rule__RAssign__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_3__0__Impl
	rule__RStatement__Group_3__1
=======
	rule__RAssign__Group__0__Impl
	rule__RAssign__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_3__0__Impl
=======
rule__RAssign__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getRWhileAction_3_0()); }
	()
	{ after(grammarAccess.getRStatementAccess().getRWhileAction_3_0()); }
=======
	{ before(grammarAccess.getRAssignAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
	{ after(grammarAccess.getRAssignAccess().getExpressionParserRuleCall_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_3__1
=======
rule__RAssign__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_3__1__Impl
=======
	rule__RAssign__Group__1__Impl
	rule__RAssign__Group__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_3__1__Impl
=======
rule__RAssign__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getWhileAssignment_3_1()); }
	(rule__RStatement__WhileAssignment_3_1)
	{ after(grammarAccess.getRStatementAccess().getWhileAssignment_3_1()); }
=======
	{ before(grammarAccess.getRAssignAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getRAssignAccess().getColonEqualsSignKeyword_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RStatement__Group_4__0
=======
rule__RAssign__Group__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_4__0__Impl
	rule__RStatement__Group_4__1
=======
	rule__RAssign__Group__2__Impl
	rule__RAssign__Group__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_4__0__Impl
=======
rule__RAssign__Group__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getRIfAction_4_0()); }
	()
	{ after(grammarAccess.getRStatementAccess().getRIfAction_4_0()); }
=======
	{ before(grammarAccess.getRAssignAccess().getExpressionParserRuleCall_2()); }
	ruleexpression
	{ after(grammarAccess.getRAssignAccess().getExpressionParserRuleCall_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_4__1
=======
rule__RAssign__Group__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_4__1__Impl
=======
	rule__RAssign__Group__3__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_4__1__Impl
=======
rule__RAssign__Group__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getIfAssignment_4_1()); }
	(rule__RStatement__IfAssignment_4_1)
	{ after(grammarAccess.getRStatementAccess().getIfAssignment_4_1()); }
=======
	{ before(grammarAccess.getRAssignAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getRAssignAccess().getSemicolonKeyword_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RStatement__Group_5__0
=======
rule__RForEach__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_5__0__Impl
	rule__RStatement__Group_5__1
=======
	rule__RForEach__Group__0__Impl
	rule__RForEach__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_5__0__Impl
=======
rule__RForEach__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getRExpressionAction_5_0()); }
	()
	{ after(grammarAccess.getRStatementAccess().getRExpressionAction_5_0()); }
=======
	{ before(grammarAccess.getRForEachAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getRForEachAccess().getForKeyword_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_5__1
=======
rule__RForEach__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RStatement__Group_5__1__Impl
=======
	rule__RForEach__Group__1__Impl
	rule__RForEach__Group__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__Group_5__1__Impl
=======
rule__RForEach__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRStatementAccess().getExprAssignment_5_1()); }
	(rule__RStatement__ExprAssignment_5_1)
	{ after(grammarAccess.getRStatementAccess().getExprAssignment_5_1()); }
)
;
=======
	{ before(grammarAccess.getRForEachAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRForEachAccess().getLeftParenthesisKeyword_1()); }
)
;
>>>>>>> local-ale-lang
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RVarDecl__Group__0
=======
rule__RForEach__Group__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RVarDecl__Group__0__Impl
	rule__RVarDecl__Group__1
=======
	rule__RForEach__Group__2__Impl
	rule__RForEach__Group__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group__0__Impl
=======
rule__RForEach__Group__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRVarDeclAccess().getTypeAssignment_0()); }
	(rule__RVarDecl__TypeAssignment_0)
	{ after(grammarAccess.getRVarDeclAccess().getTypeAssignment_0()); }
=======
	{ before(grammarAccess.getRForEachAccess().getIdentTerminalRuleCall_2()); }
	RULE_IDENT
	{ after(grammarAccess.getRForEachAccess().getIdentTerminalRuleCall_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group__1
=======
rule__RForEach__Group__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RVarDecl__Group__1__Impl
	rule__RVarDecl__Group__2
=======
	rule__RForEach__Group__3__Impl
	rule__RForEach__Group__4
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group__1__Impl
=======
rule__RForEach__Group__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRVarDeclAccess().getIdentAssignment_1()); }
	(rule__RVarDecl__IdentAssignment_1)
	{ after(grammarAccess.getRVarDeclAccess().getIdentAssignment_1()); }
=======
	{ before(grammarAccess.getRForEachAccess().getInKeyword_3()); }
	'in'
	{ after(grammarAccess.getRForEachAccess().getInKeyword_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group__2
=======
rule__RForEach__Group__4
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RVarDecl__Group__2__Impl
	rule__RVarDecl__Group__3
=======
	rule__RForEach__Group__4__Impl
	rule__RForEach__Group__5
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group__2__Impl
=======
rule__RForEach__Group__4__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRVarDeclAccess().getGroup_2()); }
	(rule__RVarDecl__Group_2__0)?
	{ after(grammarAccess.getRVarDeclAccess().getGroup_2()); }
=======
	{ before(grammarAccess.getRForEachAccess().getRCollectionParserRuleCall_4()); }
	rulerCollection
	{ after(grammarAccess.getRForEachAccess().getRCollectionParserRuleCall_4()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group__3
=======
rule__RForEach__Group__5
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RVarDecl__Group__3__Impl
=======
	rule__RForEach__Group__5__Impl
	rule__RForEach__Group__6
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group__3__Impl
=======
rule__RForEach__Group__5__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRVarDeclAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getRVarDeclAccess().getSemicolonKeyword_3()); }
=======
	{ before(grammarAccess.getRForEachAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getRForEachAccess().getRightParenthesisKeyword_5()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RVarDecl__Group_2__0
=======
rule__RForEach__Group__6
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RVarDecl__Group_2__0__Impl
	rule__RVarDecl__Group_2__1
=======
	rule__RForEach__Group__6__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group_2__0__Impl
=======
rule__RForEach__Group__6__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRVarDeclAccess().getColonEqualsSignKeyword_2_0()); }
	':='
	{ after(grammarAccess.getRVarDeclAccess().getColonEqualsSignKeyword_2_0()); }
=======
	{ before(grammarAccess.getRForEachAccess().getRBlockParserRuleCall_6()); }
	rulerBlock
	{ after(grammarAccess.getRForEachAccess().getRBlockParserRuleCall_6()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group_2__1
=======

rule__RCollection__Group_0__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RVarDecl__Group_2__1__Impl
=======
	rule__RCollection__Group_0__0__Impl
	rule__RCollection__Group_0__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__Group_2__1__Impl
=======
rule__RCollection__Group_0__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRVarDeclAccess().getExpressionAssignment_2_1()); }
	(rule__RVarDecl__ExpressionAssignment_2_1)
	{ after(grammarAccess.getRVarDeclAccess().getExpressionAssignment_2_1()); }
=======
	{ before(grammarAccess.getRCollectionAccess().getLeftSquareBracketKeyword_0_0()); }
	'['
	{ after(grammarAccess.getRCollectionAccess().getLeftSquareBracketKeyword_0_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RAssign__Group__0
=======
rule__RCollection__Group_0__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RAssign__Group__0__Impl
	rule__RAssign__Group__1
=======
	rule__RCollection__Group_0__1__Impl
	rule__RCollection__Group_0__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAssign__Group__0__Impl
=======
rule__RCollection__Group_0__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRAssignAccess().getLeftAssignment_0()); }
	(rule__RAssign__LeftAssignment_0)
	{ after(grammarAccess.getRAssignAccess().getLeftAssignment_0()); }
=======
	{ before(grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_1()); }
	RULE_INT
	{ after(grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAssign__Group__1
=======
rule__RCollection__Group_0__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RAssign__Group__1__Impl
	rule__RAssign__Group__2
=======
	rule__RCollection__Group_0__2__Impl
	rule__RCollection__Group_0__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAssign__Group__1__Impl
=======
rule__RCollection__Group_0__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRAssignAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getRAssignAccess().getColonEqualsSignKeyword_1()); }
=======
	{ before(grammarAccess.getRCollectionAccess().getFullStopFullStopKeyword_0_2()); }
	'..'
	{ after(grammarAccess.getRCollectionAccess().getFullStopFullStopKeyword_0_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAssign__Group__2
=======
rule__RCollection__Group_0__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RAssign__Group__2__Impl
	rule__RAssign__Group__3
=======
	rule__RCollection__Group_0__3__Impl
	rule__RCollection__Group_0__4
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAssign__Group__2__Impl
=======
rule__RCollection__Group_0__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRAssignAccess().getRightAssignment_2()); }
	(rule__RAssign__RightAssignment_2)
	{ after(grammarAccess.getRAssignAccess().getRightAssignment_2()); }
=======
	{ before(grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_3()); }
	RULE_INT
	{ after(grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAssign__Group__3
=======
rule__RCollection__Group_0__4
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RAssign__Group__3__Impl
=======
	rule__RCollection__Group_0__4__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAssign__Group__3__Impl
=======
rule__RCollection__Group_0__4__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRAssignAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getRAssignAccess().getSemicolonKeyword_3()); }
=======
	{ before(grammarAccess.getRCollectionAccess().getRightSquareBracketKeyword_0_4()); }
	']'
	{ after(grammarAccess.getRCollectionAccess().getRightSquareBracketKeyword_0_4()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RForEach__Group__0
=======
rule__RBlock__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RForEach__Group__0__Impl
	rule__RForEach__Group__1
=======
	rule__RBlock__Group__0__Impl
	rule__RBlock__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__0__Impl
=======
rule__RBlock__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRForEachAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getRForEachAccess().getForKeyword_0()); }
=======
	{ before(grammarAccess.getRBlockAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getRBlockAccess().getLeftCurlyBracketKeyword_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__1
=======
rule__RBlock__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RForEach__Group__1__Impl
	rule__RForEach__Group__2
=======
	rule__RBlock__Group__1__Impl
	rule__RBlock__Group__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__1__Impl
=======
rule__RBlock__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRForEachAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRForEachAccess().getLeftParenthesisKeyword_1()); }
=======
	{ before(grammarAccess.getRBlockAccess().getGroup_1()); }
	(rule__RBlock__Group_1__0)?
	{ after(grammarAccess.getRBlockAccess().getGroup_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__2
=======
rule__RBlock__Group__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RForEach__Group__2__Impl
	rule__RForEach__Group__3
=======
	rule__RBlock__Group__2__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__2__Impl
=======
rule__RBlock__Group__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRForEachAccess().getIDENTTerminalRuleCall_2()); }
	RULE_IDENT
	{ after(grammarAccess.getRForEachAccess().getIDENTTerminalRuleCall_2()); }
=======
	{ before(grammarAccess.getRBlockAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getRBlockAccess().getRightCurlyBracketKeyword_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__3
=======

rule__RBlock__Group_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RForEach__Group__3__Impl
	rule__RForEach__Group__4
=======
	rule__RBlock__Group_1__0__Impl
	rule__RBlock__Group_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__3__Impl
=======
rule__RBlock__Group_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRForEachAccess().getInKeyword_3()); }
	'in'
	{ after(grammarAccess.getRForEachAccess().getInKeyword_3()); }
=======
	{ before(grammarAccess.getRBlockAccess().getRStatementParserRuleCall_1_0()); }
	rulerStatement
	{ after(grammarAccess.getRBlockAccess().getRStatementParserRuleCall_1_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__4
=======
rule__RBlock__Group_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RForEach__Group__4__Impl
	rule__RForEach__Group__5
=======
	rule__RBlock__Group_1__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__4__Impl
=======
rule__RBlock__Group_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRForEachAccess().getRCollectionParserRuleCall_4()); }
	rulerCollection
	{ after(grammarAccess.getRForEachAccess().getRCollectionParserRuleCall_4()); }
=======
	{ before(grammarAccess.getRBlockAccess().getRStatementParserRuleCall_1_1()); }
	(rulerStatement)*
	{ after(grammarAccess.getRBlockAccess().getRStatementParserRuleCall_1_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__5
=======

rule__RIf__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RForEach__Group__5__Impl
	rule__RForEach__Group__6
=======
	rule__RIf__Group__0__Impl
	rule__RIf__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__5__Impl
=======
rule__RIf__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRForEachAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getRForEachAccess().getRightParenthesisKeyword_5()); }
=======
	{ before(grammarAccess.getRIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getRIfAccess().getIfKeyword_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__6
=======
rule__RIf__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RForEach__Group__6__Impl
=======
	rule__RIf__Group__1__Impl
	rule__RIf__Group__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__Group__6__Impl
=======
rule__RIf__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRForEachAccess().getBlockAssignment_6()); }
	(rule__RForEach__BlockAssignment_6)
	{ after(grammarAccess.getRForEachAccess().getBlockAssignment_6()); }
=======
	{ before(grammarAccess.getRIfAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRIfAccess().getLeftParenthesisKeyword_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RCollection__Group_0__0
=======
rule__RIf__Group__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RCollection__Group_0__0__Impl
	rule__RCollection__Group_0__1
=======
	rule__RIf__Group__2__Impl
	rule__RIf__Group__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RCollection__Group_0__0__Impl
=======
rule__RIf__Group__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRCollectionAccess().getLeftSquareBracketKeyword_0_0()); }
	'['
	{ after(grammarAccess.getRCollectionAccess().getLeftSquareBracketKeyword_0_0()); }
=======
	{ before(grammarAccess.getRIfAccess().getExpressionParserRuleCall_2()); }
	ruleexpression
	{ after(grammarAccess.getRIfAccess().getExpressionParserRuleCall_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RCollection__Group_0__1
=======
rule__RIf__Group__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RCollection__Group_0__1__Impl
	rule__RCollection__Group_0__2
=======
	rule__RIf__Group__3__Impl
	rule__RIf__Group__4
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RCollection__Group_0__1__Impl
=======
rule__RIf__Group__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_1()); }
	RULE_INT
	{ after(grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_1()); }
=======
	{ before(grammarAccess.getRIfAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRIfAccess().getRightParenthesisKeyword_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RCollection__Group_0__2
=======
rule__RIf__Group__4
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RCollection__Group_0__2__Impl
	rule__RCollection__Group_0__3
=======
	rule__RIf__Group__4__Impl
	rule__RIf__Group__5
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RCollection__Group_0__2__Impl
=======
rule__RIf__Group__4__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRCollectionAccess().getFullStopFullStopKeyword_0_2()); }
	'..'
	{ after(grammarAccess.getRCollectionAccess().getFullStopFullStopKeyword_0_2()); }
=======
	{ before(grammarAccess.getRIfAccess().getRBlockParserRuleCall_4()); }
	rulerBlock
	{ after(grammarAccess.getRIfAccess().getRBlockParserRuleCall_4()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RCollection__Group_0__3
=======
rule__RIf__Group__5
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RCollection__Group_0__3__Impl
	rule__RCollection__Group_0__4
=======
	rule__RIf__Group__5__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RCollection__Group_0__3__Impl
=======
rule__RIf__Group__5__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_3()); }
	RULE_INT
	{ after(grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_3()); }
=======
	{ before(grammarAccess.getRIfAccess().getGroup_5()); }
	(rule__RIf__Group_5__0)?
	{ after(grammarAccess.getRIfAccess().getGroup_5()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RCollection__Group_0__4
=======

rule__RIf__Group_5__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RCollection__Group_0__4__Impl
=======
	rule__RIf__Group_5__0__Impl
	rule__RIf__Group_5__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RCollection__Group_0__4__Impl
=======
rule__RIf__Group_5__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRCollectionAccess().getRightSquareBracketKeyword_0_4()); }
	']'
	{ after(grammarAccess.getRCollectionAccess().getRightSquareBracketKeyword_0_4()); }
=======
	{ before(grammarAccess.getRIfAccess().getElseKeyword_5_0()); }
	'else'
	{ after(grammarAccess.getRIfAccess().getElseKeyword_5_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RBlock__Group__0
=======
rule__RIf__Group_5__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RBlock__Group__0__Impl
	rule__RBlock__Group__1
=======
	rule__RIf__Group_5__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__Group__0__Impl
=======
rule__RIf__Group_5__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRBlockAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getRBlockAccess().getLeftCurlyBracketKeyword_0()); }
=======
	{ before(grammarAccess.getRIfAccess().getRBlockParserRuleCall_5_1()); }
	rulerBlock
	{ after(grammarAccess.getRIfAccess().getRBlockParserRuleCall_5_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__Group__1
=======

rule__RWhile__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RBlock__Group__1__Impl
	rule__RBlock__Group__2
=======
	rule__RWhile__Group__0__Impl
	rule__RWhile__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__Group__1__Impl
=======
rule__RWhile__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRBlockAccess().getGroup_1()); }
	(rule__RBlock__Group_1__0)?
	{ after(grammarAccess.getRBlockAccess().getGroup_1()); }
=======
	{ before(grammarAccess.getRWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getRWhileAccess().getWhileKeyword_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__Group__2
=======
rule__RWhile__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RBlock__Group__2__Impl
=======
	rule__RWhile__Group__1__Impl
	rule__RWhile__Group__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__Group__2__Impl
=======
rule__RWhile__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRBlockAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getRBlockAccess().getRightCurlyBracketKeyword_2()); }
=======
	{ before(grammarAccess.getRWhileAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRWhileAccess().getLeftParenthesisKeyword_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RBlock__Group_1__0
=======
rule__RWhile__Group__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RBlock__Group_1__0__Impl
	rule__RBlock__Group_1__1
=======
	rule__RWhile__Group__2__Impl
	rule__RWhile__Group__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__Group_1__0__Impl
=======
rule__RWhile__Group__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRBlockAccess().getStatementAssignment_1_0()); }
	(rule__RBlock__StatementAssignment_1_0)
	{ after(grammarAccess.getRBlockAccess().getStatementAssignment_1_0()); }
=======
	{ before(grammarAccess.getRWhileAccess().getExpressionParserRuleCall_2()); }
	ruleexpression
	{ after(grammarAccess.getRWhileAccess().getExpressionParserRuleCall_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__Group_1__1
=======
rule__RWhile__Group__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RBlock__Group_1__1__Impl
=======
	rule__RWhile__Group__3__Impl
	rule__RWhile__Group__4
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__Group_1__1__Impl
=======
rule__RWhile__Group__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRBlockAccess().getStatementAssignment_1_1()); }
	(rule__RBlock__StatementAssignment_1_1)*
	{ after(grammarAccess.getRBlockAccess().getStatementAssignment_1_1()); }
=======
	{ before(grammarAccess.getRWhileAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRWhileAccess().getRightParenthesisKeyword_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RIf__Group__0
=======
rule__RWhile__Group__4
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RIf__Group__0__Impl
	rule__RIf__Group__1
=======
	rule__RWhile__Group__4__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__0__Impl
=======
rule__RWhile__Group__4__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getRIfAccess().getIfKeyword_0()); }
=======
	{ before(grammarAccess.getRWhileAccess().getRBlockParserRuleCall_4()); }
	rulerBlock
	{ after(grammarAccess.getRWhileAccess().getRBlockParserRuleCall_4()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__1
=======

rule__RExpression__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RIf__Group__1__Impl
	rule__RIf__Group__2
=======
	rule__RExpression__Group__0__Impl
	rule__RExpression__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__1__Impl
=======
rule__RExpression__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRIfAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRIfAccess().getLeftParenthesisKeyword_1()); }
=======
	{ before(grammarAccess.getRExpressionAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
	{ after(grammarAccess.getRExpressionAccess().getExpressionParserRuleCall_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__2
=======
rule__RExpression__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RIf__Group__2__Impl
	rule__RIf__Group__3
=======
	rule__RExpression__Group__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__2__Impl
=======
rule__RExpression__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRIfAccess().getConditionAssignment_2()); }
	(rule__RIf__ConditionAssignment_2)
	{ after(grammarAccess.getRIfAccess().getConditionAssignment_2()); }
=======
	{ before(grammarAccess.getRExpressionAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getRExpressionAccess().getSemicolonKeyword_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__3
=======

rule__Expression__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RIf__Group__3__Impl
	rule__RIf__Group__4
=======
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__3__Impl
=======
rule__Expression__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRIfAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRIfAccess().getRightParenthesisKeyword_3()); }
=======
	{ before(grammarAccess.getExpressionAccess().getNonLeftRecExpressionParserRuleCall_0()); }
	rulenonLeftRecExpression
	{ after(grammarAccess.getExpressionAccess().getNonLeftRecExpressionParserRuleCall_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__4
=======
rule__Expression__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RIf__Group__4__Impl
	rule__RIf__Group__5
=======
	rule__Expression__Group__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__4__Impl
=======
rule__Expression__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRIfAccess().getIfBlockAssignment_4()); }
	(rule__RIf__IfBlockAssignment_4)
	{ after(grammarAccess.getRIfAccess().getIfBlockAssignment_4()); }
=======
	{ before(grammarAccess.getExpressionAccess().getRecExpressionParserRuleCall_1()); }
	(rulerecExpression)?
	{ after(grammarAccess.getExpressionAccess().getRecExpressionParserRuleCall_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__5
=======

rule__RecExpression__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RIf__Group__5__Impl
=======
	rule__RecExpression__Group__0__Impl
	rule__RecExpression__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group__5__Impl
=======
rule__RecExpression__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRIfAccess().getGroup_5()); }
	(rule__RIf__Group_5__0)?
	{ after(grammarAccess.getRIfAccess().getGroup_5()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getAlternatives_0()); }
	(rule__RecExpression__Alternatives_0)
	{ after(grammarAccess.getRecExpressionAccess().getAlternatives_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RIf__Group_5__0
=======
rule__RecExpression__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RIf__Group_5__0__Impl
	rule__RIf__Group_5__1
=======
	rule__RecExpression__Group__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group_5__0__Impl
=======
rule__RecExpression__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRIfAccess().getElseKeyword_5_0()); }
	'else'
	{ after(grammarAccess.getRIfAccess().getElseKeyword_5_0()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getRecExpressionParserRuleCall_1()); }
	(rulerecExpression)?
	{ after(grammarAccess.getRecExpressionAccess().getRecExpressionParserRuleCall_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group_5__1
=======

rule__RecExpression__Group_0_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RIf__Group_5__1__Impl
=======
	rule__RecExpression__Group_0_1__0__Impl
	rule__RecExpression__Group_0_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__Group_5__1__Impl
=======
rule__RecExpression__Group_0_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRIfAccess().getElseBlockAssignment_5_1()); }
	(rule__RIf__ElseBlockAssignment_5_1)
	{ after(grammarAccess.getRIfAccess().getElseBlockAssignment_5_1()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getMultOpTerminalRuleCall_0_1_0()); }
	RULE_MULTOP
	{ after(grammarAccess.getRecExpressionAccess().getMultOpTerminalRuleCall_0_1_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__RWhile__Group__0
=======
rule__RecExpression__Group_0_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RWhile__Group__0__Impl
	rule__RWhile__Group__1
=======
	rule__RecExpression__Group_0_1__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__Group__0__Impl
=======
rule__RecExpression__Group_0_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getRWhileAccess().getWhileKeyword_0()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_1_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_1_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__Group__1
=======

rule__RecExpression__Group_0_2__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RWhile__Group__1__Impl
	rule__RWhile__Group__2
=======
	rule__RecExpression__Group_0_2__0__Impl
	rule__RecExpression__Group_0_2__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__Group__1__Impl
=======
rule__RecExpression__Group_0_2__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRWhileAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRWhileAccess().getLeftParenthesisKeyword_1()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getAddOpParserRuleCall_0_2_0()); }
	ruleaddOp
	{ after(grammarAccess.getRecExpressionAccess().getAddOpParserRuleCall_0_2_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__Group__2
=======
rule__RecExpression__Group_0_2__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RWhile__Group__2__Impl
	rule__RWhile__Group__3
=======
	rule__RecExpression__Group_0_2__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__Group__2__Impl
=======
rule__RecExpression__Group_0_2__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRWhileAccess().getExpressionParserRuleCall_2()); }
	ruleexpression
	{ after(grammarAccess.getRWhileAccess().getExpressionParserRuleCall_2()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_2_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_2_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__Group__3
=======

rule__RecExpression__Group_0_3__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RWhile__Group__3__Impl
	rule__RWhile__Group__4
=======
	rule__RecExpression__Group_0_3__0__Impl
	rule__RecExpression__Group_0_3__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__Group__3__Impl
=======
rule__RecExpression__Group_0_3__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRWhileAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRWhileAccess().getRightParenthesisKeyword_3()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getCompOpParserRuleCall_0_3_0()); }
	rulecompOp
	{ after(grammarAccess.getRecExpressionAccess().getCompOpParserRuleCall_0_3_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__Group__4
=======
rule__RecExpression__Group_0_3__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RWhile__Group__4__Impl
=======
	rule__RecExpression__Group_0_3__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__Group__4__Impl
=======
rule__RecExpression__Group_0_3__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRWhileAccess().getBlockAssignment_4()); }
	(rule__RWhile__BlockAssignment_4)
	{ after(grammarAccess.getRWhileAccess().getBlockAssignment_4()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_3_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_3_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RExpression__Group__0
=======
rule__RecExpression__Group_0_4__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RExpression__Group__0__Impl
	rule__RExpression__Group__1
=======
	rule__RecExpression__Group_0_4__0__Impl
	rule__RecExpression__Group_0_4__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RExpression__Group__0__Impl
=======
rule__RecExpression__Group_0_4__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRExpressionAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
	{ after(grammarAccess.getRExpressionAccess().getExpressionParserRuleCall_0()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getAndKeyword_0_4_0()); }
	'and'
	{ after(grammarAccess.getRecExpressionAccess().getAndKeyword_0_4_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RExpression__Group__1
=======
rule__RecExpression__Group_0_4__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RExpression__Group__1__Impl
=======
	rule__RecExpression__Group_0_4__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RExpression__Group__1__Impl
=======
rule__RecExpression__Group_0_4__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRExpressionAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getRExpressionAccess().getSemicolonKeyword_1()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_4_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_4_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__Expression__Group__0
=======
rule__RecExpression__Group_0_5__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
=======
	rule__RecExpression__Group_0_5__0__Impl
	rule__RecExpression__Group_0_5__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Expression__Group__0__Impl
=======
rule__RecExpression__Group_0_5__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getExpressionAccess().getLeftPartAssignment_0()); }
	(rule__Expression__LeftPartAssignment_0)
	{ after(grammarAccess.getExpressionAccess().getLeftPartAssignment_0()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getOrKeyword_0_5_0()); }
	'or'
	{ after(grammarAccess.getRecExpressionAccess().getOrKeyword_0_5_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Expression__Group__1
=======
rule__RecExpression__Group_0_5__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__Expression__Group__1__Impl
=======
	rule__RecExpression__Group_0_5__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Expression__Group__1__Impl
=======
rule__RecExpression__Group_0_5__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getExpressionAccess().getRecpartAssignment_1()); }
	(rule__Expression__RecpartAssignment_1)?
	{ after(grammarAccess.getExpressionAccess().getRecpartAssignment_1()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_5_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_5_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RecExpression__Group__0
=======
rule__RecExpression__Group_0_6__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group__0__Impl
	rule__RecExpression__Group__1
=======
	rule__RecExpression__Group_0_6__0__Impl
	rule__RecExpression__Group_0_6__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group__0__Impl
=======
rule__RecExpression__Group_0_6__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getAlternatives_0()); }
	(rule__RecExpression__Alternatives_0)
	{ after(grammarAccess.getRecExpressionAccess().getAlternatives_0()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getXorKeyword_0_6_0()); }
	'xor'
	{ after(grammarAccess.getRecExpressionAccess().getXorKeyword_0_6_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group__1
=======
rule__RecExpression__Group_0_6__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group__1__Impl
=======
	rule__RecExpression__Group_0_6__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group__1__Impl
=======
rule__RecExpression__Group_0_6__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getRecExpAssignment_1()); }
	(rule__RecExpression__RecExpAssignment_1)?
	{ after(grammarAccess.getRecExpressionAccess().getRecExpAssignment_1()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_6_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_6_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RecExpression__Group_0_1__0
=======
rule__RecExpression__Group_0_7__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_1__0__Impl
	rule__RecExpression__Group_0_1__1
=======
	rule__RecExpression__Group_0_7__0__Impl
	rule__RecExpression__Group_0_7__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_1__0__Impl
=======
rule__RecExpression__Group_0_7__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getMULT_OPTerminalRuleCall_0_1_0()); }
	RULE_MULT_OP
	{ after(grammarAccess.getRecExpressionAccess().getMULT_OPTerminalRuleCall_0_1_0()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getImpliesKeyword_0_7_0()); }
	'implies'
	{ after(grammarAccess.getRecExpressionAccess().getImpliesKeyword_0_7_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_1__1
=======
rule__RecExpression__Group_0_7__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_1__1__Impl
=======
	rule__RecExpression__Group_0_7__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_1__1__Impl
=======
rule__RecExpression__Group_0_7__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_1_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_1_1()); }
=======
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_7_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_7_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RecExpression__Group_0_2__0
=======
rule__NavigationSegment__Group_0__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_2__0__Impl
	rule__RecExpression__Group_0_2__1
=======
	rule__NavigationSegment__Group_0__0__Impl
	rule__NavigationSegment__Group_0__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_2__0__Impl
=======
rule__NavigationSegment__Group_0__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getADD_OPTerminalRuleCall_0_2_0()); }
	RULE_ADD_OP
	{ after(grammarAccess.getRecExpressionAccess().getADD_OPTerminalRuleCall_0_2_0()); }
=======
	{ before(grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_0_0()); }
	'.'
	{ after(grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_0_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_2__1
=======
rule__NavigationSegment__Group_0__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_2__1__Impl
=======
	rule__NavigationSegment__Group_0__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_2__1__Impl
=======
rule__NavigationSegment__Group_0__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_2_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_2_1()); }
=======
	{ before(grammarAccess.getNavigationSegmentAccess().getIdentTerminalRuleCall_0_1()); }
	RULE_IDENT
	{ after(grammarAccess.getNavigationSegmentAccess().getIdentTerminalRuleCall_0_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RecExpression__Group_0_3__0
=======
rule__NavigationSegment__Group_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_3__0__Impl
	rule__RecExpression__Group_0_3__1
=======
	rule__NavigationSegment__Group_1__0__Impl
	rule__NavigationSegment__Group_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_3__0__Impl
=======
rule__NavigationSegment__Group_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getCOMP_OPTerminalRuleCall_0_3_0()); }
	RULE_COMP_OP
	{ after(grammarAccess.getRecExpressionAccess().getCOMP_OPTerminalRuleCall_0_3_0()); }
=======
	{ before(grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_1_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_3__1
=======
rule__NavigationSegment__Group_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_3__1__Impl
=======
	rule__NavigationSegment__Group_1__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_3__1__Impl
=======
rule__NavigationSegment__Group_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_3_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_3_1()); }
=======
	{ before(grammarAccess.getNavigationSegmentAccess().getCallExpParserRuleCall_1_1()); }
	rulecallExp
	{ after(grammarAccess.getNavigationSegmentAccess().getCallExpParserRuleCall_1_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RecExpression__Group_0_4__0
=======
rule__NavigationSegment__Group_2__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_4__0__Impl
	rule__RecExpression__Group_0_4__1
=======
	rule__NavigationSegment__Group_2__0__Impl
	rule__NavigationSegment__Group_2__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_4__0__Impl
=======
rule__NavigationSegment__Group_2__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getAndKeyword_0_4_0()); }
	'and'
	{ after(grammarAccess.getRecExpressionAccess().getAndKeyword_0_4_0()); }
=======
	{ before(grammarAccess.getNavigationSegmentAccess().getHyphenMinusGreaterThanSignKeyword_2_0()); }
	'->'
	{ after(grammarAccess.getNavigationSegmentAccess().getHyphenMinusGreaterThanSignKeyword_2_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_4__1
=======
rule__NavigationSegment__Group_2__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_4__1__Impl
=======
	rule__NavigationSegment__Group_2__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_4__1__Impl
=======
rule__NavigationSegment__Group_2__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_4_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_4_1()); }
=======
	{ before(grammarAccess.getNavigationSegmentAccess().getCallExpParserRuleCall_2_1()); }
	rulecallExp
	{ after(grammarAccess.getNavigationSegmentAccess().getCallExpParserRuleCall_2_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RecExpression__Group_0_5__0
=======
rule__NonLeftRecExpression__Group_0__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_5__0__Impl
	rule__RecExpression__Group_0_5__1
=======
	rule__NonLeftRecExpression__Group_0__0__Impl
	rule__NonLeftRecExpression__Group_0__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_5__0__Impl
=======
rule__NonLeftRecExpression__Group_0__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getOrKeyword_0_5_0()); }
	'or'
	{ after(grammarAccess.getRecExpressionAccess().getOrKeyword_0_5_0()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getNotKeyword_0_0()); }
	'not'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getNotKeyword_0_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_5__1
=======
rule__NonLeftRecExpression__Group_0__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_5__1__Impl
=======
	rule__NonLeftRecExpression__Group_0__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_5__1__Impl
=======
rule__NonLeftRecExpression__Group_0__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_5_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_5_1()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleexpression
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_0_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RecExpression__Group_0_6__0
=======
rule__NonLeftRecExpression__Group_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_6__0__Impl
	rule__RecExpression__Group_0_6__1
=======
	rule__NonLeftRecExpression__Group_1__0__Impl
	rule__NonLeftRecExpression__Group_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_6__0__Impl
=======
rule__NonLeftRecExpression__Group_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getXorKeyword_0_6_0()); }
	'xor'
	{ after(grammarAccess.getRecExpressionAccess().getXorKeyword_0_6_0()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getHyphenMinusKeyword_1_0()); }
	'-'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getHyphenMinusKeyword_1_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_6__1
=======
rule__NonLeftRecExpression__Group_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_6__1__Impl
=======
	rule__NonLeftRecExpression__Group_1__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_6__1__Impl
=======
rule__NonLeftRecExpression__Group_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_6_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_6_1()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_1_1()); }
	ruleexpression
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_1_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__RecExpression__Group_0_7__0
=======
rule__NonLeftRecExpression__Group_4__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_7__0__Impl
	rule__RecExpression__Group_0_7__1
=======
	rule__NonLeftRecExpression__Group_4__0__Impl
	rule__NonLeftRecExpression__Group_4__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_7__0__Impl
=======
rule__NonLeftRecExpression__Group_4__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getImpliesKeyword_0_7_0()); }
	'implies'
	{ after(grammarAccess.getRecExpressionAccess().getImpliesKeyword_0_7_0()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getLeftParenthesisKeyword_4_0()); }
	'('
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getLeftParenthesisKeyword_4_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_7__1
=======
rule__NonLeftRecExpression__Group_4__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__RecExpression__Group_0_7__1__Impl
=======
	rule__NonLeftRecExpression__Group_4__1__Impl
	rule__NonLeftRecExpression__Group_4__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__Group_0_7__1__Impl
=======
rule__NonLeftRecExpression__Group_4__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_7_1()); }
	ruleexpression
	{ after(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_7_1()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_4_1()); }
	ruleexpression
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_4_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__NavigationSegment__Group_0__0
=======
rule__NonLeftRecExpression__Group_4__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NavigationSegment__Group_0__0__Impl
	rule__NavigationSegment__Group_0__1
=======
	rule__NonLeftRecExpression__Group_4__2__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_0__0__Impl
=======
rule__NonLeftRecExpression__Group_4__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNavigationSegmentAccess().getFinalIdentSegmentAction_0_0()); }
	()
	{ after(grammarAccess.getNavigationSegmentAccess().getFinalIdentSegmentAction_0_0()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getRightParenthesisKeyword_4_2()); }
	')'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getRightParenthesisKeyword_4_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_0__1
=======

rule__NonLeftRecExpression__Group_5__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NavigationSegment__Group_0__1__Impl
	rule__NavigationSegment__Group_0__2
=======
	rule__NonLeftRecExpression__Group_5__0__Impl
	rule__NonLeftRecExpression__Group_5__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_0__1__Impl
=======
rule__NonLeftRecExpression__Group_5__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_0_1()); }
	'.'
	{ after(grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_0_1()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getIfKeyword_5_0()); }
	'if'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getIfKeyword_5_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_0__2
=======
rule__NonLeftRecExpression__Group_5__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NavigationSegment__Group_0__2__Impl
=======
	rule__NonLeftRecExpression__Group_5__1__Impl
	rule__NonLeftRecExpression__Group_5__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_0__2__Impl
=======
rule__NonLeftRecExpression__Group_5__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNavigationSegmentAccess().getIdentAssignment_0_2()); }
	(rule__NavigationSegment__IdentAssignment_0_2)
	{ after(grammarAccess.getNavigationSegmentAccess().getIdentAssignment_0_2()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_5_1()); }
	ruleexpression
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_5_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__NavigationSegment__Group_1__0
=======
rule__NonLeftRecExpression__Group_5__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NavigationSegment__Group_1__0__Impl
	rule__NavigationSegment__Group_1__1
=======
	rule__NonLeftRecExpression__Group_5__2__Impl
	rule__NonLeftRecExpression__Group_5__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_1__0__Impl
=======
rule__NonLeftRecExpression__Group_5__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNavigationSegmentAccess().getFinalIdentCallSegmentAction_1_0()); }
	()
	{ after(grammarAccess.getNavigationSegmentAccess().getFinalIdentCallSegmentAction_1_0()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getThenKeyword_5_2()); }
	'then'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getThenKeyword_5_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_1__1
=======
rule__NonLeftRecExpression__Group_5__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NavigationSegment__Group_1__1__Impl
	rule__NavigationSegment__Group_1__2
=======
	rule__NonLeftRecExpression__Group_5__3__Impl
	rule__NonLeftRecExpression__Group_5__4
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_1__1__Impl
=======
rule__NonLeftRecExpression__Group_5__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_1_1()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_5_3()); }
	ruleexpression
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_5_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_1__2
=======
rule__NonLeftRecExpression__Group_5__4
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NavigationSegment__Group_1__2__Impl
=======
	rule__NonLeftRecExpression__Group_5__4__Impl
	rule__NonLeftRecExpression__Group_5__5
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_1__2__Impl
=======
rule__NonLeftRecExpression__Group_5__4__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNavigationSegmentAccess().getCallAssignment_1_2()); }
	(rule__NavigationSegment__CallAssignment_1_2)
	{ after(grammarAccess.getNavigationSegmentAccess().getCallAssignment_1_2()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getElseKeyword_5_4()); }
	'else'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getElseKeyword_5_4()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__NavigationSegment__Group_2__0
=======
rule__NonLeftRecExpression__Group_5__5
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NavigationSegment__Group_2__0__Impl
	rule__NavigationSegment__Group_2__1
=======
	rule__NonLeftRecExpression__Group_5__5__Impl
	rule__NonLeftRecExpression__Group_5__6
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_2__0__Impl
=======
rule__NonLeftRecExpression__Group_5__5__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNavigationSegmentAccess().getFinalCallExpSegmentAction_2_0()); }
	()
	{ after(grammarAccess.getNavigationSegmentAccess().getFinalCallExpSegmentAction_2_0()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_5_5()); }
	ruleexpression
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_5_5()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_2__1
=======
rule__NonLeftRecExpression__Group_5__6
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NavigationSegment__Group_2__1__Impl
	rule__NavigationSegment__Group_2__2
=======
	rule__NonLeftRecExpression__Group_5__6__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_2__1__Impl
=======
rule__NonLeftRecExpression__Group_5__6__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNavigationSegmentAccess().getHyphenMinusGreaterThanSignKeyword_2_1()); }
	'->'
	{ after(grammarAccess.getNavigationSegmentAccess().getHyphenMinusGreaterThanSignKeyword_2_1()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getEndifKeyword_5_6()); }
	'endif'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getEndifKeyword_5_6()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_2__2
=======

rule__NonLeftRecExpression__Group_6__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NavigationSegment__Group_2__2__Impl
=======
	rule__NonLeftRecExpression__Group_6__0__Impl
	rule__NonLeftRecExpression__Group_6__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__Group_2__2__Impl
=======
rule__NonLeftRecExpression__Group_6__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNavigationSegmentAccess().getCallAssignment_2_2()); }
	(rule__NavigationSegment__CallAssignment_2_2)
	{ after(grammarAccess.getNavigationSegmentAccess().getCallAssignment_2_2()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getLetKeyword_6_0()); }
	'let'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getLetKeyword_6_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__NonLeftRecExpression__Group_0__0
=======
rule__NonLeftRecExpression__Group_6__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_0__0__Impl
	rule__NonLeftRecExpression__Group_0__1
=======
	rule__NonLeftRecExpression__Group_6__1__Impl
	rule__NonLeftRecExpression__Group_6__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_0__0__Impl
=======
rule__NonLeftRecExpression__Group_6__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getNotExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getNotExpressionAction_0_0()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getBindingParserRuleCall_6_1()); }
	rulebinding
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getBindingParserRuleCall_6_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_0__1
=======
rule__NonLeftRecExpression__Group_6__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_0__1__Impl
	rule__NonLeftRecExpression__Group_0__2
=======
	rule__NonLeftRecExpression__Group_6__2__Impl
	rule__NonLeftRecExpression__Group_6__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_0__1__Impl
=======
rule__NonLeftRecExpression__Group_6__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getNotKeyword_0_1()); }
	'not'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getNotKeyword_0_1()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getGroup_6_2()); }
	(rule__NonLeftRecExpression__Group_6_2__0)*
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getGroup_6_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_0__2
=======
rule__NonLeftRecExpression__Group_6__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_0__2__Impl
=======
	rule__NonLeftRecExpression__Group_6__3__Impl
	rule__NonLeftRecExpression__Group_6__4
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_0__2__Impl
=======
rule__NonLeftRecExpression__Group_6__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionAssignment_0_2()); }
	(rule__NonLeftRecExpression__ExpressionAssignment_0_2)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionAssignment_0_2()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getInKeyword_6_3()); }
	'in'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getInKeyword_6_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__NonLeftRecExpression__Group_1__0
=======
rule__NonLeftRecExpression__Group_6__4
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_1__0__Impl
	rule__NonLeftRecExpression__Group_1__1
=======
	rule__NonLeftRecExpression__Group_6__4__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_1__0__Impl
=======
rule__NonLeftRecExpression__Group_6__4__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getNegExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getNegExpressionAction_1_0()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_6_4()); }
	ruleexpression
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_6_4()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_1__1
=======

rule__NonLeftRecExpression__Group_6_2__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_1__1__Impl
	rule__NonLeftRecExpression__Group_1__2
=======
	rule__NonLeftRecExpression__Group_6_2__0__Impl
	rule__NonLeftRecExpression__Group_6_2__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_1__1__Impl
=======
rule__NonLeftRecExpression__Group_6_2__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getHyphenMinusKeyword_1_1()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getCommaKeyword_6_2_0()); }
	','
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getCommaKeyword_6_2_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_1__2
=======
rule__NonLeftRecExpression__Group_6_2__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_1__2__Impl
=======
	rule__NonLeftRecExpression__Group_6_2__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_1__2__Impl
=======
rule__NonLeftRecExpression__Group_6_2__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionAssignment_1_2()); }
	(rule__NonLeftRecExpression__ExpressionAssignment_1_2)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionAssignment_1_2()); }
=======
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getBindingParserRuleCall_6_2_1()); }
	rulebinding
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getBindingParserRuleCall_6_2_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__NonLeftRecExpression__Group_2__0
=======
rule__Binding__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_2__0__Impl
	rule__NonLeftRecExpression__Group_2__1
=======
	rule__Binding__Group__0__Impl
	rule__Binding__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_2__0__Impl
=======
rule__Binding__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getIdentifierExpresionAction_2_0()); }
	()
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getIdentifierExpresionAction_2_0()); }
=======
	{ before(grammarAccess.getBindingAccess().getIdentTerminalRuleCall_0()); }
	RULE_IDENT
	{ after(grammarAccess.getBindingAccess().getIdentTerminalRuleCall_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_2__1
=======
rule__Binding__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_2__1__Impl
=======
	rule__Binding__Group__1__Impl
	rule__Binding__Group__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_2__1__Impl
=======
rule__Binding__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getValueAssignment_2_1()); }
	(rule__NonLeftRecExpression__ValueAssignment_2_1)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getValueAssignment_2_1()); }
=======
	{ before(grammarAccess.getBindingAccess().getGroup_1()); }
	(rule__Binding__Group_1__0)?
	{ after(grammarAccess.getBindingAccess().getGroup_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__NonLeftRecExpression__Group_3__0
=======
rule__Binding__Group__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_3__0__Impl
	rule__NonLeftRecExpression__Group_3__1
=======
	rule__Binding__Group__2__Impl
	rule__Binding__Group__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_3__0__Impl
=======
rule__Binding__Group__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getLiteralExpressioinAction_3_0()); }
	()
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getLiteralExpressioinAction_3_0()); }
=======
	{ before(grammarAccess.getBindingAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getBindingAccess().getEqualsSignKeyword_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_3__1
=======
rule__Binding__Group__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_3__1__Impl
=======
	rule__Binding__Group__3__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_3__1__Impl
=======
rule__Binding__Group__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getLitAssignment_3_1()); }
	(rule__NonLeftRecExpression__LitAssignment_3_1)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getLitAssignment_3_1()); }
=======
	{ before(grammarAccess.getBindingAccess().getExpressionParserRuleCall_3()); }
	ruleexpression
	{ after(grammarAccess.getBindingAccess().getExpressionParserRuleCall_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__NonLeftRecExpression__Group_4__0
=======
rule__Binding__Group_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_4__0__Impl
	rule__NonLeftRecExpression__Group_4__1
=======
	rule__Binding__Group_1__0__Impl
	rule__Binding__Group_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_4__0__Impl
=======
rule__Binding__Group_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getParenthesisExpressionAction_4_0()); }
	()
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getParenthesisExpressionAction_4_0()); }
=======
	{ before(grammarAccess.getBindingAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getBindingAccess().getColonKeyword_1_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_4__1
=======
rule__Binding__Group_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_4__1__Impl
	rule__NonLeftRecExpression__Group_4__2
=======
	rule__Binding__Group_1__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_4__1__Impl
=======
rule__Binding__Group_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getLeftParenthesisKeyword_4_1()); }
	'('
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getLeftParenthesisKeyword_4_1()); }
=======
	{ before(grammarAccess.getBindingAccess().getTypeLiteralParserRuleCall_1_1()); }
	ruletypeLiteral
	{ after(grammarAccess.getBindingAccess().getTypeLiteralParserRuleCall_1_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_4__2
=======

rule__CallExp__Group_0__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_4__2__Impl
	rule__NonLeftRecExpression__Group_4__3
=======
	rule__CallExp__Group_0__0__Impl
	rule__CallExp__Group_0__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_4__2__Impl
=======
rule__CallExp__Group_0__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionAssignment_4_2()); }
	(rule__NonLeftRecExpression__ExpressionAssignment_4_2)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionAssignment_4_2()); }
=======
	{ before(grammarAccess.getCallExpAccess().getCollectionIteratorParserRuleCall_0_0()); }
	rulecollectionIterator
	{ after(grammarAccess.getCallExpAccess().getCollectionIteratorParserRuleCall_0_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_4__3
=======
rule__CallExp__Group_0__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_4__3__Impl
=======
	rule__CallExp__Group_0__1__Impl
	rule__CallExp__Group_0__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_4__3__Impl
=======
rule__CallExp__Group_0__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getRightParenthesisKeyword_4_3()); }
	')'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getRightParenthesisKeyword_4_3()); }
=======
	{ before(grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_0_1()); }
	'('
	{ after(grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_0_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__NonLeftRecExpression__Group_5__0
=======
rule__CallExp__Group_0__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_5__0__Impl
	rule__NonLeftRecExpression__Group_5__1
=======
	rule__CallExp__Group_0__2__Impl
	rule__CallExp__Group_0__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__0__Impl
=======
rule__CallExp__Group_0__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getIfExpressionAction_5_0()); }
	()
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getIfExpressionAction_5_0()); }
=======
	{ before(grammarAccess.getCallExpAccess().getVariableDefinitionParserRuleCall_0_2()); }
	rulevariableDefinition
	{ after(grammarAccess.getCallExpAccess().getVariableDefinitionParserRuleCall_0_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__1
=======
rule__CallExp__Group_0__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_5__1__Impl
	rule__NonLeftRecExpression__Group_5__2
=======
	rule__CallExp__Group_0__3__Impl
	rule__CallExp__Group_0__4
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__1__Impl
=======
rule__CallExp__Group_0__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getIfKeyword_5_1()); }
	'if'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getIfKeyword_5_1()); }
=======
	{ before(grammarAccess.getCallExpAccess().getLambdaExpressionParserRuleCall_0_3()); }
	rulelambdaExpression
	{ after(grammarAccess.getCallExpAccess().getLambdaExpressionParserRuleCall_0_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__2
=======
rule__CallExp__Group_0__4
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_5__2__Impl
	rule__NonLeftRecExpression__Group_5__3
=======
	rule__CallExp__Group_0__4__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__2__Impl
=======
rule__CallExp__Group_0__4__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getConditionAssignment_5_2()); }
	(rule__NonLeftRecExpression__ConditionAssignment_5_2)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getConditionAssignment_5_2()); }
=======
	{ before(grammarAccess.getCallExpAccess().getRightParenthesisKeyword_0_4()); }
	')'
	{ after(grammarAccess.getCallExpAccess().getRightParenthesisKeyword_0_4()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__3
=======

rule__CallExp__Group_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_5__3__Impl
	rule__NonLeftRecExpression__Group_5__4
=======
	rule__CallExp__Group_1__0__Impl
	rule__CallExp__Group_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__3__Impl
=======
rule__CallExp__Group_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getThenKeyword_5_3()); }
	'then'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getThenKeyword_5_3()); }
=======
	{ before(grammarAccess.getCallExpAccess().getIdentTerminalRuleCall_1_0()); }
	RULE_IDENT
	{ after(grammarAccess.getCallExpAccess().getIdentTerminalRuleCall_1_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__4
=======
rule__CallExp__Group_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_5__4__Impl
	rule__NonLeftRecExpression__Group_5__5
=======
	rule__CallExp__Group_1__1__Impl
	rule__CallExp__Group_1__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__4__Impl
=======
rule__CallExp__Group_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getIfBlockAssignment_5_4()); }
	(rule__NonLeftRecExpression__IfBlockAssignment_5_4)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getIfBlockAssignment_5_4()); }
=======
	{ before(grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_1_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__5
=======
rule__CallExp__Group_1__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_5__5__Impl
	rule__NonLeftRecExpression__Group_5__6
=======
	rule__CallExp__Group_1__2__Impl
	rule__CallExp__Group_1__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__5__Impl
=======
rule__CallExp__Group_1__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getElseKeyword_5_5()); }
	'else'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getElseKeyword_5_5()); }
=======
	{ before(grammarAccess.getCallExpAccess().getExpressionSequenceParserRuleCall_1_2()); }
	ruleexpressionSequence
	{ after(grammarAccess.getCallExpAccess().getExpressionSequenceParserRuleCall_1_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__6
=======
rule__CallExp__Group_1__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_5__6__Impl
	rule__NonLeftRecExpression__Group_5__7
=======
	rule__CallExp__Group_1__3__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__6__Impl
=======
rule__CallExp__Group_1__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getElseBlockAssignment_5_6()); }
	(rule__NonLeftRecExpression__ElseBlockAssignment_5_6)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getElseBlockAssignment_5_6()); }
=======
	{ before(grammarAccess.getCallExpAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getCallExpAccess().getRightParenthesisKeyword_1_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__7
=======

rule__ExpressionSequence__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_5__7__Impl
=======
	rule__ExpressionSequence__Group__0__Impl
	rule__ExpressionSequence__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_5__7__Impl
=======
rule__ExpressionSequence__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getEndifKeyword_5_7()); }
	'endif'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getEndifKeyword_5_7()); }
=======
	{ before(grammarAccess.getExpressionSequenceAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
	{ after(grammarAccess.getExpressionSequenceAccess().getExpressionParserRuleCall_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__NonLeftRecExpression__Group_6__0
=======
rule__ExpressionSequence__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_6__0__Impl
	rule__NonLeftRecExpression__Group_6__1
=======
	rule__ExpressionSequence__Group__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__0__Impl
=======
rule__ExpressionSequence__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getLetExpressionAction_6_0()); }
	()
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getLetExpressionAction_6_0()); }
=======
	{ before(grammarAccess.getExpressionSequenceAccess().getGroup_1()); }
	(rule__ExpressionSequence__Group_1__0)*
	{ after(grammarAccess.getExpressionSequenceAccess().getGroup_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__1
=======

rule__ExpressionSequence__Group_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_6__1__Impl
	rule__NonLeftRecExpression__Group_6__2
=======
	rule__ExpressionSequence__Group_1__0__Impl
	rule__ExpressionSequence__Group_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__1__Impl
=======
rule__ExpressionSequence__Group_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getLetKeyword_6_1()); }
	'let'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getLetKeyword_6_1()); }
=======
	{ before(grammarAccess.getExpressionSequenceAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getExpressionSequenceAccess().getCommaKeyword_1_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__2
=======
rule__ExpressionSequence__Group_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_6__2__Impl
	rule__NonLeftRecExpression__Group_6__3
=======
	rule__ExpressionSequence__Group_1__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__2__Impl
=======
rule__ExpressionSequence__Group_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getBindingsAssignment_6_2()); }
	(rule__NonLeftRecExpression__BindingsAssignment_6_2)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getBindingsAssignment_6_2()); }
=======
	{ before(grammarAccess.getExpressionSequenceAccess().getExpressionParserRuleCall_1_1()); }
	ruleexpression
	{ after(grammarAccess.getExpressionSequenceAccess().getExpressionParserRuleCall_1_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__3
=======

rule__VariableDefinition__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_6__3__Impl
	rule__NonLeftRecExpression__Group_6__4
=======
	rule__VariableDefinition__Group__0__Impl
	rule__VariableDefinition__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__3__Impl
=======
rule__VariableDefinition__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getGroup_6_3()); }
	(rule__NonLeftRecExpression__Group_6_3__0)*
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getGroup_6_3()); }
=======
	{ before(grammarAccess.getVariableDefinitionAccess().getIdentTerminalRuleCall_0()); }
	RULE_IDENT
	{ after(grammarAccess.getVariableDefinitionAccess().getIdentTerminalRuleCall_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__4
=======
rule__VariableDefinition__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_6__4__Impl
	rule__NonLeftRecExpression__Group_6__5
=======
	rule__VariableDefinition__Group__1__Impl
	rule__VariableDefinition__Group__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__4__Impl
=======
rule__VariableDefinition__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getInKeyword_6_4()); }
	'in'
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getInKeyword_6_4()); }
=======
	{ before(grammarAccess.getVariableDefinitionAccess().getGroup_1()); }
	(rule__VariableDefinition__Group_1__0)?
	{ after(grammarAccess.getVariableDefinitionAccess().getGroup_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__5
=======
rule__VariableDefinition__Group__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_6__5__Impl
=======
	rule__VariableDefinition__Group__2__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6__5__Impl
=======
rule__VariableDefinition__Group__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getLetExprAssignment_6_5()); }
	(rule__NonLeftRecExpression__LetExprAssignment_6_5)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getLetExprAssignment_6_5()); }
=======
	{ before(grammarAccess.getVariableDefinitionAccess().getVerticalLineKeyword_2()); }
	'|'
	{ after(grammarAccess.getVariableDefinitionAccess().getVerticalLineKeyword_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6_3__0
=======
rule__VariableDefinition__Group_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_6_3__0__Impl
	rule__NonLeftRecExpression__Group_6_3__1
=======
	rule__VariableDefinition__Group_1__0__Impl
	rule__VariableDefinition__Group_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6_3__0__Impl
=======
rule__VariableDefinition__Group_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getCommaKeyword_6_3_0()); }
	','
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getCommaKeyword_6_3_0()); }
=======
	{ before(grammarAccess.getVariableDefinitionAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getVariableDefinitionAccess().getColonKeyword_1_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6_3__1
=======
rule__VariableDefinition__Group_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__NonLeftRecExpression__Group_6_3__1__Impl
=======
	rule__VariableDefinition__Group_1__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__Group_6_3__1__Impl
=======
rule__VariableDefinition__Group_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getNonLeftRecExpressionAccess().getBindingsAssignment_6_3_1()); }
	(rule__NonLeftRecExpression__BindingsAssignment_6_3_1)
	{ after(grammarAccess.getNonLeftRecExpressionAccess().getBindingsAssignment_6_3_1()); }
=======
	{ before(grammarAccess.getVariableDefinitionAccess().getTypeLiteralParserRuleCall_1_1()); }
	ruletypeLiteral
	{ after(grammarAccess.getVariableDefinitionAccess().getTypeLiteralParserRuleCall_1_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__Binding__Group__0
=======
rule__Literal__Group_6__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__Binding__Group__0__Impl
	rule__Binding__Group__1
=======
	rule__Literal__Group_6__0__Impl
	rule__Literal__Group_6__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group__0__Impl
=======
rule__Literal__Group_6__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getBindingAccess().getIdentifierAssignment_0()); }
	(rule__Binding__IdentifierAssignment_0)
	{ after(grammarAccess.getBindingAccess().getIdentifierAssignment_0()); }
=======
	{ before(grammarAccess.getLiteralAccess().getSequenceKeyword_6_0()); }
	'Sequence{'
	{ after(grammarAccess.getLiteralAccess().getSequenceKeyword_6_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group__1
=======
rule__Literal__Group_6__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__Binding__Group__1__Impl
	rule__Binding__Group__2
=======
	rule__Literal__Group_6__1__Impl
	rule__Literal__Group_6__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group__1__Impl
=======
rule__Literal__Group_6__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getBindingAccess().getGroup_1()); }
	(rule__Binding__Group_1__0)?
	{ after(grammarAccess.getBindingAccess().getGroup_1()); }
=======
	{ before(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_6_1()); }
	ruleexpressionSequence
	{ after(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_6_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group__2
=======
rule__Literal__Group_6__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__Binding__Group__2__Impl
	rule__Binding__Group__3
=======
	rule__Literal__Group_6__2__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group__2__Impl
=======
rule__Literal__Group_6__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getBindingAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getBindingAccess().getEqualsSignKeyword_2()); }
=======
	{ before(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_6_2()); }
	'}'
	{ after(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_6_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group__3
=======

rule__Literal__Group_7__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__Binding__Group__3__Impl
=======
	rule__Literal__Group_7__0__Impl
	rule__Literal__Group_7__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group__3__Impl
=======
rule__Literal__Group_7__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getBindingAccess().getExpressionAssignment_3()); }
	(rule__Binding__ExpressionAssignment_3)
	{ after(grammarAccess.getBindingAccess().getExpressionAssignment_3()); }
=======
	{ before(grammarAccess.getLiteralAccess().getOrderedSetKeyword_7_0()); }
	'OrderedSet{'
	{ after(grammarAccess.getLiteralAccess().getOrderedSetKeyword_7_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__Binding__Group_1__0
=======
rule__Literal__Group_7__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__Binding__Group_1__0__Impl
	rule__Binding__Group_1__1
=======
	rule__Literal__Group_7__1__Impl
	rule__Literal__Group_7__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group_1__0__Impl
=======
rule__Literal__Group_7__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getBindingAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getBindingAccess().getColonKeyword_1_0()); }
=======
	{ before(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_7_1()); }
	ruleexpressionSequence
	{ after(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_7_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group_1__1
=======
rule__Literal__Group_7__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__Binding__Group_1__1__Impl
=======
	rule__Literal__Group_7__2__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__Group_1__1__Impl
=======
rule__Literal__Group_7__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getBindingAccess().getTypeAssignment_1_1()); }
	(rule__Binding__TypeAssignment_1_1)
	{ after(grammarAccess.getBindingAccess().getTypeAssignment_1_1()); }
=======
	{ before(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_7_2()); }
	'}'
	{ after(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_7_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__CallExp__Group_0__0
=======
rule__Literal__Group_8__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__CallExp__Group_0__0__Impl
	rule__CallExp__Group_0__1
=======
	rule__Literal__Group_8__0__Impl
	rule__Literal__Group_8__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_0__0__Impl
=======
rule__Literal__Group_8__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getCallExpAccess().getCollectionIteratorParserRuleCall_0_0()); }
	rulecollectionIterator
	{ after(grammarAccess.getCallExpAccess().getCollectionIteratorParserRuleCall_0_0()); }
=======
	{ before(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_0()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_0__1
=======
rule__Literal__Group_8__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__CallExp__Group_0__1__Impl
	rule__CallExp__Group_0__2
=======
	rule__Literal__Group_8__1__Impl
	rule__Literal__Group_8__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_0__1__Impl
=======
rule__Literal__Group_8__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_0_1()); }
	'('
	{ after(grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_0_1()); }
=======
	{ before(grammarAccess.getLiteralAccess().getColonColonKeyword_8_1()); }
	'::'
	{ after(grammarAccess.getLiteralAccess().getColonColonKeyword_8_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_0__2
=======
rule__Literal__Group_8__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__CallExp__Group_0__2__Impl
	rule__CallExp__Group_0__3
=======
	rule__Literal__Group_8__2__Impl
	rule__Literal__Group_8__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_0__2__Impl
=======
rule__Literal__Group_8__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getCallExpAccess().getVariableDefinitionParserRuleCall_0_2()); }
	rulevariableDefinition
	{ after(grammarAccess.getCallExpAccess().getVariableDefinitionParserRuleCall_0_2()); }
=======
	{ before(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_2()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_0__3
=======
rule__Literal__Group_8__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__CallExp__Group_0__3__Impl
	rule__CallExp__Group_0__4
=======
	rule__Literal__Group_8__3__Impl
	rule__Literal__Group_8__4
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_0__3__Impl
=======
rule__Literal__Group_8__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getCallExpAccess().getExpressionAssignment_0_3()); }
	(rule__CallExp__ExpressionAssignment_0_3)
	{ after(grammarAccess.getCallExpAccess().getExpressionAssignment_0_3()); }
=======
	{ before(grammarAccess.getLiteralAccess().getColonColonKeyword_8_3()); }
	'::'
	{ after(grammarAccess.getLiteralAccess().getColonColonKeyword_8_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_0__4
=======
rule__Literal__Group_8__4
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__CallExp__Group_0__4__Impl
=======
	rule__Literal__Group_8__4__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_0__4__Impl
=======
rule__Literal__Group_8__4__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getCallExpAccess().getRightParenthesisKeyword_0_4()); }
	')'
	{ after(grammarAccess.getCallExpAccess().getRightParenthesisKeyword_0_4()); }
=======
	{ before(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_4()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_4()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__CallExp__Group_1__0
=======
rule__Literal__Group_9__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__CallExp__Group_1__0__Impl
	rule__CallExp__Group_1__1
=======
	rule__Literal__Group_9__0__Impl
	rule__Literal__Group_9__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_1__0__Impl
=======
rule__Literal__Group_9__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getCallExpAccess().getIDENTTerminalRuleCall_1_0()); }
	RULE_IDENT
	{ after(grammarAccess.getCallExpAccess().getIDENTTerminalRuleCall_1_0()); }
=======
	{ before(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_9_0()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_9_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_1__1
=======
rule__Literal__Group_9__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__CallExp__Group_1__1__Impl
	rule__CallExp__Group_1__2
=======
	rule__Literal__Group_9__1__Impl
	rule__Literal__Group_9__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_1__1__Impl
=======
rule__Literal__Group_9__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_1_1()); }
=======
	{ before(grammarAccess.getLiteralAccess().getColonColonKeyword_9_1()); }
	'::'
	{ after(grammarAccess.getLiteralAccess().getColonColonKeyword_9_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_1__2
=======
rule__Literal__Group_9__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__CallExp__Group_1__2__Impl
	rule__CallExp__Group_1__3
=======
	rule__Literal__Group_9__2__Impl
	rule__Literal__Group_9__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_1__2__Impl
=======
rule__Literal__Group_9__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getCallExpAccess().getExpressionSequenceParserRuleCall_1_2()); }
	ruleexpressionSequence
	{ after(grammarAccess.getCallExpAccess().getExpressionSequenceParserRuleCall_1_2()); }
=======
	{ before(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_9_2()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_9_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_1__3
=======
rule__Literal__Group_9__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__CallExp__Group_1__3__Impl
=======
	rule__Literal__Group_9__3__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__Group_1__3__Impl
=======
rule__Literal__Group_9__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getCallExpAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getCallExpAccess().getRightParenthesisKeyword_1_3()); }
=======
	{ before(grammarAccess.getLiteralAccess().getColonKeyword_9_3()); }
	':'
	{ after(grammarAccess.getLiteralAccess().getColonKeyword_9_3()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}


<<<<<<< HEAD
rule__ExpressionSequence__Group__0
=======
rule__TypeLiteral__Group_4__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__ExpressionSequence__Group__0__Impl
	rule__ExpressionSequence__Group__1
=======
	rule__TypeLiteral__Group_4__0__Impl
	rule__TypeLiteral__Group_4__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ExpressionSequence__Group__0__Impl
=======
rule__TypeLiteral__Group_4__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getExpressionSequenceAccess().getSeqExprsAssignment_0()); }
	(rule__ExpressionSequence__SeqExprsAssignment_0)
	{ after(grammarAccess.getExpressionSequenceAccess().getSeqExprsAssignment_0()); }
=======
	{ before(grammarAccess.getTypeLiteralAccess().getSequenceKeyword_4_0()); }
	'Sequence('
	{ after(grammarAccess.getTypeLiteralAccess().getSequenceKeyword_4_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ExpressionSequence__Group__1
=======
rule__TypeLiteral__Group_4__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__ExpressionSequence__Group__1__Impl
=======
	rule__TypeLiteral__Group_4__1__Impl
	rule__TypeLiteral__Group_4__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ExpressionSequence__Group__1__Impl
=======
rule__TypeLiteral__Group_4__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getExpressionSequenceAccess().getGroup_1()); }
	(rule__ExpressionSequence__Group_1__0)*
	{ after(grammarAccess.getExpressionSequenceAccess().getGroup_1()); }
=======
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralParserRuleCall_4_1()); }
	ruletypeLiteral
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralParserRuleCall_4_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__ExpressionSequence__Group_1__0
=======
rule__TypeLiteral__Group_4__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__ExpressionSequence__Group_1__0__Impl
	rule__ExpressionSequence__Group_1__1
=======
	rule__TypeLiteral__Group_4__2__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ExpressionSequence__Group_1__0__Impl
=======
rule__TypeLiteral__Group_4__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getExpressionSequenceAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getExpressionSequenceAccess().getCommaKeyword_1_0()); }
=======
	{ before(grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_4_2()); }
	')'
	{ after(grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_4_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ExpressionSequence__Group_1__1
=======

rule__TypeLiteral__Group_5__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__ExpressionSequence__Group_1__1__Impl
=======
	rule__TypeLiteral__Group_5__0__Impl
	rule__TypeLiteral__Group_5__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ExpressionSequence__Group_1__1__Impl
=======
rule__TypeLiteral__Group_5__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getExpressionSequenceAccess().getSeqExprsAssignment_1_1()); }
	(rule__ExpressionSequence__SeqExprsAssignment_1_1)
	{ after(grammarAccess.getExpressionSequenceAccess().getSeqExprsAssignment_1_1()); }
=======
	{ before(grammarAccess.getTypeLiteralAccess().getOrderedSetKeyword_5_0()); }
	'OrderedSet('
	{ after(grammarAccess.getTypeLiteralAccess().getOrderedSetKeyword_5_0()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__VariableDefinition__Group__0
=======
rule__TypeLiteral__Group_5__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__VariableDefinition__Group__0__Impl
	rule__VariableDefinition__Group__1
=======
	rule__TypeLiteral__Group_5__1__Impl
	rule__TypeLiteral__Group_5__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__VariableDefinition__Group__0__Impl
=======
rule__TypeLiteral__Group_5__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getVariableDefinitionAccess().getIDENTTerminalRuleCall_0()); }
	RULE_IDENT
	{ after(grammarAccess.getVariableDefinitionAccess().getIDENTTerminalRuleCall_0()); }
=======
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralParserRuleCall_5_1()); }
	ruletypeLiteral
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralParserRuleCall_5_1()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__VariableDefinition__Group__1
=======
rule__TypeLiteral__Group_5__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__VariableDefinition__Group__1__Impl
	rule__VariableDefinition__Group__2
=======
	rule__TypeLiteral__Group_5__2__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__VariableDefinition__Group__1__Impl
=======
rule__TypeLiteral__Group_5__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
(
<<<<<<< HEAD
	{ before(grammarAccess.getVariableDefinitionAccess().getGroup_1()); }
	(rule__VariableDefinition__Group_1__0)?
	{ after(grammarAccess.getVariableDefinitionAccess().getGroup_1()); }
=======
	{ before(grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_5_2()); }
	')'
	{ after(grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_5_2()); }
>>>>>>> local-ale-lang
)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__VariableDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__2__Impl
=======

rule__TypeLiteral__Group_7__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
(
	{ before(grammarAccess.getVariableDefinitionAccess().getVerticalLineKeyword_2()); }
	'|'
	{ after(grammarAccess.getVariableDefinitionAccess().getVerticalLineKeyword_2()); }
)
=======
	rule__TypeLiteral__Group_7__0__Impl
	rule__TypeLiteral__Group_7__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD

rule__VariableDefinition__Group_1__0
=======
rule__TypeLiteral__Group_7__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	rule__VariableDefinition__Group_1__0__Impl
	rule__VariableDefinition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDefinitionAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getVariableDefinitionAccess().getColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDefinition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDefinitionAccess().getTypeLiteralParserRuleCall_1_1()); }
	ruletypeLiteral
	{ after(grammarAccess.getVariableDefinitionAccess().getTypeLiteralParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_6__0__Impl
	rule__Literal__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getSequenceKeyword_6_0()); }
	'Sequence{'
	{ after(grammarAccess.getLiteralAccess().getSequenceKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_6__1__Impl
	rule__Literal__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_6_1()); }
	ruleexpressionSequence
	{ after(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_6_2()); }
	'}'
	{ after(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_7__0__Impl
	rule__Literal__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getOrderedSetKeyword_7_0()); }
	'OrderedSet{'
	{ after(grammarAccess.getLiteralAccess().getOrderedSetKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_7__1__Impl
	rule__Literal__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_7_1()); }
	ruleexpressionSequence
	{ after(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_7_2()); }
	'}'
	{ after(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_8__0__Impl
	rule__Literal__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_8_0()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_8__1__Impl
	rule__Literal__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getColonColonKeyword_8_1()); }
	'::'
	{ after(grammarAccess.getLiteralAccess().getColonColonKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_8__2__Impl
	rule__Literal__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_8_2()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_8__3__Impl
	rule__Literal__Group_8__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getColonColonKeyword_8_3()); }
	'::'
	{ after(grammarAccess.getLiteralAccess().getColonColonKeyword_8_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_8__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_8_4()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_8_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_9__0__Impl
	rule__Literal__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_9_0()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_9__1__Impl
	rule__Literal__Group_9__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getColonColonKeyword_9_1()); }
	'::'
	{ after(grammarAccess.getLiteralAccess().getColonColonKeyword_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_9__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_9__2__Impl
	rule__Literal__Group_9__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_9__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_9_2()); }
	RULE_IDENT
	{ after(grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_9_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_9__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_9__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_9__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getColonKeyword_9_3()); }
	':'
	{ after(grammarAccess.getLiteralAccess().getColonKeyword_9_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_0__0__Impl
	rule__TypeLiteral__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralStringAction_0_0()); }
	()
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralStringAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getStringKeyword_0_1()); }
	'String'
	{ after(grammarAccess.getTypeLiteralAccess().getStringKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_1__0__Impl
	rule__TypeLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralIntegerAction_1_0()); }
	()
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralIntegerAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getIntegerKeyword_1_1()); }
	'Integer'
	{ after(grammarAccess.getTypeLiteralAccess().getIntegerKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_2__0__Impl
	rule__TypeLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralRealAction_2_0()); }
	()
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralRealAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getRealKeyword_2_1()); }
	'Real'
	{ after(grammarAccess.getTypeLiteralAccess().getRealKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_3__0__Impl
	rule__TypeLiteral__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralBooleanAction_3_0()); }
	()
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralBooleanAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getBooleanKeyword_3_1()); }
	'Boolean'
	{ after(grammarAccess.getTypeLiteralAccess().getBooleanKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_4__0__Impl
	rule__TypeLiteral__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralSequenceAction_4_0()); }
	()
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralSequenceAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_4__1__Impl
	rule__TypeLiteral__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getSequenceKeyword_4_1()); }
	'Sequence('
	{ after(grammarAccess.getTypeLiteralAccess().getSequenceKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_4__2__Impl
	rule__TypeLiteral__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getSubTypeAssignment_4_2()); }
	(rule__TypeLiteral__SubTypeAssignment_4_2)
	{ after(grammarAccess.getTypeLiteralAccess().getSubTypeAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_4_3()); }
	')'
	{ after(grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_5__0__Impl
	rule__TypeLiteral__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralOrderedTypeSetAction_5_0()); }
	()
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralOrderedTypeSetAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_5__1__Impl
	rule__TypeLiteral__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getOrderedSetKeyword_5_1()); }
	'OrderedSet('
	{ after(grammarAccess.getTypeLiteralAccess().getOrderedSetKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_5__2__Impl
	rule__TypeLiteral__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getSubTypeAssignment_5_2()); }
	(rule__TypeLiteral__SubTypeAssignment_5_2)
	{ after(grammarAccess.getTypeLiteralAccess().getSubTypeAssignment_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_5_3()); }
	')'
	{ after(grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_6__0__Impl
	rule__TypeLiteral__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralClassifierAction_6_0()); }
	()
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralClassifierAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_6_1()); }
	ruleclassifierTypeRule
	{ after(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_7__0__Impl
	rule__TypeLiteral__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getTypeLiteralPipeAction_7_0()); }
	()
	{ after(grammarAccess.getTypeLiteralAccess().getTypeLiteralPipeAction_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_7__1__Impl
	rule__TypeLiteral__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getLeftCurlyBracketKeyword_7_1()); }
	'{'
	{ after(grammarAccess.getTypeLiteralAccess().getLeftCurlyBracketKeyword_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_7__2__Impl
	rule__TypeLiteral__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_2()); }
	ruleclassifierTypeRule
	{ after(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_7__3__Impl
	rule__TypeLiteral__Group_7__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getGroup_7_3()); }
	(rule__TypeLiteral__Group_7_3__0)*
	{ after(grammarAccess.getTypeLiteralAccess().getGroup_7_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_7__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getRightCurlyBracketKeyword_7_4()); }
	'}'
	{ after(grammarAccess.getTypeLiteralAccess().getRightCurlyBracketKeyword_7_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeLiteral__Group_7_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_7_3__0__Impl
	rule__TypeLiteral__Group_7_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getVerticalLineKeyword_7_3_0()); }
	'|'
	{ after(grammarAccess.getTypeLiteralAccess().getVerticalLineKeyword_7_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeLiteral__Group_7_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLiteral__Group_7_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_3_1()); }
	ruleclassifierTypeRule
	{ after(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassifierTypeRule__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassifierTypeRule__Group_0__0__Impl
	rule__ClassifierTypeRule__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierTypeRule__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getIDENTTerminalRuleCall_0_0()); }
	RULE_IDENT
	{ after(grammarAccess.getClassifierTypeRuleAccess().getIDENTTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierTypeRule__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassifierTypeRule__Group_0__1__Impl
	rule__ClassifierTypeRule__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierTypeRule__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getColonColonKeyword_0_1()); }
	'::'
	{ after(grammarAccess.getClassifierTypeRuleAccess().getColonColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierTypeRule__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassifierTypeRule__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierTypeRule__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getIDENTTerminalRuleCall_0_2()); }
	RULE_IDENT
	{ after(grammarAccess.getClassifierTypeRuleAccess().getIDENTTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassifierTypeRule__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassifierTypeRule__Group_1__0__Impl
	rule__ClassifierTypeRule__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierTypeRule__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getIDENTTerminalRuleCall_1_0()); }
	RULE_IDENT
	{ after(grammarAccess.getClassifierTypeRuleAccess().getIDENTTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierTypeRule__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassifierTypeRule__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierTypeRule__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getColonKeyword_1_1()); }
	':'
	{ after(grammarAccess.getClassifierTypeRuleAccess().getColonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RQualified__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RQualified__Group__0__Impl
	rule__RQualified__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RQualified__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRQualifiedAccess().getIDENTTerminalRuleCall_0()); }
	RULE_IDENT
	{ after(grammarAccess.getRQualifiedAccess().getIDENTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RQualified__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RQualified__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RQualified__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRQualifiedAccess().getGroup_1()); }
	(rule__RQualified__Group_1__0)*
	{ after(grammarAccess.getRQualifiedAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RQualified__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RQualified__Group_1__0__Impl
	rule__RQualified__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RQualified__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRQualifiedAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getRQualifiedAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RQualified__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RQualified__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RQualified__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRQualifiedAccess().getIDENTTerminalRuleCall_1_1()); }
	RULE_IDENT
	{ after(grammarAccess.getRQualifiedAccess().getIDENTTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RRoot__XtendedClassesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRRootAccess().getXtendedClassesRClassParserRuleCall_5_0()); }
		rulerClass
		{ after(grammarAccess.getRRootAccess().getXtendedClassesRClassParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RClass__OpenClassAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRClassAccess().getOpenClassROpenClassParserRuleCall_0_1_0()); }
		rulerOpenClass
		{ after(grammarAccess.getRClassAccess().getOpenClassROpenClassParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RClass__NewClassAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRClassAccess().getNewClassRNewClassParserRuleCall_1_1_0()); }
		rulerNewClass
		{ after(grammarAccess.getRClassAccess().getNewClassRNewClassParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getROpenClassAccess().getNameRQualifiedParserRuleCall_2_0()); }
		rulerQualified
		{ after(grammarAccess.getROpenClassAccess().getNameRQualifiedParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__AttributesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getROpenClassAccess().getAttributesRAttributeParserRuleCall_5_0()); }
		rulerAttribute
		{ after(grammarAccess.getROpenClassAccess().getAttributesRAttributeParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROpenClass__OperationsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getROpenClassAccess().getOperationsROperationParserRuleCall_6_0()); }
		rulerOperation
		{ after(grammarAccess.getROpenClassAccess().getOperationsROperationParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRNewClassAccess().getNameRQualifiedParserRuleCall_1_0()); }
		rulerQualified
		{ after(grammarAccess.getRNewClassAccess().getNameRQualifiedParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__AttributesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRNewClassAccess().getAttributesRAttributeParserRuleCall_3_0()); }
		rulerAttribute
		{ after(grammarAccess.getRNewClassAccess().getAttributesRAttributeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RNewClass__OperationsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRNewClassAccess().getOperationsROperationParserRuleCall_4_0()); }
		rulerOperation
		{ after(grammarAccess.getRNewClassAccess().getOperationsROperationParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getROperationAccess().getTypeRTypeParserRuleCall_2_0()); }
		rulerType
		{ after(grammarAccess.getROperationAccess().getTypeRTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getROperationAccess().getNameIDENTTerminalRuleCall_3_0()); }
		RULE_IDENT
		{ after(grammarAccess.getROperationAccess().getNameIDENTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__ParamListAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getROperationAccess().getParamListRParametersParserRuleCall_5_0()); }
		rulerParameters
		{ after(grammarAccess.getROperationAccess().getParamListRParametersParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ROperation__BodyAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getROperationAccess().getBodyRBlockParserRuleCall_7_0()); }
		rulerBlock
		{ after(grammarAccess.getROperationAccess().getBodyRBlockParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RParameters__ParamsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_0_0()); }
		rulerVariable
		{ after(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RParameters__ParamsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_1_1_0()); }
		rulerVariable
		{ after(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RVariable__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRVariableAccess().getTypeRTypeParserRuleCall_0_0()); }
		rulerType
		{ after(grammarAccess.getRVariableAccess().getTypeRTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RVariable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRVariableAccess().getNameIDENTTerminalRuleCall_1_0()); }
		RULE_IDENT
		{ after(grammarAccess.getRVariableAccess().getNameIDENTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RAttribute__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRAttributeAccess().getTypeRTypeParserRuleCall_0_0()); }
		rulerType
		{ after(grammarAccess.getRAttributeAccess().getTypeRTypeParserRuleCall_0_0()); }
	)
=======
(
	{ before(grammarAccess.getTypeLiteralAccess().getLeftCurlyBracketKeyword_7_0()); }
	'{'
	{ after(grammarAccess.getTypeLiteralAccess().getLeftCurlyBracketKeyword_7_0()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAttribute__NameAssignment_1
=======
rule__TypeLiteral__Group_7__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRAttributeAccess().getNameIDENTTerminalRuleCall_1_0()); }
		RULE_IDENT
		{ after(grammarAccess.getRAttributeAccess().getNameIDENTTerminalRuleCall_1_0()); }
	)
=======
	rule__TypeLiteral__Group_7__1__Impl
	rule__TypeLiteral__Group_7__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAttribute__ExprAssignment_2_1
=======
rule__TypeLiteral__Group_7__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRAttributeAccess().getExprExpressionParserRuleCall_2_1_0()); }
		ruleexpression
		{ after(grammarAccess.getRAttributeAccess().getExprExpressionParserRuleCall_2_1_0()); }
	)
=======
(
	{ before(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_1()); }
	ruleclassifierTypeRule
	{ after(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_1()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__StmtAssignment_0_1
=======
rule__TypeLiteral__Group_7__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRStatementAccess().getStmtRVarDeclParserRuleCall_0_1_0()); }
		rulerVarDecl
		{ after(grammarAccess.getRStatementAccess().getStmtRVarDeclParserRuleCall_0_1_0()); }
	)
=======
	rule__TypeLiteral__Group_7__2__Impl
	rule__TypeLiteral__Group_7__3
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__StmtAssignment_1_1
=======
rule__TypeLiteral__Group_7__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRStatementAccess().getStmtRAssignParserRuleCall_1_1_0()); }
		rulerAssign
		{ after(grammarAccess.getRStatementAccess().getStmtRAssignParserRuleCall_1_1_0()); }
	)
=======
(
	{ before(grammarAccess.getTypeLiteralAccess().getGroup_7_2()); }
	(rule__TypeLiteral__Group_7_2__0)*
	{ after(grammarAccess.getTypeLiteralAccess().getGroup_7_2()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__ForEachAssignment_2_1
=======
rule__TypeLiteral__Group_7__3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRStatementAccess().getForEachRForEachParserRuleCall_2_1_0()); }
		rulerForEach
		{ after(grammarAccess.getRStatementAccess().getForEachRForEachParserRuleCall_2_1_0()); }
	)
=======
	rule__TypeLiteral__Group_7__3__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__WhileAssignment_3_1
=======
rule__TypeLiteral__Group_7__3__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRStatementAccess().getWhileRWhileParserRuleCall_3_1_0()); }
		rulerWhile
		{ after(grammarAccess.getRStatementAccess().getWhileRWhileParserRuleCall_3_1_0()); }
	)
=======
(
	{ before(grammarAccess.getTypeLiteralAccess().getRightCurlyBracketKeyword_7_3()); }
	'}'
	{ after(grammarAccess.getTypeLiteralAccess().getRightCurlyBracketKeyword_7_3()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__IfAssignment_4_1
=======

rule__TypeLiteral__Group_7_2__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRStatementAccess().getIfRIfParserRuleCall_4_1_0()); }
		rulerIf
		{ after(grammarAccess.getRStatementAccess().getIfRIfParserRuleCall_4_1_0()); }
	)
=======
	rule__TypeLiteral__Group_7_2__0__Impl
	rule__TypeLiteral__Group_7_2__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RStatement__ExprAssignment_5_1
=======
rule__TypeLiteral__Group_7_2__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRStatementAccess().getExprRExpressionParserRuleCall_5_1_0()); }
		rulerExpression
		{ after(grammarAccess.getRStatementAccess().getExprRExpressionParserRuleCall_5_1_0()); }
	)
=======
(
	{ before(grammarAccess.getTypeLiteralAccess().getVerticalLineKeyword_7_2_0()); }
	'|'
	{ after(grammarAccess.getTypeLiteralAccess().getVerticalLineKeyword_7_2_0()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__TypeAssignment_0
=======
rule__TypeLiteral__Group_7_2__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRVarDeclAccess().getTypeRTypeParserRuleCall_0_0()); }
		rulerType
		{ after(grammarAccess.getRVarDeclAccess().getTypeRTypeParserRuleCall_0_0()); }
	)
=======
	rule__TypeLiteral__Group_7_2__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__IdentAssignment_1
=======
rule__TypeLiteral__Group_7_2__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRVarDeclAccess().getIdentIDENTTerminalRuleCall_1_0()); }
		RULE_IDENT
		{ after(grammarAccess.getRVarDeclAccess().getIdentIDENTTerminalRuleCall_1_0()); }
	)
=======
(
	{ before(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_2_1()); }
	ruleclassifierTypeRule
	{ after(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_2_1()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RVarDecl__ExpressionAssignment_2_1
=======

rule__ClassifierTypeRule__Group_0__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRVarDeclAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
		ruleexpression
		{ after(grammarAccess.getRVarDeclAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
	)
=======
	rule__ClassifierTypeRule__Group_0__0__Impl
	rule__ClassifierTypeRule__Group_0__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAssign__LeftAssignment_0
=======
rule__ClassifierTypeRule__Group_0__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRAssignAccess().getLeftExpressionParserRuleCall_0_0()); }
		ruleexpression
		{ after(grammarAccess.getRAssignAccess().getLeftExpressionParserRuleCall_0_0()); }
	)
=======
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_0_0()); }
	RULE_IDENT
	{ after(grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_0_0()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RAssign__RightAssignment_2
=======
rule__ClassifierTypeRule__Group_0__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRAssignAccess().getRightExpressionParserRuleCall_2_0()); }
		ruleexpression
		{ after(grammarAccess.getRAssignAccess().getRightExpressionParserRuleCall_2_0()); }
	)
=======
	rule__ClassifierTypeRule__Group_0__1__Impl
	rule__ClassifierTypeRule__Group_0__2
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RForEach__BlockAssignment_6
=======
rule__ClassifierTypeRule__Group_0__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRForEachAccess().getBlockRBlockParserRuleCall_6_0()); }
		rulerBlock
		{ after(grammarAccess.getRForEachAccess().getBlockRBlockParserRuleCall_6_0()); }
	)
=======
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getColonColonKeyword_0_1()); }
	'::'
	{ after(grammarAccess.getClassifierTypeRuleAccess().getColonColonKeyword_0_1()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__StatementAssignment_1_0
=======
rule__ClassifierTypeRule__Group_0__2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRBlockAccess().getStatementRStatementParserRuleCall_1_0_0()); }
		rulerStatement
		{ after(grammarAccess.getRBlockAccess().getStatementRStatementParserRuleCall_1_0_0()); }
	)
=======
	rule__ClassifierTypeRule__Group_0__2__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RBlock__StatementAssignment_1_1
=======
rule__ClassifierTypeRule__Group_0__2__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRBlockAccess().getStatementRStatementParserRuleCall_1_1_0()); }
		rulerStatement
		{ after(grammarAccess.getRBlockAccess().getStatementRStatementParserRuleCall_1_1_0()); }
	)
=======
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_0_2()); }
	RULE_IDENT
	{ after(grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_0_2()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__ConditionAssignment_2
=======

rule__ClassifierTypeRule__Group_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRIfAccess().getConditionExpressionParserRuleCall_2_0()); }
		ruleexpression
		{ after(grammarAccess.getRIfAccess().getConditionExpressionParserRuleCall_2_0()); }
	)
=======
	rule__ClassifierTypeRule__Group_1__0__Impl
	rule__ClassifierTypeRule__Group_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__IfBlockAssignment_4
=======
rule__ClassifierTypeRule__Group_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRIfAccess().getIfBlockRBlockParserRuleCall_4_0()); }
		rulerBlock
		{ after(grammarAccess.getRIfAccess().getIfBlockRBlockParserRuleCall_4_0()); }
	)
=======
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_1_0()); }
	RULE_IDENT
	{ after(grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_1_0()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RIf__ElseBlockAssignment_5_1
=======
rule__ClassifierTypeRule__Group_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRIfAccess().getElseBlockRBlockParserRuleCall_5_1_0()); }
		rulerBlock
		{ after(grammarAccess.getRIfAccess().getElseBlockRBlockParserRuleCall_5_1_0()); }
	)
=======
	rule__ClassifierTypeRule__Group_1__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RWhile__BlockAssignment_4
=======
rule__ClassifierTypeRule__Group_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRWhileAccess().getBlockRBlockParserRuleCall_4_0()); }
		rulerBlock
		{ after(grammarAccess.getRWhileAccess().getBlockRBlockParserRuleCall_4_0()); }
	)
=======
(
	{ before(grammarAccess.getClassifierTypeRuleAccess().getColonKeyword_1_1()); }
	':'
	{ after(grammarAccess.getClassifierTypeRuleAccess().getColonKeyword_1_1()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Expression__LeftPartAssignment_0
=======

rule__RQualified__Group__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getExpressionAccess().getLeftPartNonLeftRecExpressionParserRuleCall_0_0()); }
		rulenonLeftRecExpression
		{ after(grammarAccess.getExpressionAccess().getLeftPartNonLeftRecExpressionParserRuleCall_0_0()); }
	)
=======
	rule__RQualified__Group__0__Impl
	rule__RQualified__Group__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Expression__RecpartAssignment_1
=======
rule__RQualified__Group__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getExpressionAccess().getRecpartRecExpressionParserRuleCall_1_0()); }
		rulerecExpression
		{ after(grammarAccess.getExpressionAccess().getRecpartRecExpressionParserRuleCall_1_0()); }
	)
=======
(
	{ before(grammarAccess.getRQualifiedAccess().getIdentTerminalRuleCall_0()); }
	RULE_IDENT
	{ after(grammarAccess.getRQualifiedAccess().getIdentTerminalRuleCall_0()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__RecExpression__RecExpAssignment_1
=======
rule__RQualified__Group__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getRecExpressionAccess().getRecExpRecExpressionParserRuleCall_1_0()); }
		rulerecExpression
		{ after(grammarAccess.getRecExpressionAccess().getRecExpRecExpressionParserRuleCall_1_0()); }
	)
=======
	rule__RQualified__Group__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__IdentAssignment_0_2
=======
rule__RQualified__Group__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getNavigationSegmentAccess().getIdentIDENTTerminalRuleCall_0_2_0()); }
		RULE_IDENT
		{ after(grammarAccess.getNavigationSegmentAccess().getIdentIDENTTerminalRuleCall_0_2_0()); }
	)
=======
(
	{ before(grammarAccess.getRQualifiedAccess().getGroup_1()); }
	(rule__RQualified__Group_1__0)*
	{ after(grammarAccess.getRQualifiedAccess().getGroup_1()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__CallAssignment_1_2
=======

rule__RQualified__Group_1__0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getNavigationSegmentAccess().getCallCallExpParserRuleCall_1_2_0()); }
		rulecallExp
		{ after(grammarAccess.getNavigationSegmentAccess().getCallCallExpParserRuleCall_1_2_0()); }
	)
=======
	rule__RQualified__Group_1__0__Impl
	rule__RQualified__Group_1__1
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NavigationSegment__CallAssignment_2_2
=======
rule__RQualified__Group_1__0__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getNavigationSegmentAccess().getCallCallExpParserRuleCall_2_2_0()); }
		rulecallExp
		{ after(grammarAccess.getNavigationSegmentAccess().getCallCallExpParserRuleCall_2_2_0()); }
	)
=======
(
	{ before(grammarAccess.getRQualifiedAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getRQualifiedAccess().getFullStopKeyword_1_0()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__ExpressionAssignment_0_2
=======
rule__RQualified__Group_1__1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionExpressionParserRuleCall_0_2_0()); }
		ruleexpression
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionExpressionParserRuleCall_0_2_0()); }
	)
=======
	rule__RQualified__Group_1__1__Impl
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__ExpressionAssignment_1_2
=======
rule__RQualified__Group_1__1__Impl
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
<<<<<<< HEAD
	(
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionExpressionParserRuleCall_1_2_0()); }
		ruleexpression
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionExpressionParserRuleCall_1_2_0()); }
	)
=======
(
	{ before(grammarAccess.getRQualifiedAccess().getIdentTerminalRuleCall_1_1()); }
	RULE_IDENT
	{ after(grammarAccess.getRQualifiedAccess().getIdentTerminalRuleCall_1_1()); }
)
>>>>>>> local-ale-lang
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__ValueAssignment_2_1
=======

rule__RRoot__XtendedClassesAssignment_5
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getValueIDENTTerminalRuleCall_2_1_0()); }
		RULE_IDENT
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getValueIDENTTerminalRuleCall_2_1_0()); }
=======
		{ before(grammarAccess.getRRootAccess().getXtendedClassesRClassParserRuleCall_5_0()); }
		rulerClass
		{ after(grammarAccess.getRRootAccess().getXtendedClassesRClassParserRuleCall_5_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__LitAssignment_3_1
=======
rule__ROpenClass__NameAssignment_2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getLitLiteralParserRuleCall_3_1_0()); }
		ruleliteral
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getLitLiteralParserRuleCall_3_1_0()); }
=======
		{ before(grammarAccess.getROpenClassAccess().getNameRQualifiedParserRuleCall_2_0()); }
		rulerQualified
		{ after(grammarAccess.getROpenClassAccess().getNameRQualifiedParserRuleCall_2_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__ExpressionAssignment_4_2
=======
rule__ROpenClass__AttributesAssignment_5
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getExpressionExpressionParserRuleCall_4_2_0()); }
		ruleexpression
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getExpressionExpressionParserRuleCall_4_2_0()); }
=======
		{ before(grammarAccess.getROpenClassAccess().getAttributesRAttributeParserRuleCall_5_0()); }
		rulerAttribute
		{ after(grammarAccess.getROpenClassAccess().getAttributesRAttributeParserRuleCall_5_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__ConditionAssignment_5_2
=======
rule__ROpenClass__OperationsAssignment_6
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getConditionExpressionParserRuleCall_5_2_0()); }
		ruleexpression
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getConditionExpressionParserRuleCall_5_2_0()); }
=======
		{ before(grammarAccess.getROpenClassAccess().getOperationsROperationParserRuleCall_6_0()); }
		rulerOperation
		{ after(grammarAccess.getROpenClassAccess().getOperationsROperationParserRuleCall_6_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__IfBlockAssignment_5_4
=======
rule__RNewClass__NameAssignment_1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getIfBlockExpressionParserRuleCall_5_4_0()); }
		ruleexpression
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getIfBlockExpressionParserRuleCall_5_4_0()); }
=======
		{ before(grammarAccess.getRNewClassAccess().getNameIdentTerminalRuleCall_1_0()); }
		RULE_IDENT
		{ after(grammarAccess.getRNewClassAccess().getNameIdentTerminalRuleCall_1_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__ElseBlockAssignment_5_6
=======
rule__RNewClass__AttributesAssignment_3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getElseBlockExpressionParserRuleCall_5_6_0()); }
		ruleexpression
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getElseBlockExpressionParserRuleCall_5_6_0()); }
=======
		{ before(grammarAccess.getRNewClassAccess().getAttributesRAttributeParserRuleCall_3_0()); }
		rulerAttribute
		{ after(grammarAccess.getRNewClassAccess().getAttributesRAttributeParserRuleCall_3_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__BindingsAssignment_6_2
=======
rule__RNewClass__OperationsAssignment_4
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getBindingsBindingParserRuleCall_6_2_0()); }
		rulebinding
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getBindingsBindingParserRuleCall_6_2_0()); }
=======
		{ before(grammarAccess.getRNewClassAccess().getOperationsROperationParserRuleCall_4_0()); }
		rulerOperation
		{ after(grammarAccess.getRNewClassAccess().getOperationsROperationParserRuleCall_4_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__BindingsAssignment_6_3_1
=======
rule__ROperation__TypeAssignment_2
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getBindingsBindingParserRuleCall_6_3_1_0()); }
		rulebinding
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getBindingsBindingParserRuleCall_6_3_1_0()); }
=======
		{ before(grammarAccess.getROperationAccess().getTypeRTypeParserRuleCall_2_0()); }
		rulerType
		{ after(grammarAccess.getROperationAccess().getTypeRTypeParserRuleCall_2_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__NonLeftRecExpression__LetExprAssignment_6_5
=======
rule__ROperation__NameAssignment_3
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getNonLeftRecExpressionAccess().getLetExprExpressionParserRuleCall_6_5_0()); }
		ruleexpression
		{ after(grammarAccess.getNonLeftRecExpressionAccess().getLetExprExpressionParserRuleCall_6_5_0()); }
=======
		{ before(grammarAccess.getROperationAccess().getNameIdentTerminalRuleCall_3_0()); }
		RULE_IDENT
		{ after(grammarAccess.getROperationAccess().getNameIdentTerminalRuleCall_3_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__IdentifierAssignment_0
=======
rule__ROperation__ParamListAssignment_5
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getBindingAccess().getIdentifierIDENTTerminalRuleCall_0_0()); }
		RULE_IDENT
		{ after(grammarAccess.getBindingAccess().getIdentifierIDENTTerminalRuleCall_0_0()); }
=======
		{ before(grammarAccess.getROperationAccess().getParamListRParametersParserRuleCall_5_0()); }
		rulerParameters
		{ after(grammarAccess.getROperationAccess().getParamListRParametersParserRuleCall_5_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__TypeAssignment_1_1
=======
rule__ROperation__BodyAssignment_7
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getBindingAccess().getTypeTypeLiteralParserRuleCall_1_1_0()); }
		ruletypeLiteral
		{ after(grammarAccess.getBindingAccess().getTypeTypeLiteralParserRuleCall_1_1_0()); }
=======
		{ before(grammarAccess.getROperationAccess().getBodyRBlockParserRuleCall_7_0()); }
		rulerBlock
		{ after(grammarAccess.getROperationAccess().getBodyRBlockParserRuleCall_7_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__Binding__ExpressionAssignment_3
=======
rule__RParameters__ParamsAssignment_0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getBindingAccess().getExpressionExpressionParserRuleCall_3_0()); }
		ruleexpression
		{ after(grammarAccess.getBindingAccess().getExpressionExpressionParserRuleCall_3_0()); }
=======
		{ before(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_0_0()); }
		rulerVariable
		{ after(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_0_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__CallExp__ExpressionAssignment_0_3
=======
rule__RParameters__ParamsAssignment_1_1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getCallExpAccess().getExpressionExpressionParserRuleCall_0_3_0()); }
		ruleexpression
		{ after(grammarAccess.getCallExpAccess().getExpressionExpressionParserRuleCall_0_3_0()); }
=======
		{ before(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_1_1_0()); }
		rulerVariable
		{ after(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_1_1_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ExpressionSequence__SeqExprsAssignment_0
=======
rule__RVariable__TypeAssignment_0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getExpressionSequenceAccess().getSeqExprsExpressionParserRuleCall_0_0()); }
		ruleexpression
		{ after(grammarAccess.getExpressionSequenceAccess().getSeqExprsExpressionParserRuleCall_0_0()); }
=======
		{ before(grammarAccess.getRVariableAccess().getTypeRTypeParserRuleCall_0_0()); }
		rulerType
		{ after(grammarAccess.getRVariableAccess().getTypeRTypeParserRuleCall_0_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__ExpressionSequence__SeqExprsAssignment_1_1
=======
rule__RVariable__NameAssignment_1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getExpressionSequenceAccess().getSeqExprsExpressionParserRuleCall_1_1_0()); }
		ruleexpression
		{ after(grammarAccess.getExpressionSequenceAccess().getSeqExprsExpressionParserRuleCall_1_1_0()); }
=======
		{ before(grammarAccess.getRVariableAccess().getNameIdentTerminalRuleCall_1_0()); }
		RULE_IDENT
		{ after(grammarAccess.getRVariableAccess().getNameIdentTerminalRuleCall_1_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__TypeLiteral__SubTypeAssignment_4_2
=======
rule__RAttribute__TypeAssignment_0
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getTypeLiteralAccess().getSubTypeTypeLiteralParserRuleCall_4_2_0()); }
		ruletypeLiteral
		{ after(grammarAccess.getTypeLiteralAccess().getSubTypeTypeLiteralParserRuleCall_4_2_0()); }
=======
		{ before(grammarAccess.getRAttributeAccess().getTypeRTypeParserRuleCall_0_0()); }
		rulerType
		{ after(grammarAccess.getRAttributeAccess().getTypeRTypeParserRuleCall_0_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
rule__TypeLiteral__SubTypeAssignment_5_2
=======
rule__RAttribute__NameAssignment_1
>>>>>>> local-ale-lang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
<<<<<<< HEAD
		{ before(grammarAccess.getTypeLiteralAccess().getSubTypeTypeLiteralParserRuleCall_5_2_0()); }
		ruletypeLiteral
		{ after(grammarAccess.getTypeLiteralAccess().getSubTypeTypeLiteralParserRuleCall_5_2_0()); }
=======
		{ before(grammarAccess.getRAttributeAccess().getNameIdentTerminalRuleCall_1_0()); }
		RULE_IDENT
		{ after(grammarAccess.getRAttributeAccess().getNameIdentTerminalRuleCall_1_0()); }
>>>>>>> local-ale-lang
	)
;
finally {
	restoreStackSize(stackSize);
}

<<<<<<< HEAD
RULE_ADD_OP : ('+'|'-');

RULE_COMP_OP : ('<='|'>='|'!='|'<>'|'='|'=='|'<'|'>');

RULE_MULT_OP : ('*'|'/');
=======
RULE_MULTOP : ('*'|'/');
>>>>>>> local-ale-lang

RULE_REAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_IDENT : (RULE_LETTER|'_') (RULE_LETTER|'0'..'9'|'_')*;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
