/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.ecoretools.ale.util;

import org.eclipse.ecoretools.ale.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.eclipse.ecoretools.ale.AlePackage
 * @generated
 */
public class AleAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AlePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AlePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AleSwitch<Adapter> modelSwitch =
    new AleSwitch<Adapter>()
    {
      @Override
      public Adapter caseRRoot(RRoot object)
      {
        return createRRootAdapter();
      }
      @Override
      public Adapter caseRClass(RClass object)
      {
        return createRClassAdapter();
      }
      @Override
      public Adapter caseROpenClass(ROpenClass object)
      {
        return createROpenClassAdapter();
      }
      @Override
      public Adapter caseRNewClass(RNewClass object)
      {
        return createRNewClassAdapter();
      }
      @Override
      public Adapter caserOperation(rOperation object)
      {
        return createrOperationAdapter();
      }
      @Override
      public Adapter caserParameters(rParameters object)
      {
        return createrParametersAdapter();
      }
      @Override
      public Adapter caserVariable(rVariable object)
      {
        return createrVariableAdapter();
      }
      @Override
      public Adapter caserAttribute(rAttribute object)
      {
        return createrAttributeAdapter();
      }
      @Override
      public Adapter caseRStatement(RStatement object)
      {
        return createRStatementAdapter();
      }
      @Override
      public Adapter caserVarDecl(rVarDecl object)
      {
        return createrVarDeclAdapter();
      }
      @Override
      public Adapter caseRAssign(RAssign object)
      {
        return createRAssignAdapter();
      }
      @Override
      public Adapter caseRForEach(RForEach object)
      {
        return createRForEachAdapter();
      }
      @Override
      public Adapter caserCollection(rCollection object)
      {
        return createrCollectionAdapter();
      }
      @Override
      public Adapter caserBlock(rBlock object)
      {
        return createrBlockAdapter();
      }
      @Override
      public Adapter caseRIf(RIf object)
      {
        return createRIfAdapter();
      }
      @Override
      public Adapter caseRWhile(RWhile object)
      {
        return createRWhileAdapter();
      }
      @Override
      public Adapter caseRExpression(RExpression object)
      {
        return createRExpressionAdapter();
      }
      @Override
      public Adapter caseExpr(Expr object)
      {
        return createExprAdapter();
      }
      @Override
      public Adapter caseNavigationSegment(NavigationSegment object)
      {
        return createNavigationSegmentAdapter();
      }
      @Override
      public Adapter caseBinding(Binding object)
      {
        return createBindingAdapter();
      }
      @Override
      public Adapter caseClassExp(ClassExp object)
      {
        return createClassExpAdapter();
      }
      @Override
      public Adapter caseexpressionSequence(expressionSequence object)
      {
        return createexpressionSequenceAdapter();
      }
      @Override
      public Adapter casevariableDefinition(variableDefinition object)
      {
        return createvariableDefinitionAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseTypeLiteral(TypeLiteral object)
      {
        return createTypeLiteralAdapter();
      }
      @Override
      public Adapter caseRType(RType object)
      {
        return createRTypeAdapter();
      }
      @Override
      public Adapter caseRValDecl(RValDecl object)
      {
        return createRValDeclAdapter();
      }
      @Override
      public Adapter caseFinalIdentSegment(FinalIdentSegment object)
      {
        return createFinalIdentSegmentAdapter();
      }
      @Override
      public Adapter caseFinalIdentCallSegment(FinalIdentCallSegment object)
      {
        return createFinalIdentCallSegmentAdapter();
      }
      @Override
      public Adapter caseFinalCallExpSegment(FinalCallExpSegment object)
      {
        return createFinalCallExpSegmentAdapter();
      }
      @Override
      public Adapter caseNotExpression(NotExpression object)
      {
        return createNotExpressionAdapter();
      }
      @Override
      public Adapter caseNegExpression(NegExpression object)
      {
        return createNegExpressionAdapter();
      }
      @Override
      public Adapter caseIdentifierExpresion(IdentifierExpresion object)
      {
        return createIdentifierExpresionAdapter();
      }
      @Override
      public Adapter caseLiteralExpressioin(LiteralExpressioin object)
      {
        return createLiteralExpressioinAdapter();
      }
      @Override
      public Adapter caseParenthesisExpression(ParenthesisExpression object)
      {
        return createParenthesisExpressionAdapter();
      }
      @Override
      public Adapter caseIfExpression(IfExpression object)
      {
        return createIfExpressionAdapter();
      }
      @Override
      public Adapter caseLetExpression(LetExpression object)
      {
        return createLetExpressionAdapter();
      }
      @Override
      public Adapter caseTypeLiteralString(TypeLiteralString object)
      {
        return createTypeLiteralStringAdapter();
      }
      @Override
      public Adapter caseTypeLiteralInteger(TypeLiteralInteger object)
      {
        return createTypeLiteralIntegerAdapter();
      }
      @Override
      public Adapter caseTypeLiteralReal(TypeLiteralReal object)
      {
        return createTypeLiteralRealAdapter();
      }
      @Override
      public Adapter caseTypeLiteralBoolean(TypeLiteralBoolean object)
      {
        return createTypeLiteralBooleanAdapter();
      }
      @Override
      public Adapter caseTypeLiteralSequence(TypeLiteralSequence object)
      {
        return createTypeLiteralSequenceAdapter();
      }
      @Override
      public Adapter caseTypeLiteralOrderedTypeSet(TypeLiteralOrderedTypeSet object)
      {
        return createTypeLiteralOrderedTypeSetAdapter();
      }
      @Override
      public Adapter caseTypeLiteralClassifier(TypeLiteralClassifier object)
      {
        return createTypeLiteralClassifierAdapter();
      }
      @Override
      public Adapter caseTypeLiteralPipe(TypeLiteralPipe object)
      {
        return createTypeLiteralPipeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RRoot <em>RRoot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RRoot
   * @generated
   */
  public Adapter createRRootAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RClass <em>RClass</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RClass
   * @generated
   */
  public Adapter createRClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.ROpenClass <em>ROpen Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.ROpenClass
   * @generated
   */
  public Adapter createROpenClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RNewClass <em>RNew Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RNewClass
   * @generated
   */
  public Adapter createRNewClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.rOperation <em>rOperation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.rOperation
   * @generated
   */
  public Adapter createrOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.rParameters <em>rParameters</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.rParameters
   * @generated
   */
  public Adapter createrParametersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.rVariable <em>rVariable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.rVariable
   * @generated
   */
  public Adapter createrVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.rAttribute <em>rAttribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.rAttribute
   * @generated
   */
  public Adapter createrAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RStatement <em>RStatement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RStatement
   * @generated
   */
  public Adapter createRStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.rVarDecl <em>rVar Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.rVarDecl
   * @generated
   */
  public Adapter createrVarDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RAssign <em>RAssign</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RAssign
   * @generated
   */
  public Adapter createRAssignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RForEach <em>RFor Each</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RForEach
   * @generated
   */
  public Adapter createRForEachAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.rCollection <em>rCollection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.rCollection
   * @generated
   */
  public Adapter createrCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.rBlock <em>rBlock</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.rBlock
   * @generated
   */
  public Adapter createrBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RIf <em>RIf</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RIf
   * @generated
   */
  public Adapter createRIfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RWhile <em>RWhile</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RWhile
   * @generated
   */
  public Adapter createRWhileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RExpression <em>RExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RExpression
   * @generated
   */
  public Adapter createRExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.Expr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.Expr
   * @generated
   */
  public Adapter createExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.NavigationSegment <em>Navigation Segment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.NavigationSegment
   * @generated
   */
  public Adapter createNavigationSegmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.Binding <em>Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.Binding
   * @generated
   */
  public Adapter createBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.ClassExp <em>Class Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.ClassExp
   * @generated
   */
  public Adapter createClassExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.expressionSequence <em>expression Sequence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.expressionSequence
   * @generated
   */
  public Adapter createexpressionSequenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.variableDefinition <em>variable Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.variableDefinition
   * @generated
   */
  public Adapter createvariableDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.TypeLiteral <em>Type Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.TypeLiteral
   * @generated
   */
  public Adapter createTypeLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RType <em>RType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RType
   * @generated
   */
  public Adapter createRTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.RValDecl <em>RVal Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.RValDecl
   * @generated
   */
  public Adapter createRValDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.FinalIdentSegment <em>Final Ident Segment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.FinalIdentSegment
   * @generated
   */
  public Adapter createFinalIdentSegmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.FinalIdentCallSegment <em>Final Ident Call Segment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.FinalIdentCallSegment
   * @generated
   */
  public Adapter createFinalIdentCallSegmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.FinalCallExpSegment <em>Final Call Exp Segment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.FinalCallExpSegment
   * @generated
   */
  public Adapter createFinalCallExpSegmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.NotExpression <em>Not Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.NotExpression
   * @generated
   */
  public Adapter createNotExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.NegExpression <em>Neg Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.NegExpression
   * @generated
   */
  public Adapter createNegExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.IdentifierExpresion <em>Identifier Expresion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.IdentifierExpresion
   * @generated
   */
  public Adapter createIdentifierExpresionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.LiteralExpressioin <em>Literal Expressioin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.LiteralExpressioin
   * @generated
   */
  public Adapter createLiteralExpressioinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.ParenthesisExpression <em>Parenthesis Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.ParenthesisExpression
   * @generated
   */
  public Adapter createParenthesisExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.IfExpression <em>If Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.IfExpression
   * @generated
   */
  public Adapter createIfExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.LetExpression <em>Let Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.LetExpression
   * @generated
   */
  public Adapter createLetExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.TypeLiteralString <em>Type Literal String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.TypeLiteralString
   * @generated
   */
  public Adapter createTypeLiteralStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.TypeLiteralInteger <em>Type Literal Integer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.TypeLiteralInteger
   * @generated
   */
  public Adapter createTypeLiteralIntegerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.TypeLiteralReal <em>Type Literal Real</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.TypeLiteralReal
   * @generated
   */
  public Adapter createTypeLiteralRealAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.TypeLiteralBoolean <em>Type Literal Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.TypeLiteralBoolean
   * @generated
   */
  public Adapter createTypeLiteralBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.TypeLiteralSequence <em>Type Literal Sequence</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.TypeLiteralSequence
   * @generated
   */
  public Adapter createTypeLiteralSequenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.TypeLiteralOrderedTypeSet <em>Type Literal Ordered Type Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.TypeLiteralOrderedTypeSet
   * @generated
   */
  public Adapter createTypeLiteralOrderedTypeSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.TypeLiteralClassifier <em>Type Literal Classifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.TypeLiteralClassifier
   * @generated
   */
  public Adapter createTypeLiteralClassifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.ecoretools.ale.TypeLiteralPipe <em>Type Literal Pipe</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.ecoretools.ale.TypeLiteralPipe
   * @generated
   */
  public Adapter createTypeLiteralPipeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AleAdapterFactory
