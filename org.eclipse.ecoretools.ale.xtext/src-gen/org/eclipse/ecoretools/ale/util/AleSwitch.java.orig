/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.ecoretools.ale.util;

import org.eclipse.ecoretools.ale.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.eclipse.ecoretools.ale.AlePackage
 * @generated
 */
public class AleSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AlePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AlePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AlePackage.RROOT:
      {
<<<<<<< HEAD
        RRoot rRoot = (RRoot)theEObject;
        T result = caseRRoot(rRoot);
=======
        rRoot rRoot = (rRoot)theEObject;
        T result = caserRoot(rRoot);
>>>>>>> local-ale-lang
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RCLASS:
      {
<<<<<<< HEAD
        RClass rClass = (RClass)theEObject;
        T result = caseRClass(rClass);
=======
        rClass rClass = (rClass)theEObject;
        T result = caserClass(rClass);
>>>>>>> local-ale-lang
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.ROPEN_CLASS:
      {
<<<<<<< HEAD
        ROpenClass rOpenClass = (ROpenClass)theEObject;
        T result = caseROpenClass(rOpenClass);
        if (result == null) result = caseRClass(rOpenClass);
=======
        rOpenClass rOpenClass = (rOpenClass)theEObject;
        T result = caserOpenClass(rOpenClass);
        if (result == null) result = caserClass(rOpenClass);
>>>>>>> local-ale-lang
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RNEW_CLASS:
      {
<<<<<<< HEAD
        RNewClass rNewClass = (RNewClass)theEObject;
        T result = caseRNewClass(rNewClass);
        if (result == null) result = caseRClass(rNewClass);
=======
        rNewClass rNewClass = (rNewClass)theEObject;
        T result = caserNewClass(rNewClass);
        if (result == null) result = caserClass(rNewClass);
>>>>>>> local-ale-lang
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.ROPERATION:
      {
        rOperation rOperation = (rOperation)theEObject;
        T result = caserOperation(rOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RPARAMETERS:
      {
        rParameters rParameters = (rParameters)theEObject;
        T result = caserParameters(rParameters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RVARIABLE:
      {
        rVariable rVariable = (rVariable)theEObject;
        T result = caserVariable(rVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RATTRIBUTE:
      {
        rAttribute rAttribute = (rAttribute)theEObject;
        T result = caserAttribute(rAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
<<<<<<< HEAD
      case AlePackage.RSTATEMENT:
      {
        RStatement rStatement = (RStatement)theEObject;
        T result = caseRStatement(rStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RVAR_DECL:
      {
        rVarDecl rVarDecl = (rVarDecl)theEObject;
        T result = caserVarDecl(rVarDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RASSIGN:
      {
        RAssign rAssign = (RAssign)theEObject;
        T result = caseRAssign(rAssign);
        if (result == null) result = caseRStatement(rAssign);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RFOR_EACH:
      {
        RForEach rForEach = (RForEach)theEObject;
        T result = caseRForEach(rForEach);
        if (result == null) result = caseRStatement(rForEach);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RCOLLECTION:
      {
        rCollection rCollection = (rCollection)theEObject;
        T result = caserCollection(rCollection);
        if (result == null) result = caseRForEach(rCollection);
        if (result == null) result = caseRStatement(rCollection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RBLOCK:
      {
        rBlock rBlock = (rBlock)theEObject;
        T result = caserBlock(rBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RIF:
      {
        RIf rIf = (RIf)theEObject;
        T result = caseRIf(rIf);
        if (result == null) result = caseRStatement(rIf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RWHILE:
      {
        RWhile rWhile = (RWhile)theEObject;
        T result = caseRWhile(rWhile);
        if (result == null) result = caseRStatement(rWhile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.REXPRESSION:
      {
        RExpression rExpression = (RExpression)theEObject;
        T result = caseRExpression(rExpression);
        if (result == null) result = caseRStatement(rExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.EXPR:
      {
        Expr expr = (Expr)theEObject;
        T result = caseExpr(expr);
        if (result == null) result = caserCollection(expr);
        if (result == null) result = caseRWhile(expr);
        if (result == null) result = caseRExpression(expr);
        if (result == null) result = caseRForEach(expr);
        if (result == null) result = caseRStatement(expr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.NAVIGATION_SEGMENT:
      {
        NavigationSegment navigationSegment = (NavigationSegment)theEObject;
        T result = caseNavigationSegment(navigationSegment);
        if (result == null) result = caseExpr(navigationSegment);
        if (result == null) result = caserCollection(navigationSegment);
        if (result == null) result = caseRWhile(navigationSegment);
        if (result == null) result = caseRExpression(navigationSegment);
        if (result == null) result = caseRForEach(navigationSegment);
        if (result == null) result = caseRStatement(navigationSegment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.BINDING:
      {
        Binding binding = (Binding)theEObject;
        T result = caseBinding(binding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.CLASS_EXP:
      {
        ClassExp classExp = (ClassExp)theEObject;
        T result = caseClassExp(classExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.EXPRESSION_SEQUENCE:
      {
        expressionSequence expressionSequence = (expressionSequence)theEObject;
        T result = caseexpressionSequence(expressionSequence);
        if (result == null) result = caseClassExp(expressionSequence);
        if (result == null) result = caseLiteral(expressionSequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.VARIABLE_DEFINITION:
      {
        variableDefinition variableDefinition = (variableDefinition)theEObject;
        T result = casevariableDefinition(variableDefinition);
        if (result == null) result = caseClassExp(variableDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_LITERAL:
      {
        TypeLiteral typeLiteral = (TypeLiteral)theEObject;
        T result = caseTypeLiteral(typeLiteral);
        if (result == null) result = casevariableDefinition(typeLiteral);
        if (result == null) result = caseLiteral(typeLiteral);
        if (result == null) result = caseRType(typeLiteral);
        if (result == null) result = caseClassExp(typeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RTYPE:
      {
        RType rType = (RType)theEObject;
        T result = caseRType(rType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RVAL_DECL:
      {
        RValDecl rValDecl = (RValDecl)theEObject;
        T result = caseRValDecl(rValDecl);
        if (result == null) result = caseRStatement(rValDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.FINAL_IDENT_SEGMENT:
      {
        FinalIdentSegment finalIdentSegment = (FinalIdentSegment)theEObject;
        T result = caseFinalIdentSegment(finalIdentSegment);
        if (result == null) result = caseNavigationSegment(finalIdentSegment);
        if (result == null) result = caseExpr(finalIdentSegment);
        if (result == null) result = caserCollection(finalIdentSegment);
        if (result == null) result = caseRWhile(finalIdentSegment);
        if (result == null) result = caseRExpression(finalIdentSegment);
        if (result == null) result = caseRForEach(finalIdentSegment);
        if (result == null) result = caseRStatement(finalIdentSegment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.FINAL_IDENT_CALL_SEGMENT:
      {
        FinalIdentCallSegment finalIdentCallSegment = (FinalIdentCallSegment)theEObject;
        T result = caseFinalIdentCallSegment(finalIdentCallSegment);
        if (result == null) result = caseNavigationSegment(finalIdentCallSegment);
        if (result == null) result = caseExpr(finalIdentCallSegment);
        if (result == null) result = caserCollection(finalIdentCallSegment);
        if (result == null) result = caseRWhile(finalIdentCallSegment);
        if (result == null) result = caseRExpression(finalIdentCallSegment);
        if (result == null) result = caseRForEach(finalIdentCallSegment);
        if (result == null) result = caseRStatement(finalIdentCallSegment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.FINAL_CALL_EXP_SEGMENT:
      {
        FinalCallExpSegment finalCallExpSegment = (FinalCallExpSegment)theEObject;
        T result = caseFinalCallExpSegment(finalCallExpSegment);
        if (result == null) result = caseNavigationSegment(finalCallExpSegment);
        if (result == null) result = caseExpr(finalCallExpSegment);
        if (result == null) result = caserCollection(finalCallExpSegment);
        if (result == null) result = caseRWhile(finalCallExpSegment);
        if (result == null) result = caseRExpression(finalCallExpSegment);
        if (result == null) result = caseRForEach(finalCallExpSegment);
        if (result == null) result = caseRStatement(finalCallExpSegment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.NOT_EXPRESSION:
      {
        NotExpression notExpression = (NotExpression)theEObject;
        T result = caseNotExpression(notExpression);
        if (result == null) result = caseExpr(notExpression);
        if (result == null) result = caserCollection(notExpression);
        if (result == null) result = caseRWhile(notExpression);
        if (result == null) result = caseRExpression(notExpression);
        if (result == null) result = caseRForEach(notExpression);
        if (result == null) result = caseRStatement(notExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.NEG_EXPRESSION:
      {
        NegExpression negExpression = (NegExpression)theEObject;
        T result = caseNegExpression(negExpression);
        if (result == null) result = caseExpr(negExpression);
        if (result == null) result = caserCollection(negExpression);
        if (result == null) result = caseRWhile(negExpression);
        if (result == null) result = caseRExpression(negExpression);
        if (result == null) result = caseRForEach(negExpression);
        if (result == null) result = caseRStatement(negExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.IDENTIFIER_EXPRESION:
      {
        IdentifierExpresion identifierExpresion = (IdentifierExpresion)theEObject;
        T result = caseIdentifierExpresion(identifierExpresion);
        if (result == null) result = caseExpr(identifierExpresion);
        if (result == null) result = caserCollection(identifierExpresion);
        if (result == null) result = caseRWhile(identifierExpresion);
        if (result == null) result = caseRExpression(identifierExpresion);
        if (result == null) result = caseRForEach(identifierExpresion);
        if (result == null) result = caseRStatement(identifierExpresion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.LITERAL_EXPRESSIOIN:
      {
        LiteralExpressioin literalExpressioin = (LiteralExpressioin)theEObject;
        T result = caseLiteralExpressioin(literalExpressioin);
        if (result == null) result = caseExpr(literalExpressioin);
        if (result == null) result = caserCollection(literalExpressioin);
        if (result == null) result = caseRWhile(literalExpressioin);
        if (result == null) result = caseRExpression(literalExpressioin);
        if (result == null) result = caseRForEach(literalExpressioin);
        if (result == null) result = caseRStatement(literalExpressioin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.PARENTHESIS_EXPRESSION:
      {
        ParenthesisExpression parenthesisExpression = (ParenthesisExpression)theEObject;
        T result = caseParenthesisExpression(parenthesisExpression);
        if (result == null) result = caseExpr(parenthesisExpression);
        if (result == null) result = caserCollection(parenthesisExpression);
        if (result == null) result = caseRWhile(parenthesisExpression);
        if (result == null) result = caseRExpression(parenthesisExpression);
        if (result == null) result = caseRForEach(parenthesisExpression);
        if (result == null) result = caseRStatement(parenthesisExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.IF_EXPRESSION:
      {
        IfExpression ifExpression = (IfExpression)theEObject;
        T result = caseIfExpression(ifExpression);
        if (result == null) result = caseExpr(ifExpression);
        if (result == null) result = caserCollection(ifExpression);
        if (result == null) result = caseRWhile(ifExpression);
        if (result == null) result = caseRExpression(ifExpression);
        if (result == null) result = caseRForEach(ifExpression);
        if (result == null) result = caseRStatement(ifExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.LET_EXPRESSION:
      {
        LetExpression letExpression = (LetExpression)theEObject;
        T result = caseLetExpression(letExpression);
        if (result == null) result = caseExpr(letExpression);
        if (result == null) result = caserCollection(letExpression);
        if (result == null) result = caseRWhile(letExpression);
        if (result == null) result = caseRExpression(letExpression);
        if (result == null) result = caseRForEach(letExpression);
        if (result == null) result = caseRStatement(letExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_LITERAL_STRING:
      {
        TypeLiteralString typeLiteralString = (TypeLiteralString)theEObject;
        T result = caseTypeLiteralString(typeLiteralString);
        if (result == null) result = caseTypeLiteral(typeLiteralString);
        if (result == null) result = casevariableDefinition(typeLiteralString);
        if (result == null) result = caseLiteral(typeLiteralString);
        if (result == null) result = caseRType(typeLiteralString);
        if (result == null) result = caseClassExp(typeLiteralString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_LITERAL_INTEGER:
      {
        TypeLiteralInteger typeLiteralInteger = (TypeLiteralInteger)theEObject;
        T result = caseTypeLiteralInteger(typeLiteralInteger);
        if (result == null) result = caseTypeLiteral(typeLiteralInteger);
        if (result == null) result = casevariableDefinition(typeLiteralInteger);
        if (result == null) result = caseLiteral(typeLiteralInteger);
        if (result == null) result = caseRType(typeLiteralInteger);
        if (result == null) result = caseClassExp(typeLiteralInteger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_LITERAL_REAL:
      {
        TypeLiteralReal typeLiteralReal = (TypeLiteralReal)theEObject;
        T result = caseTypeLiteralReal(typeLiteralReal);
        if (result == null) result = caseTypeLiteral(typeLiteralReal);
        if (result == null) result = casevariableDefinition(typeLiteralReal);
        if (result == null) result = caseLiteral(typeLiteralReal);
        if (result == null) result = caseRType(typeLiteralReal);
        if (result == null) result = caseClassExp(typeLiteralReal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_LITERAL_BOOLEAN:
      {
        TypeLiteralBoolean typeLiteralBoolean = (TypeLiteralBoolean)theEObject;
        T result = caseTypeLiteralBoolean(typeLiteralBoolean);
        if (result == null) result = caseTypeLiteral(typeLiteralBoolean);
        if (result == null) result = casevariableDefinition(typeLiteralBoolean);
        if (result == null) result = caseLiteral(typeLiteralBoolean);
        if (result == null) result = caseRType(typeLiteralBoolean);
        if (result == null) result = caseClassExp(typeLiteralBoolean);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_LITERAL_SEQUENCE:
      {
        TypeLiteralSequence typeLiteralSequence = (TypeLiteralSequence)theEObject;
        T result = caseTypeLiteralSequence(typeLiteralSequence);
        if (result == null) result = caseTypeLiteral(typeLiteralSequence);
        if (result == null) result = casevariableDefinition(typeLiteralSequence);
        if (result == null) result = caseLiteral(typeLiteralSequence);
        if (result == null) result = caseRType(typeLiteralSequence);
        if (result == null) result = caseClassExp(typeLiteralSequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_LITERAL_ORDERED_TYPE_SET:
      {
        TypeLiteralOrderedTypeSet typeLiteralOrderedTypeSet = (TypeLiteralOrderedTypeSet)theEObject;
        T result = caseTypeLiteralOrderedTypeSet(typeLiteralOrderedTypeSet);
        if (result == null) result = caseTypeLiteral(typeLiteralOrderedTypeSet);
        if (result == null) result = casevariableDefinition(typeLiteralOrderedTypeSet);
        if (result == null) result = caseLiteral(typeLiteralOrderedTypeSet);
        if (result == null) result = caseRType(typeLiteralOrderedTypeSet);
        if (result == null) result = caseClassExp(typeLiteralOrderedTypeSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_LITERAL_CLASSIFIER:
      {
        TypeLiteralClassifier typeLiteralClassifier = (TypeLiteralClassifier)theEObject;
        T result = caseTypeLiteralClassifier(typeLiteralClassifier);
        if (result == null) result = caseTypeLiteral(typeLiteralClassifier);
        if (result == null) result = casevariableDefinition(typeLiteralClassifier);
        if (result == null) result = caseLiteral(typeLiteralClassifier);
        if (result == null) result = caseRType(typeLiteralClassifier);
        if (result == null) result = caseClassExp(typeLiteralClassifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_LITERAL_PIPE:
      {
        TypeLiteralPipe typeLiteralPipe = (TypeLiteralPipe)theEObject;
        T result = caseTypeLiteralPipe(typeLiteralPipe);
        if (result == null) result = caseTypeLiteral(typeLiteralPipe);
        if (result == null) result = casevariableDefinition(typeLiteralPipe);
        if (result == null) result = caseLiteral(typeLiteralPipe);
        if (result == null) result = caseRType(typeLiteralPipe);
        if (result == null) result = caseClassExp(typeLiteralPipe);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
=======
>>>>>>> local-ale-lang
      default: return defaultCase(theEObject);
    }
  }

  /**
<<<<<<< HEAD
   * Returns the result of interpreting the object as an instance of '<em>RRoot</em>'.
=======
   * Returns the result of interpreting the object as an instance of '<em>rRoot</em>'.
>>>>>>> local-ale-lang
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
<<<<<<< HEAD
   * @return the result of interpreting the object as an instance of '<em>RRoot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRRoot(RRoot object)
=======
   * @return the result of interpreting the object as an instance of '<em>rRoot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserRoot(rRoot object)
>>>>>>> local-ale-lang
  {
    return null;
  }

  /**
<<<<<<< HEAD
   * Returns the result of interpreting the object as an instance of '<em>RClass</em>'.
=======
   * Returns the result of interpreting the object as an instance of '<em>rClass</em>'.
>>>>>>> local-ale-lang
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
<<<<<<< HEAD
   * @return the result of interpreting the object as an instance of '<em>RClass</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRClass(RClass object)
=======
   * @return the result of interpreting the object as an instance of '<em>rClass</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserClass(rClass object)
>>>>>>> local-ale-lang
  {
    return null;
  }

  /**
<<<<<<< HEAD
   * Returns the result of interpreting the object as an instance of '<em>ROpen Class</em>'.
=======
   * Returns the result of interpreting the object as an instance of '<em>rOpen Class</em>'.
>>>>>>> local-ale-lang
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
<<<<<<< HEAD
   * @return the result of interpreting the object as an instance of '<em>ROpen Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseROpenClass(ROpenClass object)
=======
   * @return the result of interpreting the object as an instance of '<em>rOpen Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserOpenClass(rOpenClass object)
>>>>>>> local-ale-lang
  {
    return null;
  }

  /**
<<<<<<< HEAD
   * Returns the result of interpreting the object as an instance of '<em>RNew Class</em>'.
=======
   * Returns the result of interpreting the object as an instance of '<em>rNew Class</em>'.
>>>>>>> local-ale-lang
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
<<<<<<< HEAD
   * @return the result of interpreting the object as an instance of '<em>RNew Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRNewClass(RNewClass object)
=======
   * @return the result of interpreting the object as an instance of '<em>rNew Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserNewClass(rNewClass object)
>>>>>>> local-ale-lang
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>rOperation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>rOperation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserOperation(rOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>rParameters</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>rParameters</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserParameters(rParameters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>rVariable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>rVariable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserVariable(rVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>rAttribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>rAttribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserAttribute(rAttribute object)
  {
    return null;
  }

  /**
<<<<<<< HEAD
   * Returns the result of interpreting the object as an instance of '<em>RStatement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RStatement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRStatement(RStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>rVar Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>rVar Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserVarDecl(rVarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RAssign</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RAssign</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRAssign(RAssign object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RFor Each</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RFor Each</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRForEach(RForEach object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>rCollection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>rCollection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserCollection(rCollection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>rBlock</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>rBlock</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserBlock(rBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RIf</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RIf</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRIf(RIf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RWhile</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RWhile</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRWhile(RWhile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RExpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RExpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRExpression(RExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpr(Expr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigation Segment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigation Segment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigationSegment(NavigationSegment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinding(Binding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassExp(ClassExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpressionSequence(expressionSequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariableDefinition(variableDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteral(TypeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RType</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RType</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRType(RType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RVal Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RVal Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRValDecl(RValDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Final Ident Segment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Final Ident Segment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFinalIdentSegment(FinalIdentSegment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Final Ident Call Segment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Final Ident Call Segment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFinalIdentCallSegment(FinalIdentCallSegment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Final Call Exp Segment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Final Call Exp Segment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFinalCallExpSegment(FinalCallExpSegment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotExpression(NotExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Neg Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Neg Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegExpression(NegExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Identifier Expresion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Identifier Expresion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdentifierExpresion(IdentifierExpresion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Expressioin</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Expressioin</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralExpressioin(LiteralExpressioin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parenthesis Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parenthesis Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParenthesisExpression(ParenthesisExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExpression(IfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetExpression(LetExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralString(TypeLiteralString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralInteger(TypeLiteralInteger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Real</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Real</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralReal(TypeLiteralReal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Boolean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Boolean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralBoolean(TypeLiteralBoolean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Sequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Sequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralSequence(TypeLiteralSequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Ordered Type Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Ordered Type Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralOrderedTypeSet(TypeLiteralOrderedTypeSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Classifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Classifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralClassifier(TypeLiteralClassifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Literal Pipe</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Literal Pipe</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLiteralPipe(TypeLiteralPipe object)
  {
    return null;
  }

  /**
=======
>>>>>>> local-ale-lang
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AleSwitch
