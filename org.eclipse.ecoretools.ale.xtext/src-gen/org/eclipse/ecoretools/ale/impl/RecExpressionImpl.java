/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.ecoretools.ale.impl;

import org.eclipse.ecoretools.ale.AlePackage;
import org.eclipse.ecoretools.ale.RecExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rec Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.ecoretools.ale.impl.RecExpressionImpl#getRecExp <em>Rec Exp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RecExpressionImpl extends MinimalEObjectImpl.Container implements RecExpression
{
  /**
   * The cached value of the '{@link #getRecExp() <em>Rec Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecExp()
   * @generated
   * @ordered
   */
  protected RecExpression recExp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RecExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AlePackage.Literals.REC_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RecExpression getRecExp()
  {
    return recExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecExp(RecExpression newRecExp, NotificationChain msgs)
  {
    RecExpression oldRecExp = recExp;
    recExp = newRecExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlePackage.REC_EXPRESSION__REC_EXP, oldRecExp, newRecExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecExp(RecExpression newRecExp)
  {
    if (newRecExp != recExp)
    {
      NotificationChain msgs = null;
      if (recExp != null)
        msgs = ((InternalEObject)recExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlePackage.REC_EXPRESSION__REC_EXP, null, msgs);
      if (newRecExp != null)
        msgs = ((InternalEObject)newRecExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlePackage.REC_EXPRESSION__REC_EXP, null, msgs);
      msgs = basicSetRecExp(newRecExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.REC_EXPRESSION__REC_EXP, newRecExp, newRecExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AlePackage.REC_EXPRESSION__REC_EXP:
        return basicSetRecExp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AlePackage.REC_EXPRESSION__REC_EXP:
        return getRecExp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AlePackage.REC_EXPRESSION__REC_EXP:
        setRecExp((RecExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AlePackage.REC_EXPRESSION__REC_EXP:
        setRecExp((RecExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AlePackage.REC_EXPRESSION__REC_EXP:
        return recExp != null;
    }
    return super.eIsSet(featureID);
  }

} //RecExpressionImpl
