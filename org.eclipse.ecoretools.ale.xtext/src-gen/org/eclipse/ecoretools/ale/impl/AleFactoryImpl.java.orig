/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.ecoretools.ale.impl;

import org.eclipse.ecoretools.ale.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AleFactoryImpl extends EFactoryImpl implements AleFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AleFactory init()
  {
    try
    {
      AleFactory theAleFactory = (AleFactory)EPackage.Registry.INSTANCE.getEFactory(AlePackage.eNS_URI);
      if (theAleFactory != null)
      {
        return theAleFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AleFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
<<<<<<< HEAD
      case AlePackage.RROOT: return createRRoot();
      case AlePackage.RCLASS: return createRClass();
      case AlePackage.ROPEN_CLASS: return createROpenClass();
      case AlePackage.RNEW_CLASS: return createRNewClass();
=======
      case AlePackage.RROOT: return createrRoot();
      case AlePackage.RCLASS: return createrClass();
      case AlePackage.ROPEN_CLASS: return createrOpenClass();
      case AlePackage.RNEW_CLASS: return createrNewClass();
>>>>>>> local-ale-lang
      case AlePackage.ROPERATION: return createrOperation();
      case AlePackage.RPARAMETERS: return createrParameters();
      case AlePackage.RVARIABLE: return createrVariable();
      case AlePackage.RATTRIBUTE: return createrAttribute();
<<<<<<< HEAD
      case AlePackage.RSTATEMENT: return createRStatement();
      case AlePackage.RVAR_DECL: return createrVarDecl();
      case AlePackage.RASSIGN: return createRAssign();
      case AlePackage.RFOR_EACH: return createRForEach();
      case AlePackage.RCOLLECTION: return createrCollection();
      case AlePackage.RBLOCK: return createrBlock();
      case AlePackage.RIF: return createRIf();
      case AlePackage.RWHILE: return createRWhile();
      case AlePackage.REXPRESSION: return createRExpression();
      case AlePackage.EXPR: return createExpr();
      case AlePackage.NAVIGATION_SEGMENT: return createNavigationSegment();
      case AlePackage.BINDING: return createBinding();
      case AlePackage.CLASS_EXP: return createClassExp();
      case AlePackage.EXPRESSION_SEQUENCE: return createexpressionSequence();
      case AlePackage.VARIABLE_DEFINITION: return createvariableDefinition();
      case AlePackage.LITERAL: return createLiteral();
      case AlePackage.TYPE_LITERAL: return createTypeLiteral();
      case AlePackage.RTYPE: return createRType();
      case AlePackage.RVAL_DECL: return createRValDecl();
      case AlePackage.FINAL_IDENT_SEGMENT: return createFinalIdentSegment();
      case AlePackage.FINAL_IDENT_CALL_SEGMENT: return createFinalIdentCallSegment();
      case AlePackage.FINAL_CALL_EXP_SEGMENT: return createFinalCallExpSegment();
      case AlePackage.NOT_EXPRESSION: return createNotExpression();
      case AlePackage.NEG_EXPRESSION: return createNegExpression();
      case AlePackage.IDENTIFIER_EXPRESION: return createIdentifierExpresion();
      case AlePackage.LITERAL_EXPRESSIOIN: return createLiteralExpressioin();
      case AlePackage.PARENTHESIS_EXPRESSION: return createParenthesisExpression();
      case AlePackage.IF_EXPRESSION: return createIfExpression();
      case AlePackage.LET_EXPRESSION: return createLetExpression();
      case AlePackage.TYPE_LITERAL_STRING: return createTypeLiteralString();
      case AlePackage.TYPE_LITERAL_INTEGER: return createTypeLiteralInteger();
      case AlePackage.TYPE_LITERAL_REAL: return createTypeLiteralReal();
      case AlePackage.TYPE_LITERAL_BOOLEAN: return createTypeLiteralBoolean();
      case AlePackage.TYPE_LITERAL_SEQUENCE: return createTypeLiteralSequence();
      case AlePackage.TYPE_LITERAL_ORDERED_TYPE_SET: return createTypeLiteralOrderedTypeSet();
      case AlePackage.TYPE_LITERAL_CLASSIFIER: return createTypeLiteralClassifier();
      case AlePackage.TYPE_LITERAL_PIPE: return createTypeLiteralPipe();
=======
>>>>>>> local-ale-lang
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
<<<<<<< HEAD
  public RRoot createRRoot()
  {
    RRootImpl rRoot = new RRootImpl();
=======
  public rRoot createrRoot()
  {
    rRootImpl rRoot = new rRootImpl();
>>>>>>> local-ale-lang
    return rRoot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
<<<<<<< HEAD
  public RClass createRClass()
  {
    RClassImpl rClass = new RClassImpl();
=======
  public rClass createrClass()
  {
    rClassImpl rClass = new rClassImpl();
>>>>>>> local-ale-lang
    return rClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
<<<<<<< HEAD
  public ROpenClass createROpenClass()
  {
    ROpenClassImpl rOpenClass = new ROpenClassImpl();
=======
  public rOpenClass createrOpenClass()
  {
    rOpenClassImpl rOpenClass = new rOpenClassImpl();
>>>>>>> local-ale-lang
    return rOpenClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
<<<<<<< HEAD
  public RNewClass createRNewClass()
  {
    RNewClassImpl rNewClass = new RNewClassImpl();
=======
  public rNewClass createrNewClass()
  {
    rNewClassImpl rNewClass = new rNewClassImpl();
>>>>>>> local-ale-lang
    return rNewClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rOperation createrOperation()
  {
    rOperationImpl rOperation = new rOperationImpl();
    return rOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rParameters createrParameters()
  {
    rParametersImpl rParameters = new rParametersImpl();
    return rParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rVariable createrVariable()
  {
    rVariableImpl rVariable = new rVariableImpl();
    return rVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rAttribute createrAttribute()
  {
    rAttributeImpl rAttribute = new rAttributeImpl();
    return rAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
<<<<<<< HEAD
  public RStatement createRStatement()
  {
    RStatementImpl rStatement = new RStatementImpl();
    return rStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rVarDecl createrVarDecl()
  {
    rVarDeclImpl rVarDecl = new rVarDeclImpl();
    return rVarDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RAssign createRAssign()
  {
    RAssignImpl rAssign = new RAssignImpl();
    return rAssign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RForEach createRForEach()
  {
    RForEachImpl rForEach = new RForEachImpl();
    return rForEach;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rCollection createrCollection()
  {
    rCollectionImpl rCollection = new rCollectionImpl();
    return rCollection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rBlock createrBlock()
  {
    rBlockImpl rBlock = new rBlockImpl();
    return rBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RIf createRIf()
  {
    RIfImpl rIf = new RIfImpl();
    return rIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RWhile createRWhile()
  {
    RWhileImpl rWhile = new RWhileImpl();
    return rWhile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RExpression createRExpression()
  {
    RExpressionImpl rExpression = new RExpressionImpl();
    return rExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr createExpr()
  {
    ExprImpl expr = new ExprImpl();
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavigationSegment createNavigationSegment()
  {
    NavigationSegmentImpl navigationSegment = new NavigationSegmentImpl();
    return navigationSegment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Binding createBinding()
  {
    BindingImpl binding = new BindingImpl();
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassExp createClassExp()
  {
    ClassExpImpl classExp = new ClassExpImpl();
    return classExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expressionSequence createexpressionSequence()
  {
    expressionSequenceImpl expressionSequence = new expressionSequenceImpl();
    return expressionSequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public variableDefinition createvariableDefinition()
  {
    variableDefinitionImpl variableDefinition = new variableDefinitionImpl();
    return variableDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteral createTypeLiteral()
  {
    TypeLiteralImpl typeLiteral = new TypeLiteralImpl();
    return typeLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RType createRType()
  {
    RTypeImpl rType = new RTypeImpl();
    return rType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RValDecl createRValDecl()
  {
    RValDeclImpl rValDecl = new RValDeclImpl();
    return rValDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FinalIdentSegment createFinalIdentSegment()
  {
    FinalIdentSegmentImpl finalIdentSegment = new FinalIdentSegmentImpl();
    return finalIdentSegment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FinalIdentCallSegment createFinalIdentCallSegment()
  {
    FinalIdentCallSegmentImpl finalIdentCallSegment = new FinalIdentCallSegmentImpl();
    return finalIdentCallSegment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FinalCallExpSegment createFinalCallExpSegment()
  {
    FinalCallExpSegmentImpl finalCallExpSegment = new FinalCallExpSegmentImpl();
    return finalCallExpSegment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotExpression createNotExpression()
  {
    NotExpressionImpl notExpression = new NotExpressionImpl();
    return notExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NegExpression createNegExpression()
  {
    NegExpressionImpl negExpression = new NegExpressionImpl();
    return negExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdentifierExpresion createIdentifierExpresion()
  {
    IdentifierExpresionImpl identifierExpresion = new IdentifierExpresionImpl();
    return identifierExpresion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LiteralExpressioin createLiteralExpressioin()
  {
    LiteralExpressioinImpl literalExpressioin = new LiteralExpressioinImpl();
    return literalExpressioin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParenthesisExpression createParenthesisExpression()
  {
    ParenthesisExpressionImpl parenthesisExpression = new ParenthesisExpressionImpl();
    return parenthesisExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfExpression createIfExpression()
  {
    IfExpressionImpl ifExpression = new IfExpressionImpl();
    return ifExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LetExpression createLetExpression()
  {
    LetExpressionImpl letExpression = new LetExpressionImpl();
    return letExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralString createTypeLiteralString()
  {
    TypeLiteralStringImpl typeLiteralString = new TypeLiteralStringImpl();
    return typeLiteralString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralInteger createTypeLiteralInteger()
  {
    TypeLiteralIntegerImpl typeLiteralInteger = new TypeLiteralIntegerImpl();
    return typeLiteralInteger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralReal createTypeLiteralReal()
  {
    TypeLiteralRealImpl typeLiteralReal = new TypeLiteralRealImpl();
    return typeLiteralReal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralBoolean createTypeLiteralBoolean()
  {
    TypeLiteralBooleanImpl typeLiteralBoolean = new TypeLiteralBooleanImpl();
    return typeLiteralBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralSequence createTypeLiteralSequence()
  {
    TypeLiteralSequenceImpl typeLiteralSequence = new TypeLiteralSequenceImpl();
    return typeLiteralSequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralOrderedTypeSet createTypeLiteralOrderedTypeSet()
  {
    TypeLiteralOrderedTypeSetImpl typeLiteralOrderedTypeSet = new TypeLiteralOrderedTypeSetImpl();
    return typeLiteralOrderedTypeSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralClassifier createTypeLiteralClassifier()
  {
    TypeLiteralClassifierImpl typeLiteralClassifier = new TypeLiteralClassifierImpl();
    return typeLiteralClassifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeLiteralPipe createTypeLiteralPipe()
  {
    TypeLiteralPipeImpl typeLiteralPipe = new TypeLiteralPipeImpl();
    return typeLiteralPipe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
=======
>>>>>>> local-ale-lang
  public AlePackage getAlePackage()
  {
    return (AlePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AlePackage getPackage()
  {
    return AlePackage.eINSTANCE;
  }

} //AleFactoryImpl
