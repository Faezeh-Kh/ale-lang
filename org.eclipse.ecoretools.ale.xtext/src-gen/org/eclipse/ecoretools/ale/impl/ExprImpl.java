/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.ecoretools.ale.impl;

import org.eclipse.ecoretools.ale.AlePackage;
import org.eclipse.ecoretools.ale.Expr;
import org.eclipse.ecoretools.ale.RExpression;
import org.eclipse.ecoretools.ale.RWhile;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.ecoretools.ale.impl.ExprImpl#getWhile <em>While</em>}</li>
 *   <li>{@link org.eclipse.ecoretools.ale.impl.ExprImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link org.eclipse.ecoretools.ale.impl.ExprImpl#getLeftPart <em>Left Part</em>}</li>
 *   <li>{@link org.eclipse.ecoretools.ale.impl.ExprImpl#getRecpart <em>Recpart</em>}</li>
 *   <li>{@link org.eclipse.ecoretools.ale.impl.ExprImpl#getRecExp <em>Rec Exp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprImpl extends rCollectionImpl implements Expr
{
  /**
   * The cached value of the '{@link #getWhile() <em>While</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhile()
   * @generated
   * @ordered
   */
  protected RWhile while_;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected RExpression expr;

  /**
   * The cached value of the '{@link #getLeftPart() <em>Left Part</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftPart()
   * @generated
   * @ordered
   */
  protected Expr leftPart;

  /**
   * The cached value of the '{@link #getRecpart() <em>Recpart</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecpart()
   * @generated
   * @ordered
   */
  protected Expr recpart;

  /**
   * The cached value of the '{@link #getRecExp() <em>Rec Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecExp()
   * @generated
   * @ordered
   */
  protected Expr recExp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AlePackage.Literals.EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RWhile getWhile()
  {
    return while_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhile(RWhile newWhile, NotificationChain msgs)
  {
    RWhile oldWhile = while_;
    while_ = newWhile;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__WHILE, oldWhile, newWhile);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWhile(RWhile newWhile)
  {
    if (newWhile != while_)
    {
      NotificationChain msgs = null;
      if (while_ != null)
        msgs = ((InternalEObject)while_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__WHILE, null, msgs);
      if (newWhile != null)
        msgs = ((InternalEObject)newWhile).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__WHILE, null, msgs);
      msgs = basicSetWhile(newWhile, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__WHILE, newWhile, newWhile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RExpression getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(RExpression newExpr, NotificationChain msgs)
  {
    RExpression oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr(RExpression newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getLeftPart()
  {
    return leftPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftPart(Expr newLeftPart, NotificationChain msgs)
  {
    Expr oldLeftPart = leftPart;
    leftPart = newLeftPart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__LEFT_PART, oldLeftPart, newLeftPart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeftPart(Expr newLeftPart)
  {
    if (newLeftPart != leftPart)
    {
      NotificationChain msgs = null;
      if (leftPart != null)
        msgs = ((InternalEObject)leftPart).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__LEFT_PART, null, msgs);
      if (newLeftPart != null)
        msgs = ((InternalEObject)newLeftPart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__LEFT_PART, null, msgs);
      msgs = basicSetLeftPart(newLeftPart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__LEFT_PART, newLeftPart, newLeftPart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getRecpart()
  {
    return recpart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecpart(Expr newRecpart, NotificationChain msgs)
  {
    Expr oldRecpart = recpart;
    recpart = newRecpart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__RECPART, oldRecpart, newRecpart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecpart(Expr newRecpart)
  {
    if (newRecpart != recpart)
    {
      NotificationChain msgs = null;
      if (recpart != null)
        msgs = ((InternalEObject)recpart).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__RECPART, null, msgs);
      if (newRecpart != null)
        msgs = ((InternalEObject)newRecpart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__RECPART, null, msgs);
      msgs = basicSetRecpart(newRecpart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__RECPART, newRecpart, newRecpart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getRecExp()
  {
    return recExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecExp(Expr newRecExp, NotificationChain msgs)
  {
    Expr oldRecExp = recExp;
    recExp = newRecExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__REC_EXP, oldRecExp, newRecExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecExp(Expr newRecExp)
  {
    if (newRecExp != recExp)
    {
      NotificationChain msgs = null;
      if (recExp != null)
        msgs = ((InternalEObject)recExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__REC_EXP, null, msgs);
      if (newRecExp != null)
        msgs = ((InternalEObject)newRecExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlePackage.EXPR__REC_EXP, null, msgs);
      msgs = basicSetRecExp(newRecExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.EXPR__REC_EXP, newRecExp, newRecExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AlePackage.EXPR__WHILE:
        return basicSetWhile(null, msgs);
      case AlePackage.EXPR__EXPR:
        return basicSetExpr(null, msgs);
      case AlePackage.EXPR__LEFT_PART:
        return basicSetLeftPart(null, msgs);
      case AlePackage.EXPR__RECPART:
        return basicSetRecpart(null, msgs);
      case AlePackage.EXPR__REC_EXP:
        return basicSetRecExp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AlePackage.EXPR__WHILE:
        return getWhile();
      case AlePackage.EXPR__EXPR:
        return getExpr();
      case AlePackage.EXPR__LEFT_PART:
        return getLeftPart();
      case AlePackage.EXPR__RECPART:
        return getRecpart();
      case AlePackage.EXPR__REC_EXP:
        return getRecExp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AlePackage.EXPR__WHILE:
        setWhile((RWhile)newValue);
        return;
      case AlePackage.EXPR__EXPR:
        setExpr((RExpression)newValue);
        return;
      case AlePackage.EXPR__LEFT_PART:
        setLeftPart((Expr)newValue);
        return;
      case AlePackage.EXPR__RECPART:
        setRecpart((Expr)newValue);
        return;
      case AlePackage.EXPR__REC_EXP:
        setRecExp((Expr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AlePackage.EXPR__WHILE:
        setWhile((RWhile)null);
        return;
      case AlePackage.EXPR__EXPR:
        setExpr((RExpression)null);
        return;
      case AlePackage.EXPR__LEFT_PART:
        setLeftPart((Expr)null);
        return;
      case AlePackage.EXPR__RECPART:
        setRecpart((Expr)null);
        return;
      case AlePackage.EXPR__REC_EXP:
        setRecExp((Expr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AlePackage.EXPR__WHILE:
        return while_ != null;
      case AlePackage.EXPR__EXPR:
        return expr != null;
      case AlePackage.EXPR__LEFT_PART:
        return leftPart != null;
      case AlePackage.EXPR__RECPART:
        return recpart != null;
      case AlePackage.EXPR__REC_EXP:
        return recExp != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == RWhile.class)
    {
      switch (derivedFeatureID)
      {
        case AlePackage.EXPR__WHILE: return AlePackage.RWHILE__WHILE;
        default: return -1;
      }
    }
    if (baseClass == RExpression.class)
    {
      switch (derivedFeatureID)
      {
        case AlePackage.EXPR__EXPR: return AlePackage.REXPRESSION__EXPR;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == RWhile.class)
    {
      switch (baseFeatureID)
      {
        case AlePackage.RWHILE__WHILE: return AlePackage.EXPR__WHILE;
        default: return -1;
      }
    }
    if (baseClass == RExpression.class)
    {
      switch (baseFeatureID)
      {
        case AlePackage.REXPRESSION__EXPR: return AlePackage.EXPR__EXPR;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //ExprImpl
