/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.ecoretools.ale.impl;

import org.eclipse.ecoretools.ale.AleFactory;
import org.eclipse.ecoretools.ale.AlePackage;
import org.eclipse.ecoretools.ale.Binding;
import org.eclipse.ecoretools.ale.ClassExp;
import org.eclipse.ecoretools.ale.Expr;
import org.eclipse.ecoretools.ale.FinalCallExpSegment;
import org.eclipse.ecoretools.ale.FinalIdentCallSegment;
import org.eclipse.ecoretools.ale.FinalIdentSegment;
import org.eclipse.ecoretools.ale.IdentifierExpresion;
import org.eclipse.ecoretools.ale.IfExpression;
import org.eclipse.ecoretools.ale.LetExpression;
import org.eclipse.ecoretools.ale.Literal;
import org.eclipse.ecoretools.ale.LiteralExpressioin;
import org.eclipse.ecoretools.ale.NavigationSegment;
import org.eclipse.ecoretools.ale.NegExpression;
import org.eclipse.ecoretools.ale.NotExpression;
import org.eclipse.ecoretools.ale.ParenthesisExpression;
import org.eclipse.ecoretools.ale.RAssign;
import org.eclipse.ecoretools.ale.RClass;
import org.eclipse.ecoretools.ale.RExpression;
import org.eclipse.ecoretools.ale.RForEach;
import org.eclipse.ecoretools.ale.RIf;
import org.eclipse.ecoretools.ale.RNewClass;
import org.eclipse.ecoretools.ale.ROpenClass;
import org.eclipse.ecoretools.ale.RRoot;
import org.eclipse.ecoretools.ale.RStatement;
import org.eclipse.ecoretools.ale.RType;
import org.eclipse.ecoretools.ale.RValDecl;
import org.eclipse.ecoretools.ale.RWhile;
import org.eclipse.ecoretools.ale.TypeLiteral;
import org.eclipse.ecoretools.ale.TypeLiteralBoolean;
import org.eclipse.ecoretools.ale.TypeLiteralClassifier;
import org.eclipse.ecoretools.ale.TypeLiteralInteger;
import org.eclipse.ecoretools.ale.TypeLiteralOrderedTypeSet;
import org.eclipse.ecoretools.ale.TypeLiteralPipe;
import org.eclipse.ecoretools.ale.TypeLiteralReal;
import org.eclipse.ecoretools.ale.TypeLiteralSequence;
import org.eclipse.ecoretools.ale.TypeLiteralString;
import org.eclipse.ecoretools.ale.expressionSequence;
import org.eclipse.ecoretools.ale.rAttribute;
import org.eclipse.ecoretools.ale.rBlock;
import org.eclipse.ecoretools.ale.rCollection;
import org.eclipse.ecoretools.ale.rOperation;
import org.eclipse.ecoretools.ale.rParameters;
import org.eclipse.ecoretools.ale.rVarDecl;
import org.eclipse.ecoretools.ale.rVariable;
import org.eclipse.ecoretools.ale.variableDefinition;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AlePackageImpl extends EPackageImpl implements AlePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rRootEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rClassEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rOpenClassEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rNewClassEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rParametersEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rVarDeclEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rAssignEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rForEachEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rCollectionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rBlockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rIfEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rWhileEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass exprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navigationSegmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bindingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass classExpEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionSequenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableDefinitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass literalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rValDeclEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass finalIdentSegmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass finalIdentCallSegmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass finalCallExpSegmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass negExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass identifierExpresionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass literalExpressioinEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parenthesisExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ifExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass letExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralStringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralIntegerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralRealEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralBooleanEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralSequenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralOrderedTypeSetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralClassifierEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeLiteralPipeEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.eclipse.ecoretools.ale.AlePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private AlePackageImpl()
  {
    super(eNS_URI, AleFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link AlePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static AlePackage init()
  {
    if (isInited) return (AlePackage)EPackage.Registry.INSTANCE.getEPackage(AlePackage.eNS_URI);

    // Obtain or create and register package
    AlePackageImpl theAlePackage = (AlePackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof AlePackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new AlePackageImpl());

    isInited = true;

    // Create package meta-data objects
    theAlePackage.createPackageContents();

    // Initialize created meta-data
    theAlePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theAlePackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(AlePackage.eNS_URI, theAlePackage);
    return theAlePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRRoot()
  {
    return rRootEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRRoot_XtendedClasses()
  {
    return (EReference)rRootEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRClass()
  {
    return rClassEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getRClass_Name()
  {
    return (EAttribute)rClassEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRClass_Attributes()
  {
    return (EReference)rClassEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRClass_Operations()
  {
    return (EReference)rClassEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getROpenClass()
  {
    return rOpenClassEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getROpenClass_OpenClass()
  {
    return (EReference)rOpenClassEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRNewClass()
  {
    return rNewClassEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRNewClass_NewClass()
  {
    return (EReference)rNewClassEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getrOperation()
  {
    return rOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrOperation_Type()
  {
    return (EReference)rOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getrOperation_Name()
  {
    return (EAttribute)rOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrOperation_ParamList()
  {
    return (EReference)rOperationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrOperation_Body()
  {
    return (EReference)rOperationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getrParameters()
  {
    return rParametersEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrParameters_Params()
  {
    return (EReference)rParametersEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getrVariable()
  {
    return rVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrVariable_Type()
  {
    return (EReference)rVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getrVariable_Name()
  {
    return (EAttribute)rVariableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getrAttribute()
  {
    return rAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrAttribute_Type()
  {
    return (EReference)rAttributeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getrAttribute_Name()
  {
    return (EAttribute)rAttributeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrAttribute_Expr()
  {
    return (EReference)rAttributeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRStatement()
  {
    return rStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getrVarDecl()
  {
    return rVarDeclEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrVarDecl_Type()
  {
    return (EReference)rVarDeclEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getrVarDecl_Ident()
  {
    return (EAttribute)rVarDeclEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrVarDecl_Expression()
  {
    return (EReference)rVarDeclEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRAssign()
  {
    return rAssignEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRAssign_Stmt()
  {
    return (EReference)rAssignEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRAssign_Left()
  {
    return (EReference)rAssignEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRAssign_Right()
  {
    return (EReference)rAssignEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRForEach()
  {
    return rForEachEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRForEach_ForEach()
  {
    return (EReference)rForEachEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getrCollection()
  {
    return rCollectionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrCollection_Block()
  {
    return (EReference)rCollectionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getrBlock()
  {
    return rBlockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getrBlock_Statement()
  {
    return (EReference)rBlockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRIf()
  {
    return rIfEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRIf_If()
  {
    return (EReference)rIfEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRIf_Condition()
  {
    return (EReference)rIfEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRIf_IfBlock()
  {
    return (EReference)rIfEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRIf_ElseBlock()
  {
    return (EReference)rIfEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRWhile()
  {
    return rWhileEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRWhile_While()
  {
    return (EReference)rWhileEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRExpression()
  {
    return rExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRExpression_Expr()
  {
    return (EReference)rExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getExpr()
  {
    return exprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpr_LeftPart()
  {
    return (EReference)exprEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpr_Recpart()
  {
    return (EReference)exprEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getExpr_RecExp()
  {
    return (EReference)exprEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNavigationSegment()
  {
    return navigationSegmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBinding()
  {
    return bindingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBinding_Identifier()
  {
    return (EAttribute)bindingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBinding_Type()
  {
    return (EReference)bindingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBinding_Expression()
  {
    return (EReference)bindingEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getClassExp()
  {
    return classExpEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getexpressionSequence()
  {
    return expressionSequenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getexpressionSequence_SeqExprs()
  {
    return (EReference)expressionSequenceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getvariableDefinition()
  {
    return variableDefinitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getvariableDefinition_Expression()
  {
    return (EReference)variableDefinitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLiteral()
  {
    return literalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteral()
  {
    return typeLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRType()
  {
    return rTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getRValDecl()
  {
    return rValDeclEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getRValDecl_Stmt()
  {
    return (EReference)rValDeclEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFinalIdentSegment()
  {
    return finalIdentSegmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFinalIdentSegment_Ident()
  {
    return (EAttribute)finalIdentSegmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFinalIdentCallSegment()
  {
    return finalIdentCallSegmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFinalIdentCallSegment_Call()
  {
    return (EReference)finalIdentCallSegmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFinalCallExpSegment()
  {
    return finalCallExpSegmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFinalCallExpSegment_Call()
  {
    return (EReference)finalCallExpSegmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNotExpression()
  {
    return notExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNotExpression_Expression()
  {
    return (EReference)notExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getNegExpression()
  {
    return negExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getNegExpression_Expression()
  {
    return (EReference)negExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIdentifierExpresion()
  {
    return identifierExpresionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getIdentifierExpresion_Value()
  {
    return (EAttribute)identifierExpresionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLiteralExpressioin()
  {
    return literalExpressioinEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLiteralExpressioin_Lit()
  {
    return (EReference)literalExpressioinEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getParenthesisExpression()
  {
    return parenthesisExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getParenthesisExpression_Expression()
  {
    return (EReference)parenthesisExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getIfExpression()
  {
    return ifExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfExpression_Condition()
  {
    return (EReference)ifExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfExpression_IfBlock()
  {
    return (EReference)ifExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getIfExpression_ElseBlock()
  {
    return (EReference)ifExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLetExpression()
  {
    return letExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLetExpression_Bindings()
  {
    return (EReference)letExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLetExpression_LetExpr()
  {
    return (EReference)letExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralString()
  {
    return typeLiteralStringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralInteger()
  {
    return typeLiteralIntegerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralReal()
  {
    return typeLiteralRealEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralBoolean()
  {
    return typeLiteralBooleanEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralSequence()
  {
    return typeLiteralSequenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTypeLiteralSequence_SubType()
  {
    return (EReference)typeLiteralSequenceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralOrderedTypeSet()
  {
    return typeLiteralOrderedTypeSetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTypeLiteralOrderedTypeSet_SubType()
  {
    return (EReference)typeLiteralOrderedTypeSetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralClassifier()
  {
    return typeLiteralClassifierEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTypeLiteralPipe()
  {
    return typeLiteralPipeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleFactory getAleFactory()
  {
    return (AleFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    rRootEClass = createEClass(RROOT);
    createEReference(rRootEClass, RROOT__XTENDED_CLASSES);

    rClassEClass = createEClass(RCLASS);
    createEAttribute(rClassEClass, RCLASS__NAME);
    createEReference(rClassEClass, RCLASS__ATTRIBUTES);
    createEReference(rClassEClass, RCLASS__OPERATIONS);

    rOpenClassEClass = createEClass(ROPEN_CLASS);
    createEReference(rOpenClassEClass, ROPEN_CLASS__OPEN_CLASS);

    rNewClassEClass = createEClass(RNEW_CLASS);
    createEReference(rNewClassEClass, RNEW_CLASS__NEW_CLASS);

    rOperationEClass = createEClass(ROPERATION);
    createEReference(rOperationEClass, ROPERATION__TYPE);
    createEAttribute(rOperationEClass, ROPERATION__NAME);
    createEReference(rOperationEClass, ROPERATION__PARAM_LIST);
    createEReference(rOperationEClass, ROPERATION__BODY);

    rParametersEClass = createEClass(RPARAMETERS);
    createEReference(rParametersEClass, RPARAMETERS__PARAMS);

    rVariableEClass = createEClass(RVARIABLE);
    createEReference(rVariableEClass, RVARIABLE__TYPE);
    createEAttribute(rVariableEClass, RVARIABLE__NAME);

    rAttributeEClass = createEClass(RATTRIBUTE);
    createEReference(rAttributeEClass, RATTRIBUTE__TYPE);
    createEAttribute(rAttributeEClass, RATTRIBUTE__NAME);
    createEReference(rAttributeEClass, RATTRIBUTE__EXPR);

    rStatementEClass = createEClass(RSTATEMENT);

    rVarDeclEClass = createEClass(RVAR_DECL);
    createEReference(rVarDeclEClass, RVAR_DECL__TYPE);
    createEAttribute(rVarDeclEClass, RVAR_DECL__IDENT);
    createEReference(rVarDeclEClass, RVAR_DECL__EXPRESSION);

    rAssignEClass = createEClass(RASSIGN);
    createEReference(rAssignEClass, RASSIGN__STMT);
    createEReference(rAssignEClass, RASSIGN__LEFT);
    createEReference(rAssignEClass, RASSIGN__RIGHT);

    rForEachEClass = createEClass(RFOR_EACH);
    createEReference(rForEachEClass, RFOR_EACH__FOR_EACH);

    rCollectionEClass = createEClass(RCOLLECTION);
    createEReference(rCollectionEClass, RCOLLECTION__BLOCK);

    rBlockEClass = createEClass(RBLOCK);
    createEReference(rBlockEClass, RBLOCK__STATEMENT);

    rIfEClass = createEClass(RIF);
    createEReference(rIfEClass, RIF__IF);
    createEReference(rIfEClass, RIF__CONDITION);
    createEReference(rIfEClass, RIF__IF_BLOCK);
    createEReference(rIfEClass, RIF__ELSE_BLOCK);

    rWhileEClass = createEClass(RWHILE);
    createEReference(rWhileEClass, RWHILE__WHILE);

    rExpressionEClass = createEClass(REXPRESSION);
    createEReference(rExpressionEClass, REXPRESSION__EXPR);

    exprEClass = createEClass(EXPR);
    createEReference(exprEClass, EXPR__LEFT_PART);
    createEReference(exprEClass, EXPR__RECPART);
    createEReference(exprEClass, EXPR__REC_EXP);

    navigationSegmentEClass = createEClass(NAVIGATION_SEGMENT);

    bindingEClass = createEClass(BINDING);
    createEAttribute(bindingEClass, BINDING__IDENTIFIER);
    createEReference(bindingEClass, BINDING__TYPE);
    createEReference(bindingEClass, BINDING__EXPRESSION);

    classExpEClass = createEClass(CLASS_EXP);

    expressionSequenceEClass = createEClass(EXPRESSION_SEQUENCE);
    createEReference(expressionSequenceEClass, EXPRESSION_SEQUENCE__SEQ_EXPRS);

    variableDefinitionEClass = createEClass(VARIABLE_DEFINITION);
    createEReference(variableDefinitionEClass, VARIABLE_DEFINITION__EXPRESSION);

    literalEClass = createEClass(LITERAL);

    typeLiteralEClass = createEClass(TYPE_LITERAL);

    rTypeEClass = createEClass(RTYPE);

    rValDeclEClass = createEClass(RVAL_DECL);
    createEReference(rValDeclEClass, RVAL_DECL__STMT);

    finalIdentSegmentEClass = createEClass(FINAL_IDENT_SEGMENT);
    createEAttribute(finalIdentSegmentEClass, FINAL_IDENT_SEGMENT__IDENT);

    finalIdentCallSegmentEClass = createEClass(FINAL_IDENT_CALL_SEGMENT);
    createEReference(finalIdentCallSegmentEClass, FINAL_IDENT_CALL_SEGMENT__CALL);

    finalCallExpSegmentEClass = createEClass(FINAL_CALL_EXP_SEGMENT);
    createEReference(finalCallExpSegmentEClass, FINAL_CALL_EXP_SEGMENT__CALL);

    notExpressionEClass = createEClass(NOT_EXPRESSION);
    createEReference(notExpressionEClass, NOT_EXPRESSION__EXPRESSION);

    negExpressionEClass = createEClass(NEG_EXPRESSION);
    createEReference(negExpressionEClass, NEG_EXPRESSION__EXPRESSION);

    identifierExpresionEClass = createEClass(IDENTIFIER_EXPRESION);
    createEAttribute(identifierExpresionEClass, IDENTIFIER_EXPRESION__VALUE);

    literalExpressioinEClass = createEClass(LITERAL_EXPRESSIOIN);
    createEReference(literalExpressioinEClass, LITERAL_EXPRESSIOIN__LIT);

    parenthesisExpressionEClass = createEClass(PARENTHESIS_EXPRESSION);
    createEReference(parenthesisExpressionEClass, PARENTHESIS_EXPRESSION__EXPRESSION);

    ifExpressionEClass = createEClass(IF_EXPRESSION);
    createEReference(ifExpressionEClass, IF_EXPRESSION__CONDITION);
    createEReference(ifExpressionEClass, IF_EXPRESSION__IF_BLOCK);
    createEReference(ifExpressionEClass, IF_EXPRESSION__ELSE_BLOCK);

    letExpressionEClass = createEClass(LET_EXPRESSION);
    createEReference(letExpressionEClass, LET_EXPRESSION__BINDINGS);
    createEReference(letExpressionEClass, LET_EXPRESSION__LET_EXPR);

    typeLiteralStringEClass = createEClass(TYPE_LITERAL_STRING);

    typeLiteralIntegerEClass = createEClass(TYPE_LITERAL_INTEGER);

    typeLiteralRealEClass = createEClass(TYPE_LITERAL_REAL);

    typeLiteralBooleanEClass = createEClass(TYPE_LITERAL_BOOLEAN);

    typeLiteralSequenceEClass = createEClass(TYPE_LITERAL_SEQUENCE);
    createEReference(typeLiteralSequenceEClass, TYPE_LITERAL_SEQUENCE__SUB_TYPE);

    typeLiteralOrderedTypeSetEClass = createEClass(TYPE_LITERAL_ORDERED_TYPE_SET);
    createEReference(typeLiteralOrderedTypeSetEClass, TYPE_LITERAL_ORDERED_TYPE_SET__SUB_TYPE);

    typeLiteralClassifierEClass = createEClass(TYPE_LITERAL_CLASSIFIER);

    typeLiteralPipeEClass = createEClass(TYPE_LITERAL_PIPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    rOpenClassEClass.getESuperTypes().add(this.getRClass());
    rNewClassEClass.getESuperTypes().add(this.getRClass());
    rAssignEClass.getESuperTypes().add(this.getRStatement());
    rForEachEClass.getESuperTypes().add(this.getRStatement());
    rCollectionEClass.getESuperTypes().add(this.getRForEach());
    rIfEClass.getESuperTypes().add(this.getRStatement());
    rWhileEClass.getESuperTypes().add(this.getRStatement());
    rExpressionEClass.getESuperTypes().add(this.getRStatement());
    exprEClass.getESuperTypes().add(this.getrCollection());
    exprEClass.getESuperTypes().add(this.getRWhile());
    exprEClass.getESuperTypes().add(this.getRExpression());
    navigationSegmentEClass.getESuperTypes().add(this.getExpr());
    expressionSequenceEClass.getESuperTypes().add(this.getClassExp());
    expressionSequenceEClass.getESuperTypes().add(this.getLiteral());
    variableDefinitionEClass.getESuperTypes().add(this.getClassExp());
    typeLiteralEClass.getESuperTypes().add(this.getvariableDefinition());
    typeLiteralEClass.getESuperTypes().add(this.getLiteral());
    typeLiteralEClass.getESuperTypes().add(this.getRType());
    rValDeclEClass.getESuperTypes().add(this.getRStatement());
    finalIdentSegmentEClass.getESuperTypes().add(this.getNavigationSegment());
    finalIdentCallSegmentEClass.getESuperTypes().add(this.getNavigationSegment());
    finalCallExpSegmentEClass.getESuperTypes().add(this.getNavigationSegment());
    notExpressionEClass.getESuperTypes().add(this.getExpr());
    negExpressionEClass.getESuperTypes().add(this.getExpr());
    identifierExpresionEClass.getESuperTypes().add(this.getExpr());
    literalExpressioinEClass.getESuperTypes().add(this.getExpr());
    parenthesisExpressionEClass.getESuperTypes().add(this.getExpr());
    ifExpressionEClass.getESuperTypes().add(this.getExpr());
    letExpressionEClass.getESuperTypes().add(this.getExpr());
    typeLiteralStringEClass.getESuperTypes().add(this.getTypeLiteral());
    typeLiteralIntegerEClass.getESuperTypes().add(this.getTypeLiteral());
    typeLiteralRealEClass.getESuperTypes().add(this.getTypeLiteral());
    typeLiteralBooleanEClass.getESuperTypes().add(this.getTypeLiteral());
    typeLiteralSequenceEClass.getESuperTypes().add(this.getTypeLiteral());
    typeLiteralOrderedTypeSetEClass.getESuperTypes().add(this.getTypeLiteral());
    typeLiteralClassifierEClass.getESuperTypes().add(this.getTypeLiteral());
    typeLiteralPipeEClass.getESuperTypes().add(this.getTypeLiteral());

    // Initialize classes and features; add operations and parameters
    initEClass(rRootEClass, RRoot.class, "RRoot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRRoot_XtendedClasses(), this.getRClass(), null, "xtendedClasses", null, 0, -1, RRoot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rClassEClass, RClass.class, "RClass", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRClass_Name(), ecorePackage.getEString(), "name", null, 0, 1, RClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRClass_Attributes(), this.getrAttribute(), null, "attributes", null, 0, -1, RClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRClass_Operations(), this.getrOperation(), null, "operations", null, 0, -1, RClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rOpenClassEClass, ROpenClass.class, "ROpenClass", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getROpenClass_OpenClass(), this.getROpenClass(), null, "openClass", null, 0, 1, ROpenClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rNewClassEClass, RNewClass.class, "RNewClass", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRNewClass_NewClass(), this.getRNewClass(), null, "newClass", null, 0, 1, RNewClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rOperationEClass, rOperation.class, "rOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getrOperation_Type(), this.getRType(), null, "type", null, 0, 1, rOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getrOperation_Name(), ecorePackage.getEString(), "name", null, 0, 1, rOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getrOperation_ParamList(), this.getrParameters(), null, "paramList", null, 0, -1, rOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getrOperation_Body(), this.getrBlock(), null, "body", null, 0, 1, rOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rParametersEClass, rParameters.class, "rParameters", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getrParameters_Params(), this.getrVariable(), null, "params", null, 0, -1, rParameters.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rVariableEClass, rVariable.class, "rVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getrVariable_Type(), this.getRType(), null, "type", null, 0, 1, rVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getrVariable_Name(), ecorePackage.getEString(), "name", null, 0, 1, rVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rAttributeEClass, rAttribute.class, "rAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getrAttribute_Type(), this.getRType(), null, "type", null, 0, 1, rAttribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getrAttribute_Name(), ecorePackage.getEString(), "name", null, 0, 1, rAttribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getrAttribute_Expr(), this.getExpr(), null, "expr", null, 0, 1, rAttribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rStatementEClass, RStatement.class, "RStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(rVarDeclEClass, rVarDecl.class, "rVarDecl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getrVarDecl_Type(), this.getRType(), null, "type", null, 0, 1, rVarDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getrVarDecl_Ident(), ecorePackage.getEString(), "ident", null, 0, 1, rVarDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getrVarDecl_Expression(), this.getExpr(), null, "expression", null, 0, 1, rVarDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rAssignEClass, RAssign.class, "RAssign", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRAssign_Stmt(), this.getRAssign(), null, "stmt", null, 0, 1, RAssign.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRAssign_Left(), this.getExpr(), null, "left", null, 0, 1, RAssign.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRAssign_Right(), this.getExpr(), null, "right", null, 0, 1, RAssign.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rForEachEClass, RForEach.class, "RForEach", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRForEach_ForEach(), this.getRForEach(), null, "forEach", null, 0, 1, RForEach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rCollectionEClass, rCollection.class, "rCollection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getrCollection_Block(), this.getrBlock(), null, "block", null, 0, 1, rCollection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rBlockEClass, rBlock.class, "rBlock", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getrBlock_Statement(), this.getRStatement(), null, "statement", null, 0, -1, rBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rIfEClass, RIf.class, "RIf", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRIf_If(), this.getRIf(), null, "if", null, 0, 1, RIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRIf_Condition(), this.getExpr(), null, "condition", null, 0, 1, RIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRIf_IfBlock(), this.getrBlock(), null, "ifBlock", null, 0, 1, RIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRIf_ElseBlock(), this.getrBlock(), null, "elseBlock", null, 0, 1, RIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rWhileEClass, RWhile.class, "RWhile", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRWhile_While(), this.getRWhile(), null, "while", null, 0, 1, RWhile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rExpressionEClass, RExpression.class, "RExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRExpression_Expr(), this.getRExpression(), null, "expr", null, 0, 1, RExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(exprEClass, Expr.class, "Expr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExpr_LeftPart(), this.getExpr(), null, "leftPart", null, 0, 1, Expr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpr_Recpart(), this.getExpr(), null, "recpart", null, 0, 1, Expr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpr_RecExp(), this.getExpr(), null, "recExp", null, 0, 1, Expr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(navigationSegmentEClass, NavigationSegment.class, "NavigationSegment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(bindingEClass, Binding.class, "Binding", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBinding_Identifier(), ecorePackage.getEString(), "identifier", null, 0, 1, Binding.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBinding_Type(), this.getTypeLiteral(), null, "type", null, 0, 1, Binding.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBinding_Expression(), this.getExpr(), null, "expression", null, 0, 1, Binding.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(classExpEClass, ClassExp.class, "ClassExp", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expressionSequenceEClass, expressionSequence.class, "expressionSequence", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getexpressionSequence_SeqExprs(), this.getExpr(), null, "seqExprs", null, 0, -1, expressionSequence.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableDefinitionEClass, variableDefinition.class, "variableDefinition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getvariableDefinition_Expression(), this.getExpr(), null, "expression", null, 0, 1, variableDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(literalEClass, Literal.class, "Literal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typeLiteralEClass, TypeLiteral.class, "TypeLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(rTypeEClass, RType.class, "RType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(rValDeclEClass, RValDecl.class, "RValDecl", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRValDecl_Stmt(), this.getrVarDecl(), null, "stmt", null, 0, 1, RValDecl.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(finalIdentSegmentEClass, FinalIdentSegment.class, "FinalIdentSegment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFinalIdentSegment_Ident(), ecorePackage.getEString(), "ident", null, 0, 1, FinalIdentSegment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(finalIdentCallSegmentEClass, FinalIdentCallSegment.class, "FinalIdentCallSegment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFinalIdentCallSegment_Call(), this.getClassExp(), null, "call", null, 0, 1, FinalIdentCallSegment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(finalCallExpSegmentEClass, FinalCallExpSegment.class, "FinalCallExpSegment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFinalCallExpSegment_Call(), this.getClassExp(), null, "call", null, 0, 1, FinalCallExpSegment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(notExpressionEClass, NotExpression.class, "NotExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNotExpression_Expression(), this.getExpr(), null, "expression", null, 0, 1, NotExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(negExpressionEClass, NegExpression.class, "NegExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNegExpression_Expression(), this.getExpr(), null, "expression", null, 0, 1, NegExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(identifierExpresionEClass, IdentifierExpresion.class, "IdentifierExpresion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIdentifierExpresion_Value(), ecorePackage.getEString(), "value", null, 0, 1, IdentifierExpresion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(literalExpressioinEClass, LiteralExpressioin.class, "LiteralExpressioin", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLiteralExpressioin_Lit(), this.getLiteral(), null, "lit", null, 0, 1, LiteralExpressioin.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parenthesisExpressionEClass, ParenthesisExpression.class, "ParenthesisExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getParenthesisExpression_Expression(), this.getExpr(), null, "expression", null, 0, 1, ParenthesisExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ifExpressionEClass, IfExpression.class, "IfExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIfExpression_Condition(), this.getExpr(), null, "condition", null, 0, 1, IfExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfExpression_IfBlock(), this.getExpr(), null, "ifBlock", null, 0, 1, IfExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getIfExpression_ElseBlock(), this.getExpr(), null, "elseBlock", null, 0, 1, IfExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(letExpressionEClass, LetExpression.class, "LetExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLetExpression_Bindings(), this.getBinding(), null, "bindings", null, 0, -1, LetExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLetExpression_LetExpr(), this.getExpr(), null, "letExpr", null, 0, 1, LetExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeLiteralStringEClass, TypeLiteralString.class, "TypeLiteralString", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typeLiteralIntegerEClass, TypeLiteralInteger.class, "TypeLiteralInteger", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typeLiteralRealEClass, TypeLiteralReal.class, "TypeLiteralReal", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typeLiteralBooleanEClass, TypeLiteralBoolean.class, "TypeLiteralBoolean", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typeLiteralSequenceEClass, TypeLiteralSequence.class, "TypeLiteralSequence", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTypeLiteralSequence_SubType(), this.getTypeLiteral(), null, "subType", null, 0, 1, TypeLiteralSequence.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeLiteralOrderedTypeSetEClass, TypeLiteralOrderedTypeSet.class, "TypeLiteralOrderedTypeSet", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTypeLiteralOrderedTypeSet_SubType(), this.getTypeLiteral(), null, "subType", null, 0, 1, TypeLiteralOrderedTypeSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeLiteralClassifierEClass, TypeLiteralClassifier.class, "TypeLiteralClassifier", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typeLiteralPipeEClass, TypeLiteralPipe.class, "TypeLiteralPipe", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Create resource
    createResource(eNS_URI);
  }

} //AlePackageImpl
