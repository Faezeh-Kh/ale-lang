/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.ecoretools.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AleGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRQualifiedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cRImportParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cRServiceParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cXtendedClassesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXtendedClassesRClassParserRuleCall_5_0 = (RuleCall)cXtendedClassesAssignment_5.eContents().get(0);
		
		/// *****************
<<<<<<< HEAD:org.xtext.example.mydsl/src-gen/org/xtext/example/mydsl/services/MyDslGrammarAccess.java
		// * AQL++ grammar *
		// ***************** / rRoot RRoot:
		//	'behavior' rQualified ';' rImport* rService* xtendedClasses+=rClass*
=======
		// *  ALE grammar  *
		// ***************** / rRoot:
		//	'behavior' rQualified ';' rImport* rService* xtendedClasses+=rClass*;
>>>>>>> master:org.eclipse.ecoretools.ale.xtext/src-gen/org/eclipse/ecoretools/services/AleGrammarAccess.java
		@Override public ParserRule getRule() { return rule; }
		
		//'behavior' rQualified ';' rImport* rService* xtendedClasses+=rClass*
		public Group getGroup() { return cGroup; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }
		
		//rQualified
		public RuleCall getRQualifiedParserRuleCall_1() { return cRQualifiedParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//rImport*
		public RuleCall getRImportParserRuleCall_3() { return cRImportParserRuleCall_3; }
		
		//rService*
		public RuleCall getRServiceParserRuleCall_4() { return cRServiceParserRuleCall_4; }
		
		//xtendedClasses+=rClass*
		public Assignment getXtendedClassesAssignment_5() { return cXtendedClassesAssignment_5; }
		
		//rClass
		public RuleCall getXtendedClassesRClassParserRuleCall_5_0() { return cXtendedClassesRClassParserRuleCall_5_0; }
	}
	public class RImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRQualifiedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIdentTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//rImport:
		//	'import' rQualified 'as' Ident ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' rQualified 'as' Ident ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//rQualified
		public RuleCall getRQualifiedParserRuleCall_1() { return cRQualifiedParserRuleCall_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_3() { return cIdentTerminalRuleCall_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIdentTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//rService:
		//	'use' Ident ('.' Ident)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'use' Ident ('.' Ident)* ';'
		public Group getGroup() { return cGroup; }
		
		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_1() { return cIdentTerminalRuleCall_1; }
		
		//('.' Ident)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_2_1() { return cIdentTerminalRuleCall_2_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cROpenClassAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpenClassAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpenClassROpenClassParserRuleCall_0_1_0 = (RuleCall)cOpenClassAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRNewClassAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNewClassAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNewClassRNewClassParserRuleCall_1_1_0 = (RuleCall)cNewClassAssignment_1_1.eContents().get(0);
		
		//rClass RClass:
		//	{ROpenClass} openClass=rOpenClass | {RNewClass} newClass=rNewClass
		@Override public ParserRule getRule() { return rule; }
		
		//{ROpenClass} openClass=rOpenClass | {RNewClass} newClass=rNewClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ROpenClass} openClass=rOpenClass
		public Group getGroup_0() { return cGroup_0; }
		
		//{ROpenClass}
		public Action getROpenClassAction_0_0() { return cROpenClassAction_0_0; }
		
		//openClass=rOpenClass
		public Assignment getOpenClassAssignment_0_1() { return cOpenClassAssignment_0_1; }
		
		//rOpenClass
		public RuleCall getOpenClassROpenClassParserRuleCall_0_1_0() { return cOpenClassROpenClassParserRuleCall_0_1_0; }
		
		//{RNewClass} newClass=rNewClass
		public Group getGroup_1() { return cGroup_1; }
		
		//{RNewClass}
		public Action getRNewClassAction_1_0() { return cRNewClassAction_1_0; }
		
		//newClass=rNewClass
		public Assignment getNewClassAssignment_1_1() { return cNewClassAssignment_1_1; }
		
		//rNewClass
		public RuleCall getNewClassRNewClassParserRuleCall_1_1_0() { return cNewClassRNewClassParserRuleCall_1_1_0; }
	}
	public class ROpenClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rOpenClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameRQualifiedParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cRQualifiedParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final RuleCall cRQualifiedParserRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesRAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Assignment cOperationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperationsROperationParserRuleCall_6_0 = (RuleCall)cOperationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//rOpenClass ROpenClass:
		//	'open' 'class' name=rQualified ('extends' rQualified (',' rQualified)*)? '{' attributes+=rAttribute*
		//	operations+=rOperation* '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'open' 'class' name=rQualified ('extends' rQualified (',' rQualified)*)? '{' attributes+=rAttribute*
		//operations+=rOperation* '}'
		public Group getGroup() { return cGroup; }
		
		//'open'
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=rQualified
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//rQualified
		public RuleCall getNameRQualifiedParserRuleCall_2_0() { return cNameRQualifiedParserRuleCall_2_0; }
		
		//('extends' rQualified (',' rQualified)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//rQualified
		public RuleCall getRQualifiedParserRuleCall_3_1() { return cRQualifiedParserRuleCall_3_1; }
		
		//(',' rQualified)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//rQualified
		public RuleCall getRQualifiedParserRuleCall_3_2_1() { return cRQualifiedParserRuleCall_3_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//attributes+=rAttribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//rAttribute
		public RuleCall getAttributesRAttributeParserRuleCall_5_0() { return cAttributesRAttributeParserRuleCall_5_0; }
		
		//operations+=rOperation*
		public Assignment getOperationsAssignment_6() { return cOperationsAssignment_6; }
		
		//rOperation
		public RuleCall getOperationsROperationParserRuleCall_6_0() { return cOperationsROperationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RNewClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rNewClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameRQualifiedParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesRAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cOperationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationsROperationParserRuleCall_4_0 = (RuleCall)cOperationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//rNewClass RNewClass:
		//	'class' name=rQualified '{' attributes+=rAttribute* operations+=rOperation* '}'
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=rQualified '{' attributes+=rAttribute* operations+=rOperation* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=rQualified
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//rQualified
		public RuleCall getNameRQualifiedParserRuleCall_1_0() { return cNameRQualifiedParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=rAttribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//rAttribute
		public RuleCall getAttributesRAttributeParserRuleCall_3_0() { return cAttributesRAttributeParserRuleCall_3_0; }
		
		//operations+=rOperation*
		public Assignment getOperationsAssignment_4() { return cOperationsAssignment_4; }
		
		//rOperation
		public RuleCall getOperationsROperationParserRuleCall_4_0() { return cOperationsROperationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ROperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRTagParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cDefKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cOverrideKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIdentTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParamListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParamListRParametersParserRuleCall_5_0 = (RuleCall)cParamListAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyRBlockParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//rOperation:
		//	rTag* ('def' | 'override') type=rType name=Ident '(' paramList+=rParameters? ')' body=rBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//rTag* ('def' | 'override') type=rType name=Ident '(' paramList+=rParameters? ')' body=rBlock
		public Group getGroup() { return cGroup; }
		
		//rTag*
		public RuleCall getRTagParserRuleCall_0() { return cRTagParserRuleCall_0; }
		
		//('def' | 'override')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'def'
		public Keyword getDefKeyword_1_0() { return cDefKeyword_1_0; }
		
		//'override'
		public Keyword getOverrideKeyword_1_1() { return cOverrideKeyword_1_1; }
		
		//type=rType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//rType
		public RuleCall getTypeRTypeParserRuleCall_2_0() { return cTypeRTypeParserRuleCall_2_0; }
		
		//name=Ident
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_3_0() { return cNameIdentTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//paramList+=rParameters?
		public Assignment getParamListAssignment_5() { return cParamListAssignment_5; }
		
		//rParameters
		public RuleCall getParamListRParametersParserRuleCall_5_0() { return cParamListRParametersParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//body=rBlock
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//rBlock
		public RuleCall getBodyRBlockParserRuleCall_7_0() { return cBodyRBlockParserRuleCall_7_0; }
	}
	public class RTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//rTag:
		//	'@' Ident;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' Ident
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_1() { return cIdentTerminalRuleCall_1; }
	}
	public class RParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsRVariableParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsRVariableParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//rParameters:
		//	params+=rVariable (',' params+=rVariable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//params+=rVariable (',' params+=rVariable)*
		public Group getGroup() { return cGroup; }
		
		//params+=rVariable
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }
		
		//rVariable
		public RuleCall getParamsRVariableParserRuleCall_0_0() { return cParamsRVariableParserRuleCall_0_0; }
		
		//(',' params+=rVariable)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//params+=rVariable
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }
		
		//rVariable
		public RuleCall getParamsRVariableParserRuleCall_1_1_0() { return cParamsRVariableParserRuleCall_1_1_0; }
	}
	public class RVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//rVariable:
		//	type=rType name=Ident;
		@Override public ParserRule getRule() { return rule; }
		
		//type=rType name=Ident
		public Group getGroup() { return cGroup; }
		
		//type=rType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//rType
		public RuleCall getTypeRTypeParserRuleCall_0_0() { return cTypeRTypeParserRuleCall_0_0; }
		
		//name=Ident
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_1_0() { return cNameIdentTerminalRuleCall_1_0; }
	}
	public class RAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//rAttribute:
		//	type=rType name=Ident (':=' expr=expression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=rType name=Ident (':=' expr=expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//type=rType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//rType
		public RuleCall getTypeRTypeParserRuleCall_0_0() { return cTypeRTypeParserRuleCall_0_0; }
		
		//name=Ident
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Ident
		public RuleCall getNameIdentTerminalRuleCall_1_0() { return cNameIdentTerminalRuleCall_1_0; }
		
		//(':=' expr=expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }
		
		//expr=expression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_2_1_0() { return cExprExpressionParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRValDeclAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cStmtAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStmtRVarDeclParserRuleCall_0_1_0 = (RuleCall)cStmtAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRAssignAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cStmtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStmtRAssignParserRuleCall_1_1_0 = (RuleCall)cStmtAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRForEachAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cForEachAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cForEachRForEachParserRuleCall_2_1_0 = (RuleCall)cForEachAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cRWhileAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cWhileAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWhileRWhileParserRuleCall_3_1_0 = (RuleCall)cWhileAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRIfAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cIfAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIfRIfParserRuleCall_4_1_0 = (RuleCall)cIfAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cRExpressionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cExprAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExprRExpressionParserRuleCall_5_1_0 = (RuleCall)cExprAssignment_5_1.eContents().get(0);
		
		//rStatement RStatement:
		//	{RValDecl} stmt=rVarDecl | {RAssign} stmt=rAssign | {RForEach} forEach=rForEach | {RWhile} while=rWhile | {RIf} if=rIf
		//	| {RExpression} expr=rExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{RValDecl} stmt=rVarDecl | {RAssign} stmt=rAssign | {RForEach} forEach=rForEach | {RWhile} while=rWhile | {RIf} if=rIf |
		//{RExpression} expr=rExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RValDecl} stmt=rVarDecl
		public Group getGroup_0() { return cGroup_0; }
		
		//{RValDecl}
		public Action getRValDeclAction_0_0() { return cRValDeclAction_0_0; }
		
		//stmt=rVarDecl
		public Assignment getStmtAssignment_0_1() { return cStmtAssignment_0_1; }
		
		//rVarDecl
		public RuleCall getStmtRVarDeclParserRuleCall_0_1_0() { return cStmtRVarDeclParserRuleCall_0_1_0; }
		
		//{RAssign} stmt=rAssign
		public Group getGroup_1() { return cGroup_1; }
		
		//{RAssign}
		public Action getRAssignAction_1_0() { return cRAssignAction_1_0; }
		
		//stmt=rAssign
		public Assignment getStmtAssignment_1_1() { return cStmtAssignment_1_1; }
		
		//rAssign
		public RuleCall getStmtRAssignParserRuleCall_1_1_0() { return cStmtRAssignParserRuleCall_1_1_0; }
		
		//{RForEach} forEach=rForEach
		public Group getGroup_2() { return cGroup_2; }
		
		//{RForEach}
		public Action getRForEachAction_2_0() { return cRForEachAction_2_0; }
		
		//forEach=rForEach
		public Assignment getForEachAssignment_2_1() { return cForEachAssignment_2_1; }
		
		//rForEach
		public RuleCall getForEachRForEachParserRuleCall_2_1_0() { return cForEachRForEachParserRuleCall_2_1_0; }
		
		//{RWhile} while=rWhile
		public Group getGroup_3() { return cGroup_3; }
		
		//{RWhile}
		public Action getRWhileAction_3_0() { return cRWhileAction_3_0; }
		
		//while=rWhile
		public Assignment getWhileAssignment_3_1() { return cWhileAssignment_3_1; }
		
		//rWhile
		public RuleCall getWhileRWhileParserRuleCall_3_1_0() { return cWhileRWhileParserRuleCall_3_1_0; }
		
		//{RIf} if=rIf
		public Group getGroup_4() { return cGroup_4; }
		
		//{RIf}
		public Action getRIfAction_4_0() { return cRIfAction_4_0; }
		
		//if=rIf
		public Assignment getIfAssignment_4_1() { return cIfAssignment_4_1; }
		
		//rIf
		public RuleCall getIfRIfParserRuleCall_4_1_0() { return cIfRIfParserRuleCall_4_1_0; }
		
		//{RExpression} expr=rExpression
		public Group getGroup_5() { return cGroup_5; }
		
		//{RExpression}
		public Action getRExpressionAction_5_0() { return cRExpressionAction_5_0; }
		
		//expr=rExpression
		public Assignment getExprAssignment_5_1() { return cExprAssignment_5_1; }
		
		//rExpression
		public RuleCall getExprRExpressionParserRuleCall_5_1_0() { return cExprRExpressionParserRuleCall_5_1_0; }
	}
	public class RVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//rVarDecl:
		//	rType Ident (':=' expression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//rType Ident (':=' expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//rType
		public RuleCall getRTypeParserRuleCall_0() { return cRTypeParserRuleCall_0; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_1() { return cIdentTerminalRuleCall_1; }
		
		//(':=' expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//rAssign RAssign:
		//	left=expression ':=' right=expression ';'
		@Override public ParserRule getRule() { return rule; }
		
		//left=expression ':=' right=expression ';'
		public Group getGroup() { return cGroup; }
		
		//left=expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//right=expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cRCollectionParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockRBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		
		//rForEach RForEach:
		//	'for' '(' Ident 'in' rCollection ')' block=rBlock
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' Ident 'in' rCollection ')' block=rBlock
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_2() { return cIdentTerminalRuleCall_2; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//rCollection
		public RuleCall getRCollectionParserRuleCall_4() { return cRCollectionParserRuleCall_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//block=rBlock
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }
		
		//rBlock
		public RuleCall getBlockRBlockParserRuleCall_6_0() { return cBlockRBlockParserRuleCall_6_0; }
	}
	public class RCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rCollection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rCollection:
		//	'[' INT '..' INT ']' | expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' INT '..' INT ']' | expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' INT '..' INT ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_0_2() { return cFullStopFullStopKeyword_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_3() { return cINTTerminalRuleCall_0_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class RBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatementRStatementParserRuleCall_1_0_0 = (RuleCall)cStatementAssignment_1_0.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementRStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//rBlock:
		//	'{' (statement+=rStatement statement+=rStatement*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (statement+=rStatement statement+=rStatement*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(statement+=rStatement statement+=rStatement*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//statement+=rStatement
		public Assignment getStatementAssignment_1_0() { return cStatementAssignment_1_0; }
		
		//rStatement
		public RuleCall getStatementRStatementParserRuleCall_1_0_0() { return cStatementRStatementParserRuleCall_1_0_0; }
		
		//statement+=rStatement*
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }
		
		//rStatement
		public RuleCall getStatementRStatementParserRuleCall_1_1_0() { return cStatementRStatementParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class RIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIfBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfBlockRBlockParserRuleCall_4_0 = (RuleCall)cIfBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockRBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//rIf RIf:
		//	'if' '(' condition=expression ')' ifBlock=rBlock ('else' elseBlock=rBlock)?
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=expression ')' ifBlock=rBlock ('else' elseBlock=rBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//ifBlock=rBlock
		public Assignment getIfBlockAssignment_4() { return cIfBlockAssignment_4; }
		
		//rBlock
		public RuleCall getIfBlockRBlockParserRuleCall_4_0() { return cIfBlockRBlockParserRuleCall_4_0; }
		
		//('else' elseBlock=rBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=rBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//rBlock
		public RuleCall getElseBlockRBlockParserRuleCall_5_1_0() { return cElseBlockRBlockParserRuleCall_5_1_0; }
	}
	public class RWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockRBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//rWhile RWhile:
		//	'while' '(' expression ')' block=rBlock
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' expression ')' block=rBlock
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//block=rBlock
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//rBlock
		public RuleCall getBlockRBlockParserRuleCall_4_0() { return cBlockRBlockParserRuleCall_4_0; }
	}
	public class RExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//rExpression RExpression:
		//	expression ';'
		@Override public ParserRule getRule() { return rule; }
		
		//expression ';'
		public Group getGroup() { return cGroup; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftPartNonLeftRecExpressionParserRuleCall_0_0 = (RuleCall)cLeftPartAssignment_0.eContents().get(0);
		private final Assignment cRecpartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecpartRecExpressionParserRuleCall_1_0 = (RuleCall)cRecpartAssignment_1.eContents().get(0);
		
		/// ***************
		// * AQL grammar *
		// *************** / expression Expr:
		//	leftPart=nonLeftRecExpression recpart=recExpression?
		@Override public ParserRule getRule() { return rule; }
		
		//leftPart=nonLeftRecExpression recpart=recExpression?
		public Group getGroup() { return cGroup; }
		
		//leftPart=nonLeftRecExpression
		public Assignment getLeftPartAssignment_0() { return cLeftPartAssignment_0; }
		
		//nonLeftRecExpression
		public RuleCall getLeftPartNonLeftRecExpressionParserRuleCall_0_0() { return cLeftPartNonLeftRecExpressionParserRuleCall_0_0; }
		
		//recpart=recExpression?
		public Assignment getRecpartAssignment_1() { return cRecpartAssignment_1; }
		
		//recExpression
		public RuleCall getRecpartRecExpressionParserRuleCall_1_0() { return cRecpartRecExpressionParserRuleCall_1_0; }
	}
	public class RecExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.recExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cNavigationSegmentParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cMultOpTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final RuleCall cAddOpParserRuleCall_0_2_0 = (RuleCall)cGroup_0_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final RuleCall cCompOpParserRuleCall_0_3_0 = (RuleCall)cGroup_0_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_3_1 = (RuleCall)cGroup_0_3.eContents().get(1);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Keyword cAndKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_4_1 = (RuleCall)cGroup_0_4.eContents().get(1);
		private final Group cGroup_0_5 = (Group)cAlternatives_0.eContents().get(5);
		private final Keyword cOrKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_5_1 = (RuleCall)cGroup_0_5.eContents().get(1);
		private final Group cGroup_0_6 = (Group)cAlternatives_0.eContents().get(6);
		private final Keyword cXorKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_6_1 = (RuleCall)cGroup_0_6.eContents().get(1);
		private final Group cGroup_0_7 = (Group)cAlternatives_0.eContents().get(7);
		private final Keyword cImpliesKeyword_0_7_0 = (Keyword)cGroup_0_7.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_7_1 = (RuleCall)cGroup_0_7.eContents().get(1);
		private final Assignment cRecExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecExpRecExpressionParserRuleCall_1_0 = (RuleCall)cRecExpAssignment_1.eContents().get(0);
		
		//recExpression RecExpression:
		//	(navigationSegment | MultOp expression | addOp expression | compOp expression | 'and' expression | 'or' expression |
		//	'xor' expression | 'implies' expression) recExp=recExpression?
		@Override public ParserRule getRule() { return rule; }
		
		//(navigationSegment | MultOp expression | addOp expression | compOp expression | 'and' expression | 'or' expression |
		//'xor' expression | 'implies' expression) recExp=recExpression?
		public Group getGroup() { return cGroup; }
		
		//(navigationSegment | MultOp expression | addOp expression | compOp expression | 'and' expression | 'or' expression |
		//'xor' expression | 'implies' expression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//navigationSegment
		public RuleCall getNavigationSegmentParserRuleCall_0_0() { return cNavigationSegmentParserRuleCall_0_0; }
		
		//MultOp expression
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//MultOp
		public RuleCall getMultOpTerminalRuleCall_0_1_0() { return cMultOpTerminalRuleCall_0_1_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_1_1() { return cExpressionParserRuleCall_0_1_1; }
		
		//addOp expression
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//addOp
		public RuleCall getAddOpParserRuleCall_0_2_0() { return cAddOpParserRuleCall_0_2_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_2_1() { return cExpressionParserRuleCall_0_2_1; }
		
		//compOp expression
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//compOp
		public RuleCall getCompOpParserRuleCall_0_3_0() { return cCompOpParserRuleCall_0_3_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_3_1() { return cExpressionParserRuleCall_0_3_1; }
		
		//'and' expression
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'and'
		public Keyword getAndKeyword_0_4_0() { return cAndKeyword_0_4_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_4_1() { return cExpressionParserRuleCall_0_4_1; }
		
		//'or' expression
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//'or'
		public Keyword getOrKeyword_0_5_0() { return cOrKeyword_0_5_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_5_1() { return cExpressionParserRuleCall_0_5_1; }
		
		//'xor' expression
		public Group getGroup_0_6() { return cGroup_0_6; }
		
		//'xor'
		public Keyword getXorKeyword_0_6_0() { return cXorKeyword_0_6_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_6_1() { return cExpressionParserRuleCall_0_6_1; }
		
		//'implies' expression
		public Group getGroup_0_7() { return cGroup_0_7; }
		
		//'implies'
		public Keyword getImpliesKeyword_0_7_0() { return cImpliesKeyword_0_7_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_7_1() { return cExpressionParserRuleCall_0_7_1; }
		
		//recExp=recExpression?
		public Assignment getRecExpAssignment_1() { return cRecExpAssignment_1; }
		
		//recExpression
		public RuleCall getRecExpRecExpressionParserRuleCall_1_0() { return cRecExpRecExpressionParserRuleCall_1_0; }
	}
	public class NavigationSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.navigationSegment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFinalIdentSegmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIdentAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIdentIdentTerminalRuleCall_0_2_0 = (RuleCall)cIdentAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFinalIdentCallSegmentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCallAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCallCallExpParserRuleCall_1_2_0 = (RuleCall)cCallAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFinalCallExpSegmentAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCallAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCallCallExpParserRuleCall_2_2_0 = (RuleCall)cCallAssignment_2_2.eContents().get(0);
		
		//navigationSegment NavigationSegment:
		//	{FinalIdentSegment} '.' ident=Ident | {FinalIdentCallSegment} '.' call=callExp | {FinalCallExpSegment} '->'
		//	call=callExp
		@Override public ParserRule getRule() { return rule; }
		
		//{FinalIdentSegment} '.' ident=Ident | {FinalIdentCallSegment} '.' call=callExp | {FinalCallExpSegment} '->' call=callExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FinalIdentSegment} '.' ident=Ident
		public Group getGroup_0() { return cGroup_0; }
		
		//{FinalIdentSegment}
		public Action getFinalIdentSegmentAction_0_0() { return cFinalIdentSegmentAction_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//ident=Ident
		public Assignment getIdentAssignment_0_2() { return cIdentAssignment_0_2; }
		
		//Ident
		public RuleCall getIdentIdentTerminalRuleCall_0_2_0() { return cIdentIdentTerminalRuleCall_0_2_0; }
		
		//{FinalIdentCallSegment} '.' call=callExp
		public Group getGroup_1() { return cGroup_1; }
		
		//{FinalIdentCallSegment}
		public Action getFinalIdentCallSegmentAction_1_0() { return cFinalIdentCallSegmentAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//call=callExp
		public Assignment getCallAssignment_1_2() { return cCallAssignment_1_2; }
		
		//callExp
		public RuleCall getCallCallExpParserRuleCall_1_2_0() { return cCallCallExpParserRuleCall_1_2_0; }
		
		//{FinalCallExpSegment} '->' call=callExp
		public Group getGroup_2() { return cGroup_2; }
		
		//{FinalCallExpSegment}
		public Action getFinalCallExpSegmentAction_2_0() { return cFinalCallExpSegmentAction_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//call=callExp
		public Assignment getCallAssignment_2_2() { return cCallAssignment_2_2; }
		
		//callExp
		public RuleCall getCallCallExpParserRuleCall_2_2_0() { return cCallCallExpParserRuleCall_2_2_0; }
	}
	public class NonLeftRecExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.nonLeftRecExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cIfKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_5_1_0 = (RuleCall)cConditionAssignment_5_1.eContents().get(0);
		private final Keyword cThenKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cIfBlockAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cIfBlockExpressionParserRuleCall_5_3_0 = (RuleCall)cIfBlockAssignment_5_3.eContents().get(0);
		private final Keyword cElseKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cElseBlockAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cElseBlockExpressionParserRuleCall_5_5_0 = (RuleCall)cElseBlockAssignment_5_5.eContents().get(0);
		private final Keyword cEndifKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLetKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cBindingsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_6_1_0 = (RuleCall)cBindingsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cBindingsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_6_2_1_0 = (RuleCall)cBindingsAssignment_6_2_1.eContents().get(0);
		private final Keyword cInKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cLetExprAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cLetExprExpressionParserRuleCall_6_4_0 = (RuleCall)cLetExprAssignment_6_4.eContents().get(0);
		
		//nonLeftRecExpression:
		//	'not' expression
		//	| '-' expression
		//	| Ident
		//	| literal
		//	| '(' expression ')'
		//	| 'if' condition=expression 'then' ifBlock=expression 'else' elseBlock=expression 'endif'
		//	| 'let' bindings+=binding (',' bindings+=binding)* 'in' letExpr=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' expression | '-' expression | Ident | literal | '(' expression ')' | 'if' condition=expression 'then'
		//ifBlock=expression 'else' elseBlock=expression 'endif' | 'let' bindings+=binding (',' bindings+=binding)* 'in'
		//letExpr=expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'not' expression
		public Group getGroup_0() { return cGroup_0; }
		
		//'not'
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//'-' expression
		public Group getGroup_1() { return cGroup_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_2() { return cIdentTerminalRuleCall_2; }
		
		//literal
		public RuleCall getLiteralParserRuleCall_3() { return cLiteralParserRuleCall_3; }
		
		//'(' expression ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_4_1() { return cExpressionParserRuleCall_4_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//'if' condition=expression 'then' ifBlock=expression 'else' elseBlock=expression 'endif'
		public Group getGroup_5() { return cGroup_5; }
		
		//'if'
		public Keyword getIfKeyword_5_0() { return cIfKeyword_5_0; }
		
		//condition=expression
		public Assignment getConditionAssignment_5_1() { return cConditionAssignment_5_1; }
		
		//expression
		public RuleCall getConditionExpressionParserRuleCall_5_1_0() { return cConditionExpressionParserRuleCall_5_1_0; }
		
		//'then'
		public Keyword getThenKeyword_5_2() { return cThenKeyword_5_2; }
		
		//ifBlock=expression
		public Assignment getIfBlockAssignment_5_3() { return cIfBlockAssignment_5_3; }
		
		//expression
		public RuleCall getIfBlockExpressionParserRuleCall_5_3_0() { return cIfBlockExpressionParserRuleCall_5_3_0; }
		
		//'else'
		public Keyword getElseKeyword_5_4() { return cElseKeyword_5_4; }
		
		//elseBlock=expression
		public Assignment getElseBlockAssignment_5_5() { return cElseBlockAssignment_5_5; }
		
		//expression
		public RuleCall getElseBlockExpressionParserRuleCall_5_5_0() { return cElseBlockExpressionParserRuleCall_5_5_0; }
		
		//'endif'
		public Keyword getEndifKeyword_5_6() { return cEndifKeyword_5_6; }
		
		//'let' bindings+=binding (',' bindings+=binding)* 'in' letExpr=expression
		public Group getGroup_6() { return cGroup_6; }
		
		//'let'
		public Keyword getLetKeyword_6_0() { return cLetKeyword_6_0; }
		
		//bindings+=binding
		public Assignment getBindingsAssignment_6_1() { return cBindingsAssignment_6_1; }
		
		//binding
		public RuleCall getBindingsBindingParserRuleCall_6_1_0() { return cBindingsBindingParserRuleCall_6_1_0; }
		
		//(',' bindings+=binding)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//bindings+=binding
		public Assignment getBindingsAssignment_6_2_1() { return cBindingsAssignment_6_2_1; }
		
		//binding
		public RuleCall getBindingsBindingParserRuleCall_6_2_1_0() { return cBindingsBindingParserRuleCall_6_2_1_0; }
		
		//'in'
		public Keyword getInKeyword_6_3() { return cInKeyword_6_3; }
		
		//letExpr=expression
		public Assignment getLetExprAssignment_6_4() { return cLetExprAssignment_6_4; }
		
		//expression
		public RuleCall getLetExprExpressionParserRuleCall_6_4_0() { return cLetExprExpressionParserRuleCall_6_4_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeLiteralParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//binding:
		//	Ident (':' typeLiteral)? '=' expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Ident (':' typeLiteral)? '=' expression
		public Group getGroup() { return cGroup; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_0() { return cIdentTerminalRuleCall_0; }
		
		//(':' typeLiteral)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//typeLiteral
		public RuleCall getTypeLiteralParserRuleCall_1_1() { return cTypeLiteralParserRuleCall_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }
	}
	public class AddOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.addOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//addOp:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class CompOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.compOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//compOp:
		//	'<='
		//	| '>='
		//	| '!='
		//	| '<>'
		//	| '='
		//	| '=='
		//	| '<'
		//	| '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<=' | '>=' | '!=' | '<>' | '=' | '==' | '<' | '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_2() { return cExclamationMarkEqualsSignKeyword_2; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_3() { return cLessThanSignGreaterThanSignKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_5() { return cEqualsSignEqualsSignKeyword_5; }
		
		//'<'
		public Keyword getLessThanSignKeyword_6() { return cLessThanSignKeyword_6; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class CallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.callExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionIteratorParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cVariableDefinitionParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionSequenceParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//callExp:
		//	collectionIterator '(' variableDefinition expression ')'
		//	| Ident '(' expressionSequence ')';
		@Override public ParserRule getRule() { return rule; }
		
		//collectionIterator '(' variableDefinition expression ')' | Ident '(' expressionSequence ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//collectionIterator '(' variableDefinition expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//collectionIterator
		public RuleCall getCollectionIteratorParserRuleCall_0_0() { return cCollectionIteratorParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//variableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_0_2() { return cVariableDefinitionParserRuleCall_0_2; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_3() { return cExpressionParserRuleCall_0_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//Ident '(' expressionSequence ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_1_0() { return cIdentTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//expressionSequence
		public RuleCall getExpressionSequenceParserRuleCall_1_2() { return cExpressionSequenceParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
<<<<<<< HEAD:org.xtext.example.mydsl/src-gen/org/xtext/example/mydsl/services/MyDslGrammarAccess.java
=======
	public class LambdaExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.lambdaExpression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//lambdaExpression:
		//	expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
>>>>>>> master:org.eclipse.ecoretools.ale.xtext/src-gen/org/eclipse/ecoretools/services/AleGrammarAccess.java
	public class CollectionIteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.collectionIterator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRejectKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCollectKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAnyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExistsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cForAllKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIsUniqueKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOneKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSortedByKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cClosureKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//collectionIterator:
		//	'select' | 'reject' | 'collect' | 'any' | 'exists' | 'forAll' | 'isUnique' | 'one' | 'sortedBy' | 'closure';
		@Override public ParserRule getRule() { return rule; }
		
		//'select' | 'reject' | 'collect' | 'any' | 'exists' | 'forAll' | 'isUnique' | 'one' | 'sortedBy' | 'closure'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//'reject'
		public Keyword getRejectKeyword_1() { return cRejectKeyword_1; }
		
		//'collect'
		public Keyword getCollectKeyword_2() { return cCollectKeyword_2; }
		
		//'any'
		public Keyword getAnyKeyword_3() { return cAnyKeyword_3; }
		
		//'exists'
		public Keyword getExistsKeyword_4() { return cExistsKeyword_4; }
		
		//'forAll'
		public Keyword getForAllKeyword_5() { return cForAllKeyword_5; }
		
		//'isUnique'
		public Keyword getIsUniqueKeyword_6() { return cIsUniqueKeyword_6; }
		
		//'one'
		public Keyword getOneKeyword_7() { return cOneKeyword_7; }
		
		//'sortedBy'
		public Keyword getSortedByKeyword_8() { return cSortedByKeyword_8; }
		
		//'closure'
		public Keyword getClosureKeyword_9() { return cClosureKeyword_9; }
	}
	public class ExpressionSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.expressionSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSeqExprsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSeqExprsExpressionParserRuleCall_0_0 = (RuleCall)cSeqExprsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSeqExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSeqExprsExpressionParserRuleCall_1_1_0 = (RuleCall)cSeqExprsAssignment_1_1.eContents().get(0);
		
		//expressionSequence:
		//	(seqExprs+=expression (',' seqExprs+=expression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(seqExprs+=expression (',' seqExprs+=expression)*)?
		public Group getGroup() { return cGroup; }
		
		//seqExprs+=expression
		public Assignment getSeqExprsAssignment_0() { return cSeqExprsAssignment_0; }
		
		//expression
		public RuleCall getSeqExprsExpressionParserRuleCall_0_0() { return cSeqExprsExpressionParserRuleCall_0_0; }
		
		//(',' seqExprs+=expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//seqExprs+=expression
		public Assignment getSeqExprsAssignment_1_1() { return cSeqExprsAssignment_1_1; }
		
		//expression
		public RuleCall getSeqExprsExpressionParserRuleCall_1_1_0() { return cSeqExprsExpressionParserRuleCall_1_1_0; }
	}
	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.variableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeLiteralParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//variableDefinition:
		//	Ident (':' typeLiteral)? '|';
		@Override public ParserRule getRule() { return rule; }
		
		//Ident (':' typeLiteral)? '|'
		public Group getGroup() { return cGroup; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_0() { return cIdentTerminalRuleCall_0; }
		
		//(':' typeLiteral)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//typeLiteral
		public RuleCall getTypeLiteralParserRuleCall_1_1() { return cTypeLiteralParserRuleCall_1_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cTrueKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFalseKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNullKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cSequenceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cExpressionSequenceParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cOrderedSetKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cExpressionSequenceParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cIdentTerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Keyword cColonColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		private final Keyword cColonColonKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final RuleCall cIdentTerminalRuleCall_8_4 = (RuleCall)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cIdentTerminalRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Keyword cColonColonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		private final Keyword cColonKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final RuleCall cTypeLiteralParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//literal:
		//	STRING
		//	| INT
		//	| Real
		//	| 'true'
		//	| 'false'
		//	| 'null'
		//	| 'Sequence{' expressionSequence '}'
		//	| 'OrderedSet{' expressionSequence '}'
		//	| Ident '::' Ident '::' Ident
		//	| Ident '::' Ident ':'
		//	| typeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | INT | Real | 'true' | 'false' | 'null' | 'Sequence{' expressionSequence '}' | 'OrderedSet{' expressionSequence
		//'}' | Ident '::' Ident '::' Ident | Ident '::' Ident ':' | typeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//Real
		public RuleCall getRealTerminalRuleCall_2() { return cRealTerminalRuleCall_2; }
		
		//'true'
		public Keyword getTrueKeyword_3() { return cTrueKeyword_3; }
		
		//'false'
		public Keyword getFalseKeyword_4() { return cFalseKeyword_4; }
		
		//'null'
		public Keyword getNullKeyword_5() { return cNullKeyword_5; }
		
		//'Sequence{' expressionSequence '}'
		public Group getGroup_6() { return cGroup_6; }
		
		//'Sequence{'
		public Keyword getSequenceKeyword_6_0() { return cSequenceKeyword_6_0; }
		
		//expressionSequence
		public RuleCall getExpressionSequenceParserRuleCall_6_1() { return cExpressionSequenceParserRuleCall_6_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
		
		//'OrderedSet{' expressionSequence '}'
		public Group getGroup_7() { return cGroup_7; }
		
		//'OrderedSet{'
		public Keyword getOrderedSetKeyword_7_0() { return cOrderedSetKeyword_7_0; }
		
		//expressionSequence
		public RuleCall getExpressionSequenceParserRuleCall_7_1() { return cExpressionSequenceParserRuleCall_7_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_2() { return cRightCurlyBracketKeyword_7_2; }
		
		//Ident '::' Ident '::' Ident
		public Group getGroup_8() { return cGroup_8; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_8_0() { return cIdentTerminalRuleCall_8_0; }
		
		//'::'
		public Keyword getColonColonKeyword_8_1() { return cColonColonKeyword_8_1; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_8_2() { return cIdentTerminalRuleCall_8_2; }
		
		//'::'
		public Keyword getColonColonKeyword_8_3() { return cColonColonKeyword_8_3; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_8_4() { return cIdentTerminalRuleCall_8_4; }
		
		//Ident '::' Ident ':'
		public Group getGroup_9() { return cGroup_9; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_9_0() { return cIdentTerminalRuleCall_9_0; }
		
		//'::'
		public Keyword getColonColonKeyword_9_1() { return cColonColonKeyword_9_1; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_9_2() { return cIdentTerminalRuleCall_9_2; }
		
		//':'
		public Keyword getColonKeyword_9_3() { return cColonKeyword_9_3; }
		
		//typeLiteral
		public RuleCall getTypeLiteralParserRuleCall_10() { return cTypeLiteralParserRuleCall_10; }
	}
	public class TypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.typeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cSequenceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cTypeLiteralParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cOrderedSetKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cTypeLiteralParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cClassifierTypeRuleParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cClassifierTypeRuleParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cVerticalLineKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final RuleCall cClassifierTypeRuleParserRuleCall_7_2_1 = (RuleCall)cGroup_7_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//typeLiteral:
		//	'String'
		//	| 'Integer'
		//	| 'Real'
		//	| 'Boolean'
		//	| 'Sequence(' typeLiteral ')'
		//	| 'OrderedSet(' typeLiteral ')'
		//	| classifierTypeRule
		//	| '{' classifierTypeRule ('|' classifierTypeRule)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'String' | 'Integer' | 'Real' | 'Boolean' | 'Sequence(' typeLiteral ')' | 'OrderedSet(' typeLiteral ')' |
		//classifierTypeRule | '{' classifierTypeRule ('|' classifierTypeRule)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//'Real'
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }
		
		//'Sequence(' typeLiteral ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'Sequence('
		public Keyword getSequenceKeyword_4_0() { return cSequenceKeyword_4_0; }
		
		//typeLiteral
		public RuleCall getTypeLiteralParserRuleCall_4_1() { return cTypeLiteralParserRuleCall_4_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//'OrderedSet(' typeLiteral ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'OrderedSet('
		public Keyword getOrderedSetKeyword_5_0() { return cOrderedSetKeyword_5_0; }
		
		//typeLiteral
		public RuleCall getTypeLiteralParserRuleCall_5_1() { return cTypeLiteralParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//classifierTypeRule
		public RuleCall getClassifierTypeRuleParserRuleCall_6() { return cClassifierTypeRuleParserRuleCall_6; }
		
		//'{' classifierTypeRule ('|' classifierTypeRule)* '}'
		public Group getGroup_7() { return cGroup_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }
		
		//classifierTypeRule
		public RuleCall getClassifierTypeRuleParserRuleCall_7_1() { return cClassifierTypeRuleParserRuleCall_7_1; }
		
		//('|' classifierTypeRule)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_7_2_0() { return cVerticalLineKeyword_7_2_0; }
		
		//classifierTypeRule
		public RuleCall getClassifierTypeRuleParserRuleCall_7_2_1() { return cClassifierTypeRuleParserRuleCall_7_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class ClassifierTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.classifierTypeRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIdentTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//classifierTypeRule:
		//	Ident '::' Ident
		//	| Ident ':';
		@Override public ParserRule getRule() { return rule; }
		
		//Ident '::' Ident | Ident ':'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ident '::' Ident
		public Group getGroup_0() { return cGroup_0; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_0_0() { return cIdentTerminalRuleCall_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_0_2() { return cIdentTerminalRuleCall_0_2; }
		
		//Ident ':'
		public Group getGroup_1() { return cGroup_1; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_1_0() { return cIdentTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
	}
	public class RTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRQualifiedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rType:
		//	rQualified | typeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//rQualified | typeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//rQualified
		public RuleCall getRQualifiedParserRuleCall_0() { return cRQualifiedParserRuleCall_0; }
		
		//typeLiteral
		public RuleCall getTypeLiteralParserRuleCall_1() { return cTypeLiteralParserRuleCall_1; }
	}
	public class RQualifiedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.rQualified");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIdentTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//rQualified:
		//	Ident ('.' Ident)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Ident ('.' Ident)*
		public Group getGroup() { return cGroup; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_0() { return cIdentTerminalRuleCall_0; }
		
		//('.' Ident)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//Ident
		public RuleCall getIdentTerminalRuleCall_1_1() { return cIdentTerminalRuleCall_1_1; }
	}
	
	
	private final RRootElements pRRoot;
	private final RImportElements pRImport;
	private final RServiceElements pRService;
	private final RClassElements pRClass;
	private final ROpenClassElements pROpenClass;
	private final RNewClassElements pRNewClass;
	private final ROperationElements pROperation;
	private final RTagElements pRTag;
	private final RParametersElements pRParameters;
	private final RVariableElements pRVariable;
	private final RAttributeElements pRAttribute;
	private final RStatementElements pRStatement;
	private final RVarDeclElements pRVarDecl;
	private final RAssignElements pRAssign;
	private final RForEachElements pRForEach;
	private final RCollectionElements pRCollection;
	private final RBlockElements pRBlock;
	private final RIfElements pRIf;
	private final RWhileElements pRWhile;
	private final RExpressionElements pRExpression;
	private final ExpressionElements pExpression;
	private final RecExpressionElements pRecExpression;
	private final NavigationSegmentElements pNavigationSegment;
	private final NonLeftRecExpressionElements pNonLeftRecExpression;
	private final BindingElements pBinding;
	private final AddOpElements pAddOp;
	private final CompOpElements pCompOp;
	private final CallExpElements pCallExp;
	private final CollectionIteratorElements pCollectionIterator;
	private final ExpressionSequenceElements pExpressionSequence;
	private final VariableDefinitionElements pVariableDefinition;
	private final LiteralElements pLiteral;
	private final TypeLiteralElements pTypeLiteral;
	private final ClassifierTypeRuleElements pClassifierTypeRule;
	private final RTypeElements pRType;
	private final RQualifiedElements pRQualified;
	private final TerminalRule tMultOp;
	private final TerminalRule tReal;
	private final TerminalRule tIdent;
	private final TerminalRule tLetter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRRoot = new RRootElements();
		this.pRImport = new RImportElements();
		this.pRService = new RServiceElements();
		this.pRClass = new RClassElements();
		this.pROpenClass = new ROpenClassElements();
		this.pRNewClass = new RNewClassElements();
		this.pROperation = new ROperationElements();
		this.pRTag = new RTagElements();
		this.pRParameters = new RParametersElements();
		this.pRVariable = new RVariableElements();
		this.pRAttribute = new RAttributeElements();
		this.pRStatement = new RStatementElements();
		this.pRVarDecl = new RVarDeclElements();
		this.pRAssign = new RAssignElements();
		this.pRForEach = new RForEachElements();
		this.pRCollection = new RCollectionElements();
		this.pRBlock = new RBlockElements();
		this.pRIf = new RIfElements();
		this.pRWhile = new RWhileElements();
		this.pRExpression = new RExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pRecExpression = new RecExpressionElements();
		this.pNavigationSegment = new NavigationSegmentElements();
		this.pNonLeftRecExpression = new NonLeftRecExpressionElements();
		this.pBinding = new BindingElements();
		this.pAddOp = new AddOpElements();
		this.pCompOp = new CompOpElements();
		this.pCallExp = new CallExpElements();
		this.pCollectionIterator = new CollectionIteratorElements();
		this.pExpressionSequence = new ExpressionSequenceElements();
		this.pVariableDefinition = new VariableDefinitionElements();
		this.pLiteral = new LiteralElements();
		this.pTypeLiteral = new TypeLiteralElements();
		this.pClassifierTypeRule = new ClassifierTypeRuleElements();
		this.pRType = new RTypeElements();
		this.pRQualified = new RQualifiedElements();
		this.tMultOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.MultOp");
		this.tReal = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.Real");
		this.tIdent = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.Ident");
		this.tLetter = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.ecoretools.Ale.Letter");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.ecoretools.Ale".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *****************
<<<<<<< HEAD:org.xtext.example.mydsl/src-gen/org/xtext/example/mydsl/services/MyDslGrammarAccess.java
	// * AQL++ grammar *
	// ***************** / rRoot RRoot:
	//	'behavior' rQualified ';' rImport* rService* xtendedClasses+=rClass*
=======
	// *  ALE grammar  *
	// ***************** / rRoot:
	//	'behavior' rQualified ';' rImport* rService* xtendedClasses+=rClass*;
>>>>>>> master:org.eclipse.ecoretools.ale.xtext/src-gen/org/eclipse/ecoretools/services/AleGrammarAccess.java
	public RRootElements getRRootAccess() {
		return pRRoot;
	}
	
	public ParserRule getRRootRule() {
		return getRRootAccess().getRule();
	}
	
	//rImport:
	//	'import' rQualified 'as' Ident ';';
	public RImportElements getRImportAccess() {
		return pRImport;
	}
	
	public ParserRule getRImportRule() {
		return getRImportAccess().getRule();
	}
	
	//rService:
	//	'use' Ident ('.' Ident)* ';';
	public RServiceElements getRServiceAccess() {
		return pRService;
	}
	
	public ParserRule getRServiceRule() {
		return getRServiceAccess().getRule();
	}
	
	//rClass RClass:
	//	{ROpenClass} openClass=rOpenClass | {RNewClass} newClass=rNewClass
	public RClassElements getRClassAccess() {
		return pRClass;
	}
	
	public ParserRule getRClassRule() {
		return getRClassAccess().getRule();
	}
	
	//rOpenClass ROpenClass:
	//	'open' 'class' name=rQualified ('extends' rQualified (',' rQualified)*)? '{' attributes+=rAttribute*
	//	operations+=rOperation* '}'
	public ROpenClassElements getROpenClassAccess() {
		return pROpenClass;
	}
	
	public ParserRule getROpenClassRule() {
		return getROpenClassAccess().getRule();
	}
	
	//rNewClass RNewClass:
	//	'class' name=rQualified '{' attributes+=rAttribute* operations+=rOperation* '}'
	public RNewClassElements getRNewClassAccess() {
		return pRNewClass;
	}
	
	public ParserRule getRNewClassRule() {
		return getRNewClassAccess().getRule();
	}
	
	//rOperation:
	//	rTag* ('def' | 'override') type=rType name=Ident '(' paramList+=rParameters? ')' body=rBlock;
	public ROperationElements getROperationAccess() {
		return pROperation;
	}
	
	public ParserRule getROperationRule() {
		return getROperationAccess().getRule();
	}
	
	//rTag:
	//	'@' Ident;
	public RTagElements getRTagAccess() {
		return pRTag;
	}
	
	public ParserRule getRTagRule() {
		return getRTagAccess().getRule();
	}
	
	//rParameters:
	//	params+=rVariable (',' params+=rVariable)*;
	public RParametersElements getRParametersAccess() {
		return pRParameters;
	}
	
	public ParserRule getRParametersRule() {
		return getRParametersAccess().getRule();
	}
	
	//rVariable:
	//	type=rType name=Ident;
	public RVariableElements getRVariableAccess() {
		return pRVariable;
	}
	
	public ParserRule getRVariableRule() {
		return getRVariableAccess().getRule();
	}
	
	//rAttribute:
	//	type=rType name=Ident (':=' expr=expression)? ';';
	public RAttributeElements getRAttributeAccess() {
		return pRAttribute;
	}
	
	public ParserRule getRAttributeRule() {
		return getRAttributeAccess().getRule();
	}
	
	//rStatement RStatement:
	//	{RValDecl} stmt=rVarDecl | {RAssign} stmt=rAssign | {RForEach} forEach=rForEach | {RWhile} while=rWhile | {RIf} if=rIf
	//	| {RExpression} expr=rExpression
	public RStatementElements getRStatementAccess() {
		return pRStatement;
	}
	
	public ParserRule getRStatementRule() {
		return getRStatementAccess().getRule();
	}
	
	//rVarDecl:
	//	rType Ident (':=' expression)? ';';
	public RVarDeclElements getRVarDeclAccess() {
		return pRVarDecl;
	}
	
	public ParserRule getRVarDeclRule() {
		return getRVarDeclAccess().getRule();
	}
	
	//rAssign RAssign:
	//	left=expression ':=' right=expression ';'
	public RAssignElements getRAssignAccess() {
		return pRAssign;
	}
	
	public ParserRule getRAssignRule() {
		return getRAssignAccess().getRule();
	}
	
	//rForEach RForEach:
	//	'for' '(' Ident 'in' rCollection ')' block=rBlock
	public RForEachElements getRForEachAccess() {
		return pRForEach;
	}
	
	public ParserRule getRForEachRule() {
		return getRForEachAccess().getRule();
	}
	
	//rCollection:
	//	'[' INT '..' INT ']' | expression;
	public RCollectionElements getRCollectionAccess() {
		return pRCollection;
	}
	
	public ParserRule getRCollectionRule() {
		return getRCollectionAccess().getRule();
	}
	
	//rBlock:
	//	'{' (statement+=rStatement statement+=rStatement*)? '}';
	public RBlockElements getRBlockAccess() {
		return pRBlock;
	}
	
	public ParserRule getRBlockRule() {
		return getRBlockAccess().getRule();
	}
	
	//rIf RIf:
	//	'if' '(' condition=expression ')' ifBlock=rBlock ('else' elseBlock=rBlock)?
	public RIfElements getRIfAccess() {
		return pRIf;
	}
	
	public ParserRule getRIfRule() {
		return getRIfAccess().getRule();
	}
	
	//rWhile RWhile:
	//	'while' '(' expression ')' block=rBlock
	public RWhileElements getRWhileAccess() {
		return pRWhile;
	}
	
	public ParserRule getRWhileRule() {
		return getRWhileAccess().getRule();
	}
	
	//rExpression RExpression:
	//	expression ';'
	public RExpressionElements getRExpressionAccess() {
		return pRExpression;
	}
	
	public ParserRule getRExpressionRule() {
		return getRExpressionAccess().getRule();
	}
	
	/// ***************
	// * AQL grammar *
	// *************** / expression Expr:
	//	leftPart=nonLeftRecExpression recpart=recExpression?
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//recExpression RecExpression:
	//	(navigationSegment | MultOp expression | addOp expression | compOp expression | 'and' expression | 'or' expression |
	//	'xor' expression | 'implies' expression) recExp=recExpression?
	public RecExpressionElements getRecExpressionAccess() {
		return pRecExpression;
	}
	
	public ParserRule getRecExpressionRule() {
		return getRecExpressionAccess().getRule();
	}
	
	//navigationSegment NavigationSegment:
	//	{FinalIdentSegment} '.' ident=Ident | {FinalIdentCallSegment} '.' call=callExp | {FinalCallExpSegment} '->'
	//	call=callExp
	public NavigationSegmentElements getNavigationSegmentAccess() {
		return pNavigationSegment;
	}
	
	public ParserRule getNavigationSegmentRule() {
		return getNavigationSegmentAccess().getRule();
	}
	
	//nonLeftRecExpression:
	//	'not' expression
	//	| '-' expression
	//	| Ident
	//	| literal
	//	| '(' expression ')'
	//	| 'if' condition=expression 'then' ifBlock=expression 'else' elseBlock=expression 'endif'
	//	| 'let' bindings+=binding (',' bindings+=binding)* 'in' letExpr=expression;
	public NonLeftRecExpressionElements getNonLeftRecExpressionAccess() {
		return pNonLeftRecExpression;
	}
	
	public ParserRule getNonLeftRecExpressionRule() {
		return getNonLeftRecExpressionAccess().getRule();
	}
	
	//binding:
	//	Ident (':' typeLiteral)? '=' expression;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//addOp:
	//	'+' | '-';
	public AddOpElements getAddOpAccess() {
		return pAddOp;
	}
	
	public ParserRule getAddOpRule() {
		return getAddOpAccess().getRule();
	}
	
	//compOp:
	//	'<='
	//	| '>='
	//	| '!='
	//	| '<>'
	//	| '='
	//	| '=='
	//	| '<'
	//	| '>';
	public CompOpElements getCompOpAccess() {
		return pCompOp;
	}
	
	public ParserRule getCompOpRule() {
		return getCompOpAccess().getRule();
	}
	
	//callExp:
	//	collectionIterator '(' variableDefinition expression ')'
	//	| Ident '(' expressionSequence ')';
	public CallExpElements getCallExpAccess() {
		return pCallExp;
	}
	
	public ParserRule getCallExpRule() {
		return getCallExpAccess().getRule();
	}
	
	//collectionIterator:
	//	'select' | 'reject' | 'collect' | 'any' | 'exists' | 'forAll' | 'isUnique' | 'one' | 'sortedBy' | 'closure';
	public CollectionIteratorElements getCollectionIteratorAccess() {
		return pCollectionIterator;
	}
	
	public ParserRule getCollectionIteratorRule() {
		return getCollectionIteratorAccess().getRule();
	}
	
	//expressionSequence:
	//	(seqExprs+=expression (',' seqExprs+=expression)*)?;
	public ExpressionSequenceElements getExpressionSequenceAccess() {
		return pExpressionSequence;
	}
	
	public ParserRule getExpressionSequenceRule() {
		return getExpressionSequenceAccess().getRule();
	}
	
	//variableDefinition:
	//	Ident (':' typeLiteral)? '|';
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return pVariableDefinition;
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}
	
	//literal:
	//	STRING
	//	| INT
	//	| Real
	//	| 'true'
	//	| 'false'
	//	| 'null'
	//	| 'Sequence{' expressionSequence '}'
	//	| 'OrderedSet{' expressionSequence '}'
	//	| Ident '::' Ident '::' Ident
	//	| Ident '::' Ident ':'
	//	| typeLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//typeLiteral:
	//	'String'
	//	| 'Integer'
	//	| 'Real'
	//	| 'Boolean'
	//	| 'Sequence(' typeLiteral ')'
	//	| 'OrderedSet(' typeLiteral ')'
	//	| classifierTypeRule
	//	| '{' classifierTypeRule ('|' classifierTypeRule)* '}';
	public TypeLiteralElements getTypeLiteralAccess() {
		return pTypeLiteral;
	}
	
	public ParserRule getTypeLiteralRule() {
		return getTypeLiteralAccess().getRule();
	}
	
	//classifierTypeRule:
	//	Ident '::' Ident
	//	| Ident ':';
	public ClassifierTypeRuleElements getClassifierTypeRuleAccess() {
		return pClassifierTypeRule;
	}
	
	public ParserRule getClassifierTypeRuleRule() {
		return getClassifierTypeRuleAccess().getRule();
	}
	
	//rType:
	//	rQualified | typeLiteral;
	public RTypeElements getRTypeAccess() {
		return pRType;
	}
	
	public ParserRule getRTypeRule() {
		return getRTypeAccess().getRule();
	}
	
	//rQualified:
	//	Ident ('.' Ident)*;
	public RQualifiedElements getRQualifiedAccess() {
		return pRQualified;
	}
	
	public ParserRule getRQualifiedRule() {
		return getRQualifiedAccess().getRule();
	}
	
	//terminal MultOp:
	//	'*' | '/';
	public TerminalRule getMultOpRule() {
		return tMultOp;
	}
	
	//terminal Real:
	//	'0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getRealRule() {
		return tReal;
	}
	
	//terminal Ident:
	//	(Letter | '_') (Letter | '0'..'9' | '_')*;
	public TerminalRule getIdentRule() {
		return tIdent;
	}
	
	//terminal Letter:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getLetterRule() {
		return tLetter;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
