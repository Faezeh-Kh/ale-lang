/*
 * generated by Xtext 2.10.0
 */
grammar InternalAle;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.eclipse.ecoretools.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.ecoretools.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.ecoretools.services.AleGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private AleGrammarAccess grammarAccess;

    public InternalAleParser(TokenStream input, AleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "rRoot";
   	}

   	@Override
   	protected AleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulerRoot
entryRulerRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRRootRule()); }
	iv_rulerRoot=rulerRoot
	{ $current=$iv_rulerRoot.current; }
	EOF;

// Rule rRoot
rulerRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='behavior'
		{
			newLeafNode(otherlv_0, grammarAccess.getRRootAccess().getBehaviorKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRRootAccess().getRQualifiedParserRuleCall_1());
		}
		rulerQualified
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRRootAccess().getSemicolonKeyword_2());
		}
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getRRootAccess().getRImportParserRuleCall_3());
			}
			rulerImport
			{
				afterParserOrEnumRuleCall();
			}
		)*
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getRRootAccess().getRServiceParserRuleCall_4());
			}
			rulerService
			{
				afterParserOrEnumRuleCall();
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRRootAccess().getXtendedClassesRClassParserRuleCall_5_0());
				}
				lv_xtendedClasses_5_0=rulerClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRRootRule());
					}
					add(
						$current,
						"xtendedClasses",
						lv_xtendedClasses_5_0,
						"org.eclipse.ecoretools.Ale.rClass");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulerImport
entryRulerImport returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRImportRule()); }
	iv_rulerImport=rulerImport
	{ $current=$iv_rulerImport.current.getText(); }
	EOF;

// Rule rImport
rulerImport returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportAccess().getImportKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getRImportAccess().getRQualifiedParserRuleCall_1());
		}
		this_rQualified_1=rulerQualified
		{
			$current.merge(this_rQualified_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='as'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportAccess().getAsKeyword_2());
		}
		this_Ident_3=RULE_IDENT
		{
			$current.merge(this_Ident_3);
		}
		{
			newLeafNode(this_Ident_3, grammarAccess.getRImportAccess().getIdentTerminalRuleCall_3());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRImportAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRulerService
entryRulerService returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRServiceRule()); }
	iv_rulerService=rulerService
	{ $current=$iv_rulerService.current.getText(); }
	EOF;

// Rule rService
rulerService returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='use'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRServiceAccess().getUseKeyword_0());
		}
		this_Ident_1=RULE_IDENT
		{
			$current.merge(this_Ident_1);
		}
		{
			newLeafNode(this_Ident_1, grammarAccess.getRServiceAccess().getIdentTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRServiceAccess().getFullStopKeyword_2_0());
			}
			this_Ident_3=RULE_IDENT
			{
				$current.merge(this_Ident_3);
			}
			{
				newLeafNode(this_Ident_3, grammarAccess.getRServiceAccess().getIdentTerminalRuleCall_2_1());
			}
		)*
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRServiceAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulerClass
entryRulerClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRClassRule()); }
	iv_rulerClass=rulerClass
	{ $current=$iv_rulerClass.current; }
	EOF;

// Rule rClass
rulerClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRClassAccess().getROpenClassAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRClassAccess().getOpenClassROpenClassParserRuleCall_0_1_0());
					}
					lv_openClass_1_0=rulerOpenClass
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRClassRule());
						}
						set(
							$current,
							"openClass",
							lv_openClass_1_0,
							"org.eclipse.ecoretools.Ale.rOpenClass");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRClassAccess().getRNewClassAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRClassAccess().getNewClassRNewClassParserRuleCall_1_1_0());
					}
					lv_newClass_3_0=rulerNewClass
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRClassRule());
						}
						set(
							$current,
							"newClass",
							lv_newClass_3_0,
							"org.eclipse.ecoretools.Ale.rNewClass");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulerOpenClass
entryRulerOpenClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getROpenClassRule()); }
	iv_rulerOpenClass=rulerOpenClass
	{ $current=$iv_rulerOpenClass.current; }
	EOF;

// Rule rOpenClass
rulerOpenClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='open'
		{
			newLeafNode(otherlv_0, grammarAccess.getROpenClassAccess().getOpenKeyword_0());
		}
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getROpenClassAccess().getClassKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getROpenClassAccess().getNameRQualifiedParserRuleCall_2_0());
				}
				lv_name_2_0=rulerQualified
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getROpenClassRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.ecoretools.Ale.rQualified");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getROpenClassAccess().getExtendsKeyword_3_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getROpenClassAccess().getRQualifiedParserRuleCall_3_1());
			}
			rulerQualified
			{
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getROpenClassAccess().getCommaKeyword_3_2_0());
				}
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getROpenClassAccess().getRQualifiedParserRuleCall_3_2_1());
				}
				rulerQualified
				{
					afterParserOrEnumRuleCall();
				}
			)*
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getROpenClassAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getROpenClassAccess().getAttributesRAttributeParserRuleCall_5_0());
				}
				lv_attributes_8_0=rulerAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getROpenClassRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_8_0,
						"org.eclipse.ecoretools.Ale.rAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getROpenClassAccess().getOperationsROperationParserRuleCall_6_0());
				}
				lv_operations_9_0=rulerOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getROpenClassRule());
					}
					add(
						$current,
						"operations",
						lv_operations_9_0,
						"org.eclipse.ecoretools.Ale.rOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getROpenClassAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRulerNewClass
entryRulerNewClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRNewClassRule()); }
	iv_rulerNewClass=rulerNewClass
	{ $current=$iv_rulerNewClass.current; }
	EOF;

// Rule rNewClass
rulerNewClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getRNewClassAccess().getClassKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRNewClassAccess().getNameRQualifiedParserRuleCall_1_0());
				}
				lv_name_1_0=rulerQualified
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRNewClassRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.ecoretools.Ale.rQualified");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRNewClassAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRNewClassAccess().getAttributesRAttributeParserRuleCall_3_0());
				}
				lv_attributes_3_0=rulerAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRNewClassRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_3_0,
						"org.eclipse.ecoretools.Ale.rAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRNewClassAccess().getOperationsROperationParserRuleCall_4_0());
				}
				lv_operations_4_0=rulerOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRNewClassRule());
					}
					add(
						$current,
						"operations",
						lv_operations_4_0,
						"org.eclipse.ecoretools.Ale.rOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getRNewClassAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRulerOperation
entryRulerOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getROperationRule()); }
	iv_rulerOperation=rulerOperation
	{ $current=$iv_rulerOperation.current; }
	EOF;

// Rule rOperation
rulerOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getROperationAccess().getRTagParserRuleCall_0());
			}
			rulerTag
			{
				afterParserOrEnumRuleCall();
			}
		)*
		(
			otherlv_1='def'
			{
				newLeafNode(otherlv_1, grammarAccess.getROperationAccess().getDefKeyword_1_0());
			}
			    |
			otherlv_2='override'
			{
				newLeafNode(otherlv_2, grammarAccess.getROperationAccess().getOverrideKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getROperationAccess().getTypeRTypeParserRuleCall_2_0());
				}
				lv_type_3_0=rulerType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getROperationRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.eclipse.ecoretools.Ale.rType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_4_0=RULE_IDENT
				{
					newLeafNode(lv_name_4_0, grammarAccess.getROperationAccess().getNameIdentTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getROperationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.ecoretools.Ale.Ident");
				}
			)
		)
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getROperationAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getROperationAccess().getParamListRParametersParserRuleCall_5_0());
				}
				lv_paramList_6_0=rulerParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getROperationRule());
					}
					add(
						$current,
						"paramList",
						lv_paramList_6_0,
						"org.eclipse.ecoretools.Ale.rParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getROperationAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getROperationAccess().getBodyRBlockParserRuleCall_7_0());
				}
				lv_body_8_0=rulerBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getROperationRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"org.eclipse.ecoretools.Ale.rBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulerTag
entryRulerTag returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRTagRule()); }
	iv_rulerTag=rulerTag
	{ $current=$iv_rulerTag.current.getText(); }
	EOF;

// Rule rTag
rulerTag returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='@'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRTagAccess().getCommercialAtKeyword_0());
		}
		this_Ident_1=RULE_IDENT
		{
			$current.merge(this_Ident_1);
		}
		{
			newLeafNode(this_Ident_1, grammarAccess.getRTagAccess().getIdentTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulerParameters
entryRulerParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRParametersRule()); }
	iv_rulerParameters=rulerParameters
	{ $current=$iv_rulerParameters.current; }
	EOF;

// Rule rParameters
rulerParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_0_0());
				}
				lv_params_0_0=rulerVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRParametersRule());
					}
					add(
						$current,
						"params",
						lv_params_0_0,
						"org.eclipse.ecoretools.Ale.rVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getRParametersAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRParametersAccess().getParamsRVariableParserRuleCall_1_1_0());
					}
					lv_params_2_0=rulerVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRParametersRule());
						}
						add(
							$current,
							"params",
							lv_params_2_0,
							"org.eclipse.ecoretools.Ale.rVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulerVariable
entryRulerVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRVariableRule()); }
	iv_rulerVariable=rulerVariable
	{ $current=$iv_rulerVariable.current; }
	EOF;

// Rule rVariable
rulerVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRVariableAccess().getTypeRTypeParserRuleCall_0_0());
				}
				lv_type_0_0=rulerType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.ecoretools.Ale.rType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRVariableAccess().getNameIdentTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.ecoretools.Ale.Ident");
				}
			)
		)
	)
;

// Entry rule entryRulerAttribute
entryRulerAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRAttributeRule()); }
	iv_rulerAttribute=rulerAttribute
	{ $current=$iv_rulerAttribute.current; }
	EOF;

// Rule rAttribute
rulerAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRAttributeAccess().getTypeRTypeParserRuleCall_0_0());
				}
				lv_type_0_0=rulerType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.ecoretools.Ale.rType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRAttributeAccess().getNameIdentTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.ecoretools.Ale.Ident");
				}
			)
		)
		(
			otherlv_2=':='
			{
				newLeafNode(otherlv_2, grammarAccess.getRAttributeAccess().getColonEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRAttributeAccess().getExprExpressionParserRuleCall_2_1_0());
					}
					lv_expr_3_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRAttributeRule());
						}
						set(
							$current,
							"expr",
							lv_expr_3_0,
							"org.eclipse.ecoretools.Ale.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRAttributeAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulerStatement
entryRulerStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRStatementRule()); }
	iv_rulerStatement=rulerStatement
	{ $current=$iv_rulerStatement.current; }
	EOF;

// Rule rStatement
rulerStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRStatementAccess().getRValDeclAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRStatementAccess().getStmtRVarDeclParserRuleCall_0_1_0());
					}
					lv_stmt_1_0=rulerVarDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRStatementRule());
						}
						set(
							$current,
							"stmt",
							lv_stmt_1_0,
							"org.eclipse.ecoretools.Ale.rVarDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRStatementAccess().getRAssignAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRStatementAccess().getStmtRAssignParserRuleCall_1_1_0());
					}
					lv_stmt_3_0=rulerAssign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRStatementRule());
						}
						set(
							$current,
							"stmt",
							lv_stmt_3_0,
							"org.eclipse.ecoretools.Ale.rAssign");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRStatementAccess().getRForEachAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRStatementAccess().getForEachRForEachParserRuleCall_2_1_0());
					}
					lv_forEach_5_0=rulerForEach
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRStatementRule());
						}
						set(
							$current,
							"forEach",
							lv_forEach_5_0,
							"org.eclipse.ecoretools.Ale.rForEach");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRStatementAccess().getRWhileAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRStatementAccess().getWhileRWhileParserRuleCall_3_1_0());
					}
					lv_while_7_0=rulerWhile
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRStatementRule());
						}
						set(
							$current,
							"while",
							lv_while_7_0,
							"org.eclipse.ecoretools.Ale.rWhile");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRStatementAccess().getRIfAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRStatementAccess().getIfRIfParserRuleCall_4_1_0());
					}
					lv_if_9_0=rulerIf
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRStatementRule());
						}
						set(
							$current,
							"if",
							lv_if_9_0,
							"org.eclipse.ecoretools.Ale.rIf");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRStatementAccess().getRExpressionAction_5_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRStatementAccess().getExprRExpressionParserRuleCall_5_1_0());
					}
					lv_expr_11_0=rulerExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRStatementRule());
						}
						set(
							$current,
							"expr",
							lv_expr_11_0,
							"org.eclipse.ecoretools.Ale.rExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulerVarDecl
entryRulerVarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRVarDeclRule()); }
	iv_rulerVarDecl=rulerVarDecl
	{ $current=$iv_rulerVarDecl.current; }
	EOF;

// Rule rVarDecl
rulerVarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRVarDeclAccess().getRTypeParserRuleCall_0());
		}
		rulerType
		{
			afterParserOrEnumRuleCall();
		}
		this_Ident_1=RULE_IDENT
		{
			newLeafNode(this_Ident_1, grammarAccess.getRVarDeclAccess().getIdentTerminalRuleCall_1());
		}
		(
			otherlv_2=':='
			{
				newLeafNode(otherlv_2, grammarAccess.getRVarDeclAccess().getColonEqualsSignKeyword_2_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getRVarDeclAccess().getExpressionParserRuleCall_2_1());
			}
			this_expression_3=ruleexpression
			{
				$current = $this_expression_3.current;
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRVarDeclAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulerAssign
entryRulerAssign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRAssignRule()); }
	iv_rulerAssign=rulerAssign
	{ $current=$iv_rulerAssign.current; }
	EOF;

// Rule rAssign
rulerAssign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRAssignAccess().getLeftExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRAssignRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.eclipse.ecoretools.Ale.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getRAssignAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRAssignAccess().getRightExpressionParserRuleCall_2_0());
				}
				lv_right_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRAssignRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"org.eclipse.ecoretools.Ale.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getRAssignAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulerForEach
entryRulerForEach returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRForEachRule()); }
	iv_rulerForEach=rulerForEach
	{ $current=$iv_rulerForEach.current; }
	EOF;

// Rule rForEach
rulerForEach returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getRForEachAccess().getForKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRForEachAccess().getLeftParenthesisKeyword_1());
		}
		this_Ident_2=RULE_IDENT
		{
			newLeafNode(this_Ident_2, grammarAccess.getRForEachAccess().getIdentTerminalRuleCall_2());
		}
		otherlv_3='in'
		{
			newLeafNode(otherlv_3, grammarAccess.getRForEachAccess().getInKeyword_3());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRForEachAccess().getRCollectionParserRuleCall_4());
		}
		this_rCollection_4=rulerCollection
		{
			$current = $this_rCollection_4.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRForEachAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRForEachAccess().getBlockRBlockParserRuleCall_6_0());
				}
				lv_block_6_0=rulerBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRForEachRule());
					}
					set(
						$current,
						"block",
						lv_block_6_0,
						"org.eclipse.ecoretools.Ale.rBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulerCollection
entryRulerCollection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRCollectionRule()); }
	iv_rulerCollection=rulerCollection
	{ $current=$iv_rulerCollection.current; }
	EOF;

// Rule rCollection
rulerCollection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getRCollectionAccess().getLeftSquareBracketKeyword_0_0());
			}
			this_INT_1=RULE_INT
			{
				newLeafNode(this_INT_1, grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_1());
			}
			otherlv_2='..'
			{
				newLeafNode(otherlv_2, grammarAccess.getRCollectionAccess().getFullStopFullStopKeyword_0_2());
			}
			this_INT_3=RULE_INT
			{
				newLeafNode(this_INT_3, grammarAccess.getRCollectionAccess().getINTTerminalRuleCall_0_3());
			}
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getRCollectionAccess().getRightSquareBracketKeyword_0_4());
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRCollectionAccess().getExpressionParserRuleCall_1());
		}
		this_expression_5=ruleexpression
		{
			$current = $this_expression_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerBlock
entryRulerBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRBlockRule()); }
	iv_rulerBlock=rulerBlock
	{ $current=$iv_rulerBlock.current; }
	EOF;

// Rule rBlock
rulerBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getRBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRBlockAccess().getStatementRStatementParserRuleCall_1_0_0());
					}
					lv_statement_1_0=rulerStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRBlockRule());
						}
						add(
							$current,
							"statement",
							lv_statement_1_0,
							"org.eclipse.ecoretools.Ale.rStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRBlockAccess().getStatementRStatementParserRuleCall_1_1_0());
					}
					lv_statement_2_0=rulerStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRBlockRule());
						}
						add(
							$current,
							"statement",
							lv_statement_2_0,
							"org.eclipse.ecoretools.Ale.rStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getRBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRulerIf
entryRulerIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRIfRule()); }
	iv_rulerIf=rulerIf
	{ $current=$iv_rulerIf.current; }
	EOF;

// Rule rIf
rulerIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getRIfAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRIfAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRIfAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRIfRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.eclipse.ecoretools.Ale.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRIfAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRIfAccess().getIfBlockRBlockParserRuleCall_4_0());
				}
				lv_ifBlock_4_0=rulerBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRIfRule());
					}
					set(
						$current,
						"ifBlock",
						lv_ifBlock_4_0,
						"org.eclipse.ecoretools.Ale.rBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getRIfAccess().getElseKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRIfAccess().getElseBlockRBlockParserRuleCall_5_1_0());
					}
					lv_elseBlock_6_0=rulerBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRIfRule());
						}
						set(
							$current,
							"elseBlock",
							lv_elseBlock_6_0,
							"org.eclipse.ecoretools.Ale.rBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulerWhile
entryRulerWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRWhileRule()); }
	iv_rulerWhile=rulerWhile
	{ $current=$iv_rulerWhile.current; }
	EOF;

// Rule rWhile
rulerWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getRWhileAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRWhileAccess().getLeftParenthesisKeyword_1());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRWhileAccess().getExpressionParserRuleCall_2());
		}
		this_expression_2=ruleexpression
		{
			$current = $this_expression_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRWhileAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRWhileAccess().getBlockRBlockParserRuleCall_4_0());
				}
				lv_block_4_0=rulerBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRWhileRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"org.eclipse.ecoretools.Ale.rBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulerExpression
entryRulerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRExpressionRule()); }
	iv_rulerExpression=rulerExpression
	{ $current=$iv_rulerExpression.current; }
	EOF;

// Rule rExpression
rulerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRExpressionAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current = $this_expression_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getRExpressionAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getLeftPartNonLeftRecExpressionParserRuleCall_0_0());
				}
				lv_leftPart_0_0=rulenonLeftRecExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"leftPart",
						lv_leftPart_0_0,
						"org.eclipse.ecoretools.Ale.nonLeftRecExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getRecpartRecExpressionParserRuleCall_1_0());
				}
				lv_recpart_1_0=rulerecExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"recpart",
						lv_recpart_1_0,
						"org.eclipse.ecoretools.Ale.recExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulerecExpression
entryRulerecExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecExpressionRule()); }
	iv_rulerecExpression=rulerecExpression
	{ $current=$iv_rulerecExpression.current; }
	EOF;

// Rule recExpression
rulerecExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getRecExpressionAccess().getNavigationSegmentParserRuleCall_0_0());
			}
			this_navigationSegment_0=rulenavigationSegment
			{
				$current = $this_navigationSegment_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			(
				this_MultOp_1=RULE_MULTOP
				{
					newLeafNode(this_MultOp_1, grammarAccess.getRecExpressionAccess().getMultOpTerminalRuleCall_0_1_0());
				}
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_1_1());
				}
				this_expression_2=ruleexpression
				{
					$current = $this_expression_2.current;
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getAddOpParserRuleCall_0_2_0());
				}
				ruleaddOp
				{
					afterParserOrEnumRuleCall();
				}
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_2_1());
				}
				this_expression_4=ruleexpression
				{
					$current = $this_expression_4.current;
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getCompOpParserRuleCall_0_3_0());
				}
				rulecompOp
				{
					afterParserOrEnumRuleCall();
				}
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_3_1());
				}
				this_expression_6=ruleexpression
				{
					$current = $this_expression_6.current;
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				otherlv_7='and'
				{
					newLeafNode(otherlv_7, grammarAccess.getRecExpressionAccess().getAndKeyword_0_4_0());
				}
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_4_1());
				}
				this_expression_8=ruleexpression
				{
					$current = $this_expression_8.current;
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				otherlv_9='or'
				{
					newLeafNode(otherlv_9, grammarAccess.getRecExpressionAccess().getOrKeyword_0_5_0());
				}
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_5_1());
				}
				this_expression_10=ruleexpression
				{
					$current = $this_expression_10.current;
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				otherlv_11='xor'
				{
					newLeafNode(otherlv_11, grammarAccess.getRecExpressionAccess().getXorKeyword_0_6_0());
				}
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_6_1());
				}
				this_expression_12=ruleexpression
				{
					$current = $this_expression_12.current;
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				otherlv_13='implies'
				{
					newLeafNode(otherlv_13, grammarAccess.getRecExpressionAccess().getImpliesKeyword_0_7_0());
				}
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getExpressionParserRuleCall_0_7_1());
				}
				this_expression_14=ruleexpression
				{
					$current = $this_expression_14.current;
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRecExpressionAccess().getRecExpRecExpressionParserRuleCall_1_0());
				}
				lv_recExp_15_0=rulerecExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecExpressionRule());
					}
					set(
						$current,
						"recExp",
						lv_recExp_15_0,
						"org.eclipse.ecoretools.Ale.recExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulenavigationSegment
entryRulenavigationSegment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigationSegmentRule()); }
	iv_rulenavigationSegment=rulenavigationSegment
	{ $current=$iv_rulenavigationSegment.current; }
	EOF;

// Rule navigationSegment
rulenavigationSegment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getNavigationSegmentAccess().getFinalIdentSegmentAction_0_0(),
						$current);
				}
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_0_1());
			}
			(
				(
					lv_ident_2_0=RULE_IDENT
					{
						newLeafNode(lv_ident_2_0, grammarAccess.getNavigationSegmentAccess().getIdentIdentTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNavigationSegmentRule());
						}
						setWithLastConsumed(
							$current,
							"ident",
							lv_ident_2_0,
							"org.eclipse.ecoretools.Ale.Ident");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getNavigationSegmentAccess().getFinalIdentCallSegmentAction_1_0(),
						$current);
				}
			)
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getNavigationSegmentAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNavigationSegmentAccess().getCallCallExpParserRuleCall_1_2_0());
					}
					lv_call_5_0=rulecallExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNavigationSegmentRule());
						}
						set(
							$current,
							"call",
							lv_call_5_0,
							"org.eclipse.ecoretools.Ale.callExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getNavigationSegmentAccess().getFinalCallExpSegmentAction_2_0(),
						$current);
				}
			)
			otherlv_7='->'
			{
				newLeafNode(otherlv_7, grammarAccess.getNavigationSegmentAccess().getHyphenMinusGreaterThanSignKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNavigationSegmentAccess().getCallCallExpParserRuleCall_2_2_0());
					}
					lv_call_8_0=rulecallExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNavigationSegmentRule());
						}
						set(
							$current,
							"call",
							lv_call_8_0,
							"org.eclipse.ecoretools.Ale.callExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulenonLeftRecExpression
entryRulenonLeftRecExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNonLeftRecExpressionRule()); }
	iv_rulenonLeftRecExpression=rulenonLeftRecExpression
	{ $current=$iv_rulenonLeftRecExpression.current; }
	EOF;

// Rule nonLeftRecExpression
rulenonLeftRecExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='not'
			{
				newLeafNode(otherlv_0, grammarAccess.getNonLeftRecExpressionAccess().getNotKeyword_0_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_0_1());
			}
			this_expression_1=ruleexpression
			{
				$current = $this_expression_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_2='-'
			{
				newLeafNode(otherlv_2, grammarAccess.getNonLeftRecExpressionAccess().getHyphenMinusKeyword_1_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_1_1());
			}
			this_expression_3=ruleexpression
			{
				$current = $this_expression_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		this_Ident_4=RULE_IDENT
		{
			newLeafNode(this_Ident_4, grammarAccess.getNonLeftRecExpressionAccess().getIdentTerminalRuleCall_2());
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getLiteralParserRuleCall_3());
		}
		this_literal_5=ruleliteral
		{
			$current = $this_literal_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getNonLeftRecExpressionAccess().getLeftParenthesisKeyword_4_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getExpressionParserRuleCall_4_1());
			}
			this_expression_7=ruleexpression
			{
				$current = $this_expression_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getNonLeftRecExpressionAccess().getRightParenthesisKeyword_4_2());
			}
		)
		    |
		(
			otherlv_9='if'
			{
				newLeafNode(otherlv_9, grammarAccess.getNonLeftRecExpressionAccess().getIfKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getConditionExpressionParserRuleCall_5_1_0());
					}
					lv_condition_10_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNonLeftRecExpressionRule());
						}
						set(
							$current,
							"condition",
							lv_condition_10_0,
							"org.eclipse.ecoretools.Ale.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='then'
			{
				newLeafNode(otherlv_11, grammarAccess.getNonLeftRecExpressionAccess().getThenKeyword_5_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getIfBlockExpressionParserRuleCall_5_3_0());
					}
					lv_ifBlock_12_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNonLeftRecExpressionRule());
						}
						set(
							$current,
							"ifBlock",
							lv_ifBlock_12_0,
							"org.eclipse.ecoretools.Ale.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_13='else'
			{
				newLeafNode(otherlv_13, grammarAccess.getNonLeftRecExpressionAccess().getElseKeyword_5_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getElseBlockExpressionParserRuleCall_5_5_0());
					}
					lv_elseBlock_14_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNonLeftRecExpressionRule());
						}
						set(
							$current,
							"elseBlock",
							lv_elseBlock_14_0,
							"org.eclipse.ecoretools.Ale.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_15='endif'
			{
				newLeafNode(otherlv_15, grammarAccess.getNonLeftRecExpressionAccess().getEndifKeyword_5_6());
			}
		)
		    |
		(
			otherlv_16='let'
			{
				newLeafNode(otherlv_16, grammarAccess.getNonLeftRecExpressionAccess().getLetKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getBindingsBindingParserRuleCall_6_1_0());
					}
					lv_bindings_17_0=rulebinding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNonLeftRecExpressionRule());
						}
						add(
							$current,
							"bindings",
							lv_bindings_17_0,
							"org.eclipse.ecoretools.Ale.binding");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_18=','
				{
					newLeafNode(otherlv_18, grammarAccess.getNonLeftRecExpressionAccess().getCommaKeyword_6_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getBindingsBindingParserRuleCall_6_2_1_0());
						}
						lv_bindings_19_0=rulebinding
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNonLeftRecExpressionRule());
							}
							add(
								$current,
								"bindings",
								lv_bindings_19_0,
								"org.eclipse.ecoretools.Ale.binding");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_20='in'
			{
				newLeafNode(otherlv_20, grammarAccess.getNonLeftRecExpressionAccess().getInKeyword_6_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNonLeftRecExpressionAccess().getLetExprExpressionParserRuleCall_6_4_0());
					}
					lv_letExpr_21_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNonLeftRecExpressionRule());
						}
						set(
							$current,
							"letExpr",
							lv_letExpr_21_0,
							"org.eclipse.ecoretools.Ale.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulebinding
entryRulebinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	iv_rulebinding=rulebinding
	{ $current=$iv_rulebinding.current; }
	EOF;

// Rule binding
rulebinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_Ident_0=RULE_IDENT
		{
			newLeafNode(this_Ident_0, grammarAccess.getBindingAccess().getIdentTerminalRuleCall_0());
		}
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getBindingAccess().getColonKeyword_1_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getBindingAccess().getTypeLiteralParserRuleCall_1_1());
			}
			ruletypeLiteral
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getBindingAccess().getEqualsSignKeyword_2());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBindingAccess().getExpressionParserRuleCall_3());
		}
		this_expression_4=ruleexpression
		{
			$current = $this_expression_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleaddOp
entryRuleaddOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAddOpRule()); }
	iv_ruleaddOp=ruleaddOp
	{ $current=$iv_ruleaddOp.current.getText(); }
	EOF;

// Rule addOp
ruleaddOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAddOpAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAddOpAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRulecompOp
entryRulecompOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCompOpRule()); }
	iv_rulecompOp=rulecompOp
	{ $current=$iv_rulecompOp.current.getText(); }
	EOF;

// Rule compOp
rulecompOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getLessThanSignEqualsSignKeyword_0());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getGreaterThanSignEqualsSignKeyword_1());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getExclamationMarkEqualsSignKeyword_2());
		}
		    |
		kw='<>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getLessThanSignGreaterThanSignKeyword_3());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getEqualsSignKeyword_4());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getEqualsSignEqualsSignKeyword_5());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getLessThanSignKeyword_6());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCompOpAccess().getGreaterThanSignKeyword_7());
		}
	)
;

// Entry rule entryRulecallExp
entryRulecallExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallExpRule()); }
	iv_rulecallExp=rulecallExp
	{ $current=$iv_rulecallExp.current; }
	EOF;

// Rule callExp
rulecallExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getCallExpAccess().getCollectionIteratorParserRuleCall_0_0());
			}
			rulecollectionIterator
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_0_1());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getCallExpAccess().getVariableDefinitionParserRuleCall_0_2());
			}
			rulevariableDefinition
			{
				afterParserOrEnumRuleCall();
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getCallExpAccess().getExpressionParserRuleCall_0_3());
			}
			this_expression_3=ruleexpression
			{
				$current = $this_expression_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getCallExpAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			this_Ident_5=RULE_IDENT
			{
				newLeafNode(this_Ident_5, grammarAccess.getCallExpAccess().getIdentTerminalRuleCall_1_0());
			}
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getCallExpAccess().getLeftParenthesisKeyword_1_1());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getCallExpAccess().getExpressionSequenceParserRuleCall_1_2());
			}
			this_expressionSequence_7=ruleexpressionSequence
			{
				$current = $this_expressionSequence_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getCallExpAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRulecollectionIterator
entryRulecollectionIterator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCollectionIteratorRule()); }
	iv_rulecollectionIterator=rulecollectionIterator
	{ $current=$iv_rulecollectionIterator.current.getText(); }
	EOF;

// Rule collectionIterator
rulecollectionIterator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='select'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getSelectKeyword_0());
		}
		    |
		kw='reject'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getRejectKeyword_1());
		}
		    |
		kw='collect'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getCollectKeyword_2());
		}
		    |
		kw='any'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getAnyKeyword_3());
		}
		    |
		kw='exists'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getExistsKeyword_4());
		}
		    |
		kw='forAll'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getForAllKeyword_5());
		}
		    |
		kw='isUnique'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getIsUniqueKeyword_6());
		}
		    |
		kw='one'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getOneKeyword_7());
		}
		    |
		kw='sortedBy'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getSortedByKeyword_8());
		}
		    |
		kw='closure'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionIteratorAccess().getClosureKeyword_9());
		}
	)
;

// Entry rule entryRuleexpressionSequence
entryRuleexpressionSequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionSequenceRule()); }
	iv_ruleexpressionSequence=ruleexpressionSequence
	{ $current=$iv_ruleexpressionSequence.current; }
	EOF;

// Rule expressionSequence
ruleexpressionSequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionSequenceAccess().getSeqExprsExpressionParserRuleCall_0_0());
				}
				lv_seqExprs_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionSequenceRule());
					}
					add(
						$current,
						"seqExprs",
						lv_seqExprs_0_0,
						"org.eclipse.ecoretools.Ale.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionSequenceAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionSequenceAccess().getSeqExprsExpressionParserRuleCall_1_1_0());
					}
					lv_seqExprs_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionSequenceRule());
						}
						add(
							$current,
							"seqExprs",
							lv_seqExprs_2_0,
							"org.eclipse.ecoretools.Ale.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)?
;

// Entry rule entryRulevariableDefinition
entryRulevariableDefinition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariableDefinitionRule()); }
	iv_rulevariableDefinition=rulevariableDefinition
	{ $current=$iv_rulevariableDefinition.current.getText(); }
	EOF;

// Rule variableDefinition
rulevariableDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_Ident_0=RULE_IDENT
		{
			$current.merge(this_Ident_0);
		}
		{
			newLeafNode(this_Ident_0, grammarAccess.getVariableDefinitionAccess().getIdentTerminalRuleCall_0());
		}
		(
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVariableDefinitionAccess().getColonKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getVariableDefinitionAccess().getTypeLiteralParserRuleCall_1_1());
			}
			this_typeLiteral_2=ruletypeLiteral
			{
				$current.merge(this_typeLiteral_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableDefinitionAccess().getVerticalLineKeyword_2());
		}
	)
;

// Entry rule entryRuleliteral
entryRuleliteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleliteral=ruleliteral
	{ $current=$iv_ruleliteral.current; }
	EOF;

// Rule literal
ruleliteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			newLeafNode(this_STRING_0, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			newLeafNode(this_INT_1, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1());
		}
		    |
		this_Real_2=RULE_REAL
		{
			newLeafNode(this_Real_2, grammarAccess.getLiteralAccess().getRealTerminalRuleCall_2());
		}
		    |
		otherlv_3='true'
		{
			newLeafNode(otherlv_3, grammarAccess.getLiteralAccess().getTrueKeyword_3());
		}
		    |
		otherlv_4='false'
		{
			newLeafNode(otherlv_4, grammarAccess.getLiteralAccess().getFalseKeyword_4());
		}
		    |
		otherlv_5='null'
		{
			newLeafNode(otherlv_5, grammarAccess.getLiteralAccess().getNullKeyword_5());
		}
		    |
		(
			otherlv_6='Sequence{'
			{
				newLeafNode(otherlv_6, grammarAccess.getLiteralAccess().getSequenceKeyword_6_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_6_1());
			}
			this_expressionSequence_7=ruleexpressionSequence
			{
				$current = $this_expressionSequence_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_6_2());
			}
		)
		    |
		(
			otherlv_9='OrderedSet{'
			{
				newLeafNode(otherlv_9, grammarAccess.getLiteralAccess().getOrderedSetKeyword_7_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getLiteralAccess().getExpressionSequenceParserRuleCall_7_1());
			}
			this_expressionSequence_10=ruleexpressionSequence
			{
				$current = $this_expressionSequence_10.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_7_2());
			}
		)
		    |
		(
			this_Ident_12=RULE_IDENT
			{
				newLeafNode(this_Ident_12, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_0());
			}
			otherlv_13='::'
			{
				newLeafNode(otherlv_13, grammarAccess.getLiteralAccess().getColonColonKeyword_8_1());
			}
			this_Ident_14=RULE_IDENT
			{
				newLeafNode(this_Ident_14, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_2());
			}
			otherlv_15='::'
			{
				newLeafNode(otherlv_15, grammarAccess.getLiteralAccess().getColonColonKeyword_8_3());
			}
			this_Ident_16=RULE_IDENT
			{
				newLeafNode(this_Ident_16, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_8_4());
			}
		)
		    |
		(
			this_Ident_17=RULE_IDENT
			{
				newLeafNode(this_Ident_17, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_9_0());
			}
			otherlv_18='::'
			{
				newLeafNode(otherlv_18, grammarAccess.getLiteralAccess().getColonColonKeyword_9_1());
			}
			this_Ident_19=RULE_IDENT
			{
				newLeafNode(this_Ident_19, grammarAccess.getLiteralAccess().getIdentTerminalRuleCall_9_2());
			}
			otherlv_20=':'
			{
				newLeafNode(otherlv_20, grammarAccess.getLiteralAccess().getColonKeyword_9_3());
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getTypeLiteralParserRuleCall_10());
		}
		ruletypeLiteral
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuletypeLiteral
entryRuletypeLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeLiteralRule()); }
	iv_ruletypeLiteral=ruletypeLiteral
	{ $current=$iv_ruletypeLiteral.current.getText(); }
	EOF;

// Rule typeLiteral
ruletypeLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getStringKeyword_0());
		}
		    |
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getIntegerKeyword_1());
		}
		    |
		kw='Real'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getRealKeyword_2());
		}
		    |
		kw='Boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getBooleanKeyword_3());
		}
		    |
		(
			kw='Sequence('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getSequenceKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeLiteralAccess().getTypeLiteralParserRuleCall_4_1());
			}
			this_typeLiteral_5=ruletypeLiteral
			{
				$current.merge(this_typeLiteral_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_4_2());
			}
		)
		    |
		(
			kw='OrderedSet('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getOrderedSetKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeLiteralAccess().getTypeLiteralParserRuleCall_5_1());
			}
			this_typeLiteral_8=ruletypeLiteral
			{
				$current.merge(this_typeLiteral_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getRightParenthesisKeyword_5_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_6());
		}
		this_classifierTypeRule_10=ruleclassifierTypeRule
		{
			$current.merge(this_classifierTypeRule_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getLeftCurlyBracketKeyword_7_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_1());
			}
			this_classifierTypeRule_12=ruleclassifierTypeRule
			{
				$current.merge(this_classifierTypeRule_12);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw='|'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getVerticalLineKeyword_7_2_0());
				}
				{
					newCompositeNode(grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_2_1());
				}
				this_classifierTypeRule_14=ruleclassifierTypeRule
				{
					$current.merge(this_classifierTypeRule_14);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeLiteralAccess().getRightCurlyBracketKeyword_7_3());
			}
		)
	)
;

// Entry rule entryRuleclassifierTypeRule
entryRuleclassifierTypeRule returns [String current=null]:
	{ newCompositeNode(grammarAccess.getClassifierTypeRuleRule()); }
	iv_ruleclassifierTypeRule=ruleclassifierTypeRule
	{ $current=$iv_ruleclassifierTypeRule.current.getText(); }
	EOF;

// Rule classifierTypeRule
ruleclassifierTypeRule returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_Ident_0=RULE_IDENT
			{
				$current.merge(this_Ident_0);
			}
			{
				newLeafNode(this_Ident_0, grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_0_0());
			}
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClassifierTypeRuleAccess().getColonColonKeyword_0_1());
			}
			this_Ident_2=RULE_IDENT
			{
				$current.merge(this_Ident_2);
			}
			{
				newLeafNode(this_Ident_2, grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_0_2());
			}
		)
		    |
		(
			this_Ident_3=RULE_IDENT
			{
				$current.merge(this_Ident_3);
			}
			{
				newLeafNode(this_Ident_3, grammarAccess.getClassifierTypeRuleAccess().getIdentTerminalRuleCall_1_0());
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClassifierTypeRuleAccess().getColonKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRulerType
entryRulerType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRTypeRule()); }
	iv_rulerType=rulerType
	{ $current=$iv_rulerType.current.getText(); }
	EOF;

// Rule rType
rulerType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRTypeAccess().getRQualifiedParserRuleCall_0());
		}
		this_rQualified_0=rulerQualified
		{
			$current.merge(this_rQualified_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRTypeAccess().getTypeLiteralParserRuleCall_1());
		}
		this_typeLiteral_1=ruletypeLiteral
		{
			$current.merge(this_typeLiteral_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulerQualified
entryRulerQualified returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRQualifiedRule()); }
	iv_rulerQualified=rulerQualified
	{ $current=$iv_rulerQualified.current.getText(); }
	EOF;

// Rule rQualified
rulerQualified returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_Ident_0=RULE_IDENT
		{
			$current.merge(this_Ident_0);
		}
		{
			newLeafNode(this_Ident_0, grammarAccess.getRQualifiedAccess().getIdentTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRQualifiedAccess().getFullStopKeyword_1_0());
			}
			this_Ident_2=RULE_IDENT
			{
				$current.merge(this_Ident_2);
			}
			{
				newLeafNode(this_Ident_2, grammarAccess.getRQualifiedAccess().getIdentTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_MULTOP : ('*'|'/');

RULE_REAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_IDENT : (RULE_LETTER|'_') (RULE_LETTER|'0'..'9'|'_')*;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
