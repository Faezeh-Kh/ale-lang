/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.ecoretools.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.ecoretools.services.AleGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class AleSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AleGrammarAccess grammarAccess;
<<<<<<< HEAD
	protected AbstractElementAlias match_literal_FalseKeyword_4_or_INTTerminalRuleCall_1_or_NullKeyword_5_or_REALTerminalRuleCall_2_or_STRINGTerminalRuleCall_0_or_TrueKeyword_3_or___IDENTTerminalRuleCall_8_0_ColonColonKeyword_8_1_IDENTTerminalRuleCall_8_2_ColonColonKeyword_8_3_IDENTTerminalRuleCall_8_4___or___IDENTTerminalRuleCall_9_0_ColonColonKeyword_9_1_IDENTTerminalRuleCall_9_2_ColonKeyword_9_3__;
	protected AbstractElementAlias match_literal_OrderedSetKeyword_7_0_or_SequenceKeyword_6_0;
=======
	protected AbstractElementAlias match_rAttribute___ColonEqualsSignKeyword_2_0_ExpressionParserRuleCall_2_1__q;
>>>>>>> local-ale-lang
	protected AbstractElementAlias match_rOpenClass___ExtendsKeyword_3_0_RQualifiedParserRuleCall_3_1___CommaKeyword_3_2_0_RQualifiedParserRuleCall_3_2_1__a__q;
	protected AbstractElementAlias match_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1;
	protected AbstractElementAlias match_rOperation_RTagParserRuleCall_0_a;
	protected AbstractElementAlias match_rRoot_RImportParserRuleCall_3_a;
	protected AbstractElementAlias match_rRoot_RImportParserRuleCall_3_q;
	protected AbstractElementAlias match_rRoot_RServiceParserRuleCall_4_a;
	protected AbstractElementAlias match_rRoot_RServiceParserRuleCall_4_q;
<<<<<<< HEAD
	protected AbstractElementAlias match_recExpression_ADD_OPTerminalRuleCall_0_2_0_or_AndKeyword_0_4_0_or_COMP_OPTerminalRuleCall_0_3_0_or_ImpliesKeyword_0_7_0_or_MULT_OPTerminalRuleCall_0_1_0_or_OrKeyword_0_5_0_or_XorKeyword_0_6_0;
	protected AbstractElementAlias match_typeLiteral___VerticalLineKeyword_7_3_0_ClassifierTypeRuleParserRuleCall_7_3_1__a;
=======
>>>>>>> local-ale-lang
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AleGrammarAccess) access;
<<<<<<< HEAD
		match_literal_FalseKeyword_4_or_INTTerminalRuleCall_1_or_NullKeyword_5_or_REALTerminalRuleCall_2_or_STRINGTerminalRuleCall_0_or_TrueKeyword_3_or___IDENTTerminalRuleCall_8_0_ColonColonKeyword_8_1_IDENTTerminalRuleCall_8_2_ColonColonKeyword_8_3_IDENTTerminalRuleCall_8_4___or___IDENTTerminalRuleCall_9_0_ColonColonKeyword_9_1_IDENTTerminalRuleCall_9_2_ColonKeyword_9_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_8_0()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getColonColonKeyword_8_1()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_8_2()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getColonColonKeyword_8_3()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_8_4())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_9_0()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getColonColonKeyword_9_1()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getIDENTTerminalRuleCall_9_2()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getColonKeyword_9_3())), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getFalseKeyword_4()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getNullKeyword_5()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getREALTerminalRuleCall_2()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_0()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getTrueKeyword_3()));
		match_literal_OrderedSetKeyword_7_0_or_SequenceKeyword_6_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLiteralAccess().getOrderedSetKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getSequenceKeyword_6_0()));
=======
		match_rAttribute___ColonEqualsSignKeyword_2_0_ExpressionParserRuleCall_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRAttributeAccess().getColonEqualsSignKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getRAttributeAccess().getExpressionParserRuleCall_2_1()));
>>>>>>> local-ale-lang
		match_rOpenClass___ExtendsKeyword_3_0_RQualifiedParserRuleCall_3_1___CommaKeyword_3_2_0_RQualifiedParserRuleCall_3_2_1__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getROpenClassAccess().getExtendsKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getROpenClassAccess().getRQualifiedParserRuleCall_3_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getROpenClassAccess().getCommaKeyword_3_2_0()), new TokenAlias(false, false, grammarAccess.getROpenClassAccess().getRQualifiedParserRuleCall_3_2_1())));
		match_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getROperationAccess().getDefKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getROperationAccess().getOverrideKeyword_1_1()));
		match_rOperation_RTagParserRuleCall_0_a = new TokenAlias(true, true, grammarAccess.getROperationAccess().getRTagParserRuleCall_0());
		match_rRoot_RImportParserRuleCall_3_a = new TokenAlias(true, true, grammarAccess.getRRootAccess().getRImportParserRuleCall_3());
		match_rRoot_RImportParserRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getRRootAccess().getRImportParserRuleCall_3());
		match_rRoot_RServiceParserRuleCall_4_a = new TokenAlias(true, true, grammarAccess.getRRootAccess().getRServiceParserRuleCall_4());
		match_rRoot_RServiceParserRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getRRootAccess().getRServiceParserRuleCall_4());
<<<<<<< HEAD
		match_recExpression_ADD_OPTerminalRuleCall_0_2_0_or_AndKeyword_0_4_0_or_COMP_OPTerminalRuleCall_0_3_0_or_ImpliesKeyword_0_7_0_or_MULT_OPTerminalRuleCall_0_1_0_or_OrKeyword_0_5_0_or_XorKeyword_0_6_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRecExpressionAccess().getADD_OPTerminalRuleCall_0_2_0()), new TokenAlias(false, false, grammarAccess.getRecExpressionAccess().getAndKeyword_0_4_0()), new TokenAlias(false, false, grammarAccess.getRecExpressionAccess().getCOMP_OPTerminalRuleCall_0_3_0()), new TokenAlias(false, false, grammarAccess.getRecExpressionAccess().getImpliesKeyword_0_7_0()), new TokenAlias(false, false, grammarAccess.getRecExpressionAccess().getMULT_OPTerminalRuleCall_0_1_0()), new TokenAlias(false, false, grammarAccess.getRecExpressionAccess().getOrKeyword_0_5_0()), new TokenAlias(false, false, grammarAccess.getRecExpressionAccess().getXorKeyword_0_6_0()));
		match_typeLiteral___VerticalLineKeyword_7_3_0_ClassifierTypeRuleParserRuleCall_7_3_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTypeLiteralAccess().getVerticalLineKeyword_7_3_0()), new TokenAlias(false, false, grammarAccess.getTypeLiteralAccess().getClassifierTypeRuleParserRuleCall_7_3_1()));
=======
>>>>>>> local-ale-lang
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
<<<<<<< HEAD
		if (ruleCall.getRule() == grammarAccess.getADD_OPRule())
			return getADD_OPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCOMP_OPRule())
			return getCOMP_OPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDENTRule())
			return getIDENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMULT_OPRule())
			return getMULT_OPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREALRule())
			return getREALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getClassifierTypeRuleRule())
			return getclassifierTypeRuleToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCollectionIteratorRule())
			return getcollectionIteratorToken(semanticObject, ruleCall, node);
=======
		if (ruleCall.getRule() == grammarAccess.getExpressionRule())
			return getexpressionToken(semanticObject, ruleCall, node);
>>>>>>> local-ale-lang
		else if (ruleCall.getRule() == grammarAccess.getRImportRule())
			return getrImportToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRQualifiedRule())
			return getrQualifiedToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRServiceRule())
			return getrServiceToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRTagRule())
			return getrTagToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
<<<<<<< HEAD
	 * terminal ADD_OP: '+' | '-'
	 * ;
	 */
	protected String getADD_OPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * terminal COMP_OP :     '<='
	 * 	    	|'>='
	 * 	  		|'!='
	 * 	  		|'<>'
	 * 	  		|'='
	 * 	  		|'=='
	 * 	 		|'<'
	 * 	  		|'>'
	 * ;
	 */
	protected String getCOMP_OPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<=";
	}
	
	/**
	 * terminal IDENT : (LETTER | '_') (LETTER | '0'..'9' | '_')*
	 * ;
	 */
	protected String getIDENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal MULT_OP : '*' | '/'
	 * ;
	 */
	protected String getMULT_OPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "*";
	}
	
	/**
	 * terminal REAL : ('0'..'9')+'.'('0'..'9')+
	 * ;
	 */
	protected String getREALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * terminal STRING	: 
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * classifierTypeRule :   IDENT '::' IDENT
	 * 				     | IDENT ':' 
	 * ;
	 */
	protected String getclassifierTypeRuleToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "::";
	}
	
	/**
	 * collectionIterator : 'select' | 'reject' | 'collect' | 'any' | 'exists' | 'forAll' | 'isUnique' | 'one' | 'sortedBy' | 'closure'
	 * ;
	 */
	protected String getcollectionIteratorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "select";
	}
	
	/**
	 * rImport : 'import' rQualified 'as' IDENT ';'
=======
	 * expression :
	 * 	nonLeftRecExpression recExpression?
	 * ;
	 */
	protected String getexpressionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "not";
	}
	
	/**
	 * rImport : 'import' rQualified 'as' Ident ';'
>>>>>>> local-ale-lang
	 * ;
	 */
	protected String getrImportToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "importas;";
	}
	
	/**
<<<<<<< HEAD
	 * rQualified : IDENT ('.'IDENT)*
=======
	 * rQualified : Ident ('.'Ident)*
>>>>>>> local-ale-lang
	 * ;
	 */
	protected String getrQualifiedToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
<<<<<<< HEAD
	 * rService : 'use' IDENT ('.' IDENT)* ';'
=======
	 * rService : 'use' Ident ('.' Ident)* ';'
>>>>>>> local-ale-lang
	 * ;
	 */
	protected String getrServiceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "use;";
	}
	
	/**
<<<<<<< HEAD
	 * rTag : '@'IDENT
=======
	 * rTag : '@'Ident
>>>>>>> local-ale-lang
	 * ;
	 */
	protected String getrTagToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "@";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
<<<<<<< HEAD
			if (match_literal_FalseKeyword_4_or_INTTerminalRuleCall_1_or_NullKeyword_5_or_REALTerminalRuleCall_2_or_STRINGTerminalRuleCall_0_or_TrueKeyword_3_or___IDENTTerminalRuleCall_8_0_ColonColonKeyword_8_1_IDENTTerminalRuleCall_8_2_ColonColonKeyword_8_3_IDENTTerminalRuleCall_8_4___or___IDENTTerminalRuleCall_9_0_ColonColonKeyword_9_1_IDENTTerminalRuleCall_9_2_ColonKeyword_9_3__.equals(syntax))
				emit_literal_FalseKeyword_4_or_INTTerminalRuleCall_1_or_NullKeyword_5_or_REALTerminalRuleCall_2_or_STRINGTerminalRuleCall_0_or_TrueKeyword_3_or___IDENTTerminalRuleCall_8_0_ColonColonKeyword_8_1_IDENTTerminalRuleCall_8_2_ColonColonKeyword_8_3_IDENTTerminalRuleCall_8_4___or___IDENTTerminalRuleCall_9_0_ColonColonKeyword_9_1_IDENTTerminalRuleCall_9_2_ColonKeyword_9_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_literal_OrderedSetKeyword_7_0_or_SequenceKeyword_6_0.equals(syntax))
				emit_literal_OrderedSetKeyword_7_0_or_SequenceKeyword_6_0(semanticObject, getLastNavigableState(), syntaxNodes);
=======
			if (match_rAttribute___ColonEqualsSignKeyword_2_0_ExpressionParserRuleCall_2_1__q.equals(syntax))
				emit_rAttribute___ColonEqualsSignKeyword_2_0_ExpressionParserRuleCall_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
>>>>>>> local-ale-lang
			else if (match_rOpenClass___ExtendsKeyword_3_0_RQualifiedParserRuleCall_3_1___CommaKeyword_3_2_0_RQualifiedParserRuleCall_3_2_1__a__q.equals(syntax))
				emit_rOpenClass___ExtendsKeyword_3_0_RQualifiedParserRuleCall_3_1___CommaKeyword_3_2_0_RQualifiedParserRuleCall_3_2_1__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1.equals(syntax))
				emit_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_rOperation_RTagParserRuleCall_0_a.equals(syntax))
				emit_rOperation_RTagParserRuleCall_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_rRoot_RImportParserRuleCall_3_a.equals(syntax))
				emit_rRoot_RImportParserRuleCall_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_rRoot_RImportParserRuleCall_3_q.equals(syntax))
				emit_rRoot_RImportParserRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_rRoot_RServiceParserRuleCall_4_a.equals(syntax))
				emit_rRoot_RServiceParserRuleCall_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_rRoot_RServiceParserRuleCall_4_q.equals(syntax))
				emit_rRoot_RServiceParserRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
<<<<<<< HEAD
			else if (match_recExpression_ADD_OPTerminalRuleCall_0_2_0_or_AndKeyword_0_4_0_or_COMP_OPTerminalRuleCall_0_3_0_or_ImpliesKeyword_0_7_0_or_MULT_OPTerminalRuleCall_0_1_0_or_OrKeyword_0_5_0_or_XorKeyword_0_6_0.equals(syntax))
				emit_recExpression_ADD_OPTerminalRuleCall_0_2_0_or_AndKeyword_0_4_0_or_COMP_OPTerminalRuleCall_0_3_0_or_ImpliesKeyword_0_7_0_or_MULT_OPTerminalRuleCall_0_1_0_or_OrKeyword_0_5_0_or_XorKeyword_0_6_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_typeLiteral___VerticalLineKeyword_7_3_0_ClassifierTypeRuleParserRuleCall_7_3_1__a.equals(syntax))
				emit_typeLiteral___VerticalLineKeyword_7_3_0_ClassifierTypeRuleParserRuleCall_7_3_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
=======
>>>>>>> local-ale-lang
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
<<<<<<< HEAD
	 *     (
	  *         (IDENT '::' IDENT '::' IDENT) | 
	  *         (IDENT '::' IDENT ':') | 
	  *         STRING | 
	  *         INT | 
	  *         REAL | 
	  *         'true' | 
	  *         'false' | 
	  *         'null'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_literal_FalseKeyword_4_or_INTTerminalRuleCall_1_or_NullKeyword_5_or_REALTerminalRuleCall_2_or_STRINGTerminalRuleCall_0_or_TrueKeyword_3_or___IDENTTerminalRuleCall_8_0_ColonColonKeyword_8_1_IDENTTerminalRuleCall_8_2_ColonColonKeyword_8_3_IDENTTerminalRuleCall_8_4___or___IDENTTerminalRuleCall_9_0_ColonColonKeyword_9_1_IDENTTerminalRuleCall_9_2_ColonKeyword_9_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Sequence{' | 'OrderedSet{'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) seqExprs+=expression
	 */
	protected void emit_literal_OrderedSetKeyword_7_0_or_SequenceKeyword_6_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
=======
	 *     (':=' expression)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Ident (ambiguity) ';' (rule end)
	 */
	protected void emit_rAttribute___ColonEqualsSignKeyword_2_0_ExpressionParserRuleCall_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
>>>>>>> local-ale-lang
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('extends' rQualified (',' rQualified)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=rQualified (ambiguity) '{' '}' (rule end)
	 *     name=rQualified (ambiguity) '{' attributes+=rAttribute
	 *     name=rQualified (ambiguity) '{' operations+=rOperation
	 */
	protected void emit_rOpenClass___ExtendsKeyword_3_0_RQualifiedParserRuleCall_3_1___CommaKeyword_3_2_0_RQualifiedParserRuleCall_3_2_1__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'def' | 'override'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) rTag* (ambiguity) type=rType
	 */
	protected void emit_rOperation_DefKeyword_1_0_or_OverrideKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     rTag*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('def' | 'override') type=rType
	 */
	protected void emit_rOperation_RTagParserRuleCall_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     rImport*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'behavior' rQualified ';' (ambiguity) rService* (rule start)
	 */
	protected void emit_rRoot_RImportParserRuleCall_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     rImport?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'behavior' rQualified ';' (ambiguity) rService? xtendedClasses+=rClass
	 */
	protected void emit_rRoot_RImportParserRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     rService*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'behavior' rQualified ';' rImport* (ambiguity) (rule start)
	 */
	protected void emit_rRoot_RServiceParserRuleCall_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     rService?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'behavior' rQualified ';' rImport? (ambiguity) xtendedClasses+=rClass
	 */
	protected void emit_rRoot_RServiceParserRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
<<<<<<< HEAD
	/**
	 * Ambiguous syntax:
	 *     (
	  *         MULT_OP | 
	  *         ADD_OP | 
	  *         COMP_OP | 
	  *         'and' | 
	  *         'or' | 
	  *         'xor' | 
	  *         'implies'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) leftPart=nonLeftRecExpression
	 */
	protected void emit_recExpression_ADD_OPTerminalRuleCall_0_2_0_or_AndKeyword_0_4_0_or_COMP_OPTerminalRuleCall_0_3_0_or_ImpliesKeyword_0_7_0_or_MULT_OPTerminalRuleCall_0_1_0_or_OrKeyword_0_5_0_or_XorKeyword_0_6_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('|' classifierTypeRule)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '{' classifierTypeRule (ambiguity) '}' (rule start)
	 *     (rule start) IDENT ':' '{' classifierTypeRule (ambiguity) '}' '|' (rule start)
	 *     (rule start) collectionIterator '(' IDENT ':' '{' classifierTypeRule (ambiguity) '}' '|' expression=expression
	 */
	protected void emit_typeLiteral___VerticalLineKeyword_7_3_0_ClassifierTypeRuleParserRuleCall_7_3_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
=======
>>>>>>> local-ale-lang
}
