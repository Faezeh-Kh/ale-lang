/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Expr;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.binding;
import org.xtext.example.mydsl.myDsl.expressionSequence;
import org.xtext.example.mydsl.myDsl.literal;
import org.xtext.example.mydsl.myDsl.nonLeftRecExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>expression Sequence</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.expressionSequenceImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.expressionSequenceImpl#getIfBlock <em>If Block</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.expressionSequenceImpl#getElseBlock <em>Else Block</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.expressionSequenceImpl#getBindings <em>Bindings</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.expressionSequenceImpl#getLetExpr <em>Let Expr</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.expressionSequenceImpl#getSeqExprs <em>Seq Exprs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class expressionSequenceImpl extends callExpImpl implements expressionSequence
{
  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Expr condition;

  /**
   * The cached value of the '{@link #getIfBlock() <em>If Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfBlock()
   * @generated
   * @ordered
   */
  protected Expr ifBlock;

  /**
   * The cached value of the '{@link #getElseBlock() <em>Else Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseBlock()
   * @generated
   * @ordered
   */
  protected Expr elseBlock;

  /**
   * The cached value of the '{@link #getBindings() <em>Bindings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindings()
   * @generated
   * @ordered
   */
  protected EList<binding> bindings;

  /**
   * The cached value of the '{@link #getLetExpr() <em>Let Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLetExpr()
   * @generated
   * @ordered
   */
  protected Expr letExpr;

  /**
   * The cached value of the '{@link #getSeqExprs() <em>Seq Exprs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSeqExprs()
   * @generated
   * @ordered
   */
  protected EList<Expr> seqExprs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected expressionSequenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.EXPRESSION_SEQUENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Expr newCondition, NotificationChain msgs)
  {
    Expr oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION_SEQUENCE__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Expr newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION_SEQUENCE__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION_SEQUENCE__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION_SEQUENCE__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getIfBlock()
  {
    return ifBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfBlock(Expr newIfBlock, NotificationChain msgs)
  {
    Expr oldIfBlock = ifBlock;
    ifBlock = newIfBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK, oldIfBlock, newIfBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIfBlock(Expr newIfBlock)
  {
    if (newIfBlock != ifBlock)
    {
      NotificationChain msgs = null;
      if (ifBlock != null)
        msgs = ((InternalEObject)ifBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK, null, msgs);
      if (newIfBlock != null)
        msgs = ((InternalEObject)newIfBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK, null, msgs);
      msgs = basicSetIfBlock(newIfBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK, newIfBlock, newIfBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getElseBlock()
  {
    return elseBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseBlock(Expr newElseBlock, NotificationChain msgs)
  {
    Expr oldElseBlock = elseBlock;
    elseBlock = newElseBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK, oldElseBlock, newElseBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElseBlock(Expr newElseBlock)
  {
    if (newElseBlock != elseBlock)
    {
      NotificationChain msgs = null;
      if (elseBlock != null)
        msgs = ((InternalEObject)elseBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK, null, msgs);
      if (newElseBlock != null)
        msgs = ((InternalEObject)newElseBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK, null, msgs);
      msgs = basicSetElseBlock(newElseBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK, newElseBlock, newElseBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<binding> getBindings()
  {
    if (bindings == null)
    {
      bindings = new EObjectContainmentEList<binding>(binding.class, this, MyDslPackage.EXPRESSION_SEQUENCE__BINDINGS);
    }
    return bindings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getLetExpr()
  {
    return letExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLetExpr(Expr newLetExpr, NotificationChain msgs)
  {
    Expr oldLetExpr = letExpr;
    letExpr = newLetExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR, oldLetExpr, newLetExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLetExpr(Expr newLetExpr)
  {
    if (newLetExpr != letExpr)
    {
      NotificationChain msgs = null;
      if (letExpr != null)
        msgs = ((InternalEObject)letExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR, null, msgs);
      if (newLetExpr != null)
        msgs = ((InternalEObject)newLetExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR, null, msgs);
      msgs = basicSetLetExpr(newLetExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR, newLetExpr, newLetExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expr> getSeqExprs()
  {
    if (seqExprs == null)
    {
      seqExprs = new EObjectContainmentEList<Expr>(Expr.class, this, MyDslPackage.EXPRESSION_SEQUENCE__SEQ_EXPRS);
    }
    return seqExprs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION_SEQUENCE__CONDITION:
        return basicSetCondition(null, msgs);
      case MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK:
        return basicSetIfBlock(null, msgs);
      case MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK:
        return basicSetElseBlock(null, msgs);
      case MyDslPackage.EXPRESSION_SEQUENCE__BINDINGS:
        return ((InternalEList<?>)getBindings()).basicRemove(otherEnd, msgs);
      case MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR:
        return basicSetLetExpr(null, msgs);
      case MyDslPackage.EXPRESSION_SEQUENCE__SEQ_EXPRS:
        return ((InternalEList<?>)getSeqExprs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION_SEQUENCE__CONDITION:
        return getCondition();
      case MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK:
        return getIfBlock();
      case MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK:
        return getElseBlock();
      case MyDslPackage.EXPRESSION_SEQUENCE__BINDINGS:
        return getBindings();
      case MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR:
        return getLetExpr();
      case MyDslPackage.EXPRESSION_SEQUENCE__SEQ_EXPRS:
        return getSeqExprs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION_SEQUENCE__CONDITION:
        setCondition((Expr)newValue);
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK:
        setIfBlock((Expr)newValue);
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK:
        setElseBlock((Expr)newValue);
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__BINDINGS:
        getBindings().clear();
        getBindings().addAll((Collection<? extends binding>)newValue);
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR:
        setLetExpr((Expr)newValue);
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__SEQ_EXPRS:
        getSeqExprs().clear();
        getSeqExprs().addAll((Collection<? extends Expr>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION_SEQUENCE__CONDITION:
        setCondition((Expr)null);
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK:
        setIfBlock((Expr)null);
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK:
        setElseBlock((Expr)null);
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__BINDINGS:
        getBindings().clear();
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR:
        setLetExpr((Expr)null);
        return;
      case MyDslPackage.EXPRESSION_SEQUENCE__SEQ_EXPRS:
        getSeqExprs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPRESSION_SEQUENCE__CONDITION:
        return condition != null;
      case MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK:
        return ifBlock != null;
      case MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK:
        return elseBlock != null;
      case MyDslPackage.EXPRESSION_SEQUENCE__BINDINGS:
        return bindings != null && !bindings.isEmpty();
      case MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR:
        return letExpr != null;
      case MyDslPackage.EXPRESSION_SEQUENCE__SEQ_EXPRS:
        return seqExprs != null && !seqExprs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == nonLeftRecExpression.class)
    {
      switch (derivedFeatureID)
      {
        case MyDslPackage.EXPRESSION_SEQUENCE__CONDITION: return MyDslPackage.NON_LEFT_REC_EXPRESSION__CONDITION;
        case MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK: return MyDslPackage.NON_LEFT_REC_EXPRESSION__IF_BLOCK;
        case MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK: return MyDslPackage.NON_LEFT_REC_EXPRESSION__ELSE_BLOCK;
        case MyDslPackage.EXPRESSION_SEQUENCE__BINDINGS: return MyDslPackage.NON_LEFT_REC_EXPRESSION__BINDINGS;
        case MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR: return MyDslPackage.NON_LEFT_REC_EXPRESSION__LET_EXPR;
        default: return -1;
      }
    }
    if (baseClass == literal.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == nonLeftRecExpression.class)
    {
      switch (baseFeatureID)
      {
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__CONDITION: return MyDslPackage.EXPRESSION_SEQUENCE__CONDITION;
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__IF_BLOCK: return MyDslPackage.EXPRESSION_SEQUENCE__IF_BLOCK;
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__ELSE_BLOCK: return MyDslPackage.EXPRESSION_SEQUENCE__ELSE_BLOCK;
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__BINDINGS: return MyDslPackage.EXPRESSION_SEQUENCE__BINDINGS;
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__LET_EXPR: return MyDslPackage.EXPRESSION_SEQUENCE__LET_EXPR;
        default: return -1;
      }
    }
    if (baseClass == literal.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //expressionSequenceImpl
