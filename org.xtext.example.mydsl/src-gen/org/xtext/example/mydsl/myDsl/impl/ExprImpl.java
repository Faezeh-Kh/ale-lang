/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Expr;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.RExpression;
import org.xtext.example.mydsl.myDsl.RForEach;
import org.xtext.example.mydsl.myDsl.RStatement;
import org.xtext.example.mydsl.myDsl.RWhile;
import org.xtext.example.mydsl.myDsl.RecExpression;
import org.xtext.example.mydsl.myDsl.binding;
import org.xtext.example.mydsl.myDsl.callExp;
import org.xtext.example.mydsl.myDsl.nonLeftRecExpression;
import org.xtext.example.mydsl.myDsl.rBlock;
import org.xtext.example.mydsl.myDsl.rCollection;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getForEach <em>For Each</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getBlock <em>Block</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getWhile <em>While</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getRecExp <em>Rec Exp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getIfBlock <em>If Block</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getElseBlock <em>Else Block</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getBindings <em>Bindings</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getLetExpr <em>Let Expr</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getLeftPart <em>Left Part</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ExprImpl#getRecpart <em>Recpart</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprImpl extends rVarDeclImpl implements Expr
{
  /**
   * The cached value of the '{@link #getForEach() <em>For Each</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForEach()
   * @generated
   * @ordered
   */
  protected RForEach forEach;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected rBlock block;

  /**
   * The cached value of the '{@link #getWhile() <em>While</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhile()
   * @generated
   * @ordered
   */
  protected RWhile while_;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected RExpression expr;

  /**
   * The cached value of the '{@link #getRecExp() <em>Rec Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecExp()
   * @generated
   * @ordered
   */
  protected RecExpression recExp;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Expr condition;

  /**
   * The cached value of the '{@link #getIfBlock() <em>If Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfBlock()
   * @generated
   * @ordered
   */
  protected Expr ifBlock;

  /**
   * The cached value of the '{@link #getElseBlock() <em>Else Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseBlock()
   * @generated
   * @ordered
   */
  protected Expr elseBlock;

  /**
   * The cached value of the '{@link #getBindings() <em>Bindings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindings()
   * @generated
   * @ordered
   */
  protected EList<binding> bindings;

  /**
   * The cached value of the '{@link #getLetExpr() <em>Let Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLetExpr()
   * @generated
   * @ordered
   */
  protected Expr letExpr;

  /**
   * The cached value of the '{@link #getLeftPart() <em>Left Part</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftPart()
   * @generated
   * @ordered
   */
  protected nonLeftRecExpression leftPart;

  /**
   * The cached value of the '{@link #getRecpart() <em>Recpart</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecpart()
   * @generated
   * @ordered
   */
  protected RecExpression recpart;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RForEach getForEach()
  {
    return forEach;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetForEach(RForEach newForEach, NotificationChain msgs)
  {
    RForEach oldForEach = forEach;
    forEach = newForEach;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__FOR_EACH, oldForEach, newForEach);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setForEach(RForEach newForEach)
  {
    if (newForEach != forEach)
    {
      NotificationChain msgs = null;
      if (forEach != null)
        msgs = ((InternalEObject)forEach).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__FOR_EACH, null, msgs);
      if (newForEach != null)
        msgs = ((InternalEObject)newForEach).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__FOR_EACH, null, msgs);
      msgs = basicSetForEach(newForEach, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__FOR_EACH, newForEach, newForEach));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rBlock getBlock()
  {
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlock(rBlock newBlock, NotificationChain msgs)
  {
    rBlock oldBlock = block;
    block = newBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__BLOCK, oldBlock, newBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBlock(rBlock newBlock)
  {
    if (newBlock != block)
    {
      NotificationChain msgs = null;
      if (block != null)
        msgs = ((InternalEObject)block).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__BLOCK, null, msgs);
      if (newBlock != null)
        msgs = ((InternalEObject)newBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__BLOCK, null, msgs);
      msgs = basicSetBlock(newBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__BLOCK, newBlock, newBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RWhile getWhile()
  {
    return while_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhile(RWhile newWhile, NotificationChain msgs)
  {
    RWhile oldWhile = while_;
    while_ = newWhile;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__WHILE, oldWhile, newWhile);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWhile(RWhile newWhile)
  {
    if (newWhile != while_)
    {
      NotificationChain msgs = null;
      if (while_ != null)
        msgs = ((InternalEObject)while_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__WHILE, null, msgs);
      if (newWhile != null)
        msgs = ((InternalEObject)newWhile).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__WHILE, null, msgs);
      msgs = basicSetWhile(newWhile, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__WHILE, newWhile, newWhile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RExpression getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(RExpression newExpr, NotificationChain msgs)
  {
    RExpression oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr(RExpression newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RecExpression getRecExp()
  {
    return recExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecExp(RecExpression newRecExp, NotificationChain msgs)
  {
    RecExpression oldRecExp = recExp;
    recExp = newRecExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__REC_EXP, oldRecExp, newRecExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecExp(RecExpression newRecExp)
  {
    if (newRecExp != recExp)
    {
      NotificationChain msgs = null;
      if (recExp != null)
        msgs = ((InternalEObject)recExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__REC_EXP, null, msgs);
      if (newRecExp != null)
        msgs = ((InternalEObject)newRecExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__REC_EXP, null, msgs);
      msgs = basicSetRecExp(newRecExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__REC_EXP, newRecExp, newRecExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Expr newCondition, NotificationChain msgs)
  {
    Expr oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Expr newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getIfBlock()
  {
    return ifBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfBlock(Expr newIfBlock, NotificationChain msgs)
  {
    Expr oldIfBlock = ifBlock;
    ifBlock = newIfBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__IF_BLOCK, oldIfBlock, newIfBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIfBlock(Expr newIfBlock)
  {
    if (newIfBlock != ifBlock)
    {
      NotificationChain msgs = null;
      if (ifBlock != null)
        msgs = ((InternalEObject)ifBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__IF_BLOCK, null, msgs);
      if (newIfBlock != null)
        msgs = ((InternalEObject)newIfBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__IF_BLOCK, null, msgs);
      msgs = basicSetIfBlock(newIfBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__IF_BLOCK, newIfBlock, newIfBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getElseBlock()
  {
    return elseBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseBlock(Expr newElseBlock, NotificationChain msgs)
  {
    Expr oldElseBlock = elseBlock;
    elseBlock = newElseBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__ELSE_BLOCK, oldElseBlock, newElseBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElseBlock(Expr newElseBlock)
  {
    if (newElseBlock != elseBlock)
    {
      NotificationChain msgs = null;
      if (elseBlock != null)
        msgs = ((InternalEObject)elseBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__ELSE_BLOCK, null, msgs);
      if (newElseBlock != null)
        msgs = ((InternalEObject)newElseBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__ELSE_BLOCK, null, msgs);
      msgs = basicSetElseBlock(newElseBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__ELSE_BLOCK, newElseBlock, newElseBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<binding> getBindings()
  {
    if (bindings == null)
    {
      bindings = new EObjectContainmentEList<binding>(binding.class, this, MyDslPackage.EXPR__BINDINGS);
    }
    return bindings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getLetExpr()
  {
    return letExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLetExpr(Expr newLetExpr, NotificationChain msgs)
  {
    Expr oldLetExpr = letExpr;
    letExpr = newLetExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__LET_EXPR, oldLetExpr, newLetExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLetExpr(Expr newLetExpr)
  {
    if (newLetExpr != letExpr)
    {
      NotificationChain msgs = null;
      if (letExpr != null)
        msgs = ((InternalEObject)letExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__LET_EXPR, null, msgs);
      if (newLetExpr != null)
        msgs = ((InternalEObject)newLetExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__LET_EXPR, null, msgs);
      msgs = basicSetLetExpr(newLetExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__LET_EXPR, newLetExpr, newLetExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public nonLeftRecExpression getLeftPart()
  {
    return leftPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftPart(nonLeftRecExpression newLeftPart, NotificationChain msgs)
  {
    nonLeftRecExpression oldLeftPart = leftPart;
    leftPart = newLeftPart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__LEFT_PART, oldLeftPart, newLeftPart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeftPart(nonLeftRecExpression newLeftPart)
  {
    if (newLeftPart != leftPart)
    {
      NotificationChain msgs = null;
      if (leftPart != null)
        msgs = ((InternalEObject)leftPart).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__LEFT_PART, null, msgs);
      if (newLeftPart != null)
        msgs = ((InternalEObject)newLeftPart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__LEFT_PART, null, msgs);
      msgs = basicSetLeftPart(newLeftPart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__LEFT_PART, newLeftPart, newLeftPart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RecExpression getRecpart()
  {
    return recpart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecpart(RecExpression newRecpart, NotificationChain msgs)
  {
    RecExpression oldRecpart = recpart;
    recpart = newRecpart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__RECPART, oldRecpart, newRecpart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecpart(RecExpression newRecpart)
  {
    if (newRecpart != recpart)
    {
      NotificationChain msgs = null;
      if (recpart != null)
        msgs = ((InternalEObject)recpart).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__RECPART, null, msgs);
      if (newRecpart != null)
        msgs = ((InternalEObject)newRecpart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.EXPR__RECPART, null, msgs);
      msgs = basicSetRecpart(newRecpart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.EXPR__RECPART, newRecpart, newRecpart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR__FOR_EACH:
        return basicSetForEach(null, msgs);
      case MyDslPackage.EXPR__BLOCK:
        return basicSetBlock(null, msgs);
      case MyDslPackage.EXPR__WHILE:
        return basicSetWhile(null, msgs);
      case MyDslPackage.EXPR__EXPR:
        return basicSetExpr(null, msgs);
      case MyDslPackage.EXPR__REC_EXP:
        return basicSetRecExp(null, msgs);
      case MyDslPackage.EXPR__CONDITION:
        return basicSetCondition(null, msgs);
      case MyDslPackage.EXPR__IF_BLOCK:
        return basicSetIfBlock(null, msgs);
      case MyDslPackage.EXPR__ELSE_BLOCK:
        return basicSetElseBlock(null, msgs);
      case MyDslPackage.EXPR__BINDINGS:
        return ((InternalEList<?>)getBindings()).basicRemove(otherEnd, msgs);
      case MyDslPackage.EXPR__LET_EXPR:
        return basicSetLetExpr(null, msgs);
      case MyDslPackage.EXPR__LEFT_PART:
        return basicSetLeftPart(null, msgs);
      case MyDslPackage.EXPR__RECPART:
        return basicSetRecpart(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR__FOR_EACH:
        return getForEach();
      case MyDslPackage.EXPR__BLOCK:
        return getBlock();
      case MyDslPackage.EXPR__WHILE:
        return getWhile();
      case MyDslPackage.EXPR__EXPR:
        return getExpr();
      case MyDslPackage.EXPR__REC_EXP:
        return getRecExp();
      case MyDslPackage.EXPR__CONDITION:
        return getCondition();
      case MyDslPackage.EXPR__IF_BLOCK:
        return getIfBlock();
      case MyDslPackage.EXPR__ELSE_BLOCK:
        return getElseBlock();
      case MyDslPackage.EXPR__BINDINGS:
        return getBindings();
      case MyDslPackage.EXPR__LET_EXPR:
        return getLetExpr();
      case MyDslPackage.EXPR__LEFT_PART:
        return getLeftPart();
      case MyDslPackage.EXPR__RECPART:
        return getRecpart();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR__FOR_EACH:
        setForEach((RForEach)newValue);
        return;
      case MyDslPackage.EXPR__BLOCK:
        setBlock((rBlock)newValue);
        return;
      case MyDslPackage.EXPR__WHILE:
        setWhile((RWhile)newValue);
        return;
      case MyDslPackage.EXPR__EXPR:
        setExpr((RExpression)newValue);
        return;
      case MyDslPackage.EXPR__REC_EXP:
        setRecExp((RecExpression)newValue);
        return;
      case MyDslPackage.EXPR__CONDITION:
        setCondition((Expr)newValue);
        return;
      case MyDslPackage.EXPR__IF_BLOCK:
        setIfBlock((Expr)newValue);
        return;
      case MyDslPackage.EXPR__ELSE_BLOCK:
        setElseBlock((Expr)newValue);
        return;
      case MyDslPackage.EXPR__BINDINGS:
        getBindings().clear();
        getBindings().addAll((Collection<? extends binding>)newValue);
        return;
      case MyDslPackage.EXPR__LET_EXPR:
        setLetExpr((Expr)newValue);
        return;
      case MyDslPackage.EXPR__LEFT_PART:
        setLeftPart((nonLeftRecExpression)newValue);
        return;
      case MyDslPackage.EXPR__RECPART:
        setRecpart((RecExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR__FOR_EACH:
        setForEach((RForEach)null);
        return;
      case MyDslPackage.EXPR__BLOCK:
        setBlock((rBlock)null);
        return;
      case MyDslPackage.EXPR__WHILE:
        setWhile((RWhile)null);
        return;
      case MyDslPackage.EXPR__EXPR:
        setExpr((RExpression)null);
        return;
      case MyDslPackage.EXPR__REC_EXP:
        setRecExp((RecExpression)null);
        return;
      case MyDslPackage.EXPR__CONDITION:
        setCondition((Expr)null);
        return;
      case MyDslPackage.EXPR__IF_BLOCK:
        setIfBlock((Expr)null);
        return;
      case MyDslPackage.EXPR__ELSE_BLOCK:
        setElseBlock((Expr)null);
        return;
      case MyDslPackage.EXPR__BINDINGS:
        getBindings().clear();
        return;
      case MyDslPackage.EXPR__LET_EXPR:
        setLetExpr((Expr)null);
        return;
      case MyDslPackage.EXPR__LEFT_PART:
        setLeftPart((nonLeftRecExpression)null);
        return;
      case MyDslPackage.EXPR__RECPART:
        setRecpart((RecExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.EXPR__FOR_EACH:
        return forEach != null;
      case MyDslPackage.EXPR__BLOCK:
        return block != null;
      case MyDslPackage.EXPR__WHILE:
        return while_ != null;
      case MyDslPackage.EXPR__EXPR:
        return expr != null;
      case MyDslPackage.EXPR__REC_EXP:
        return recExp != null;
      case MyDslPackage.EXPR__CONDITION:
        return condition != null;
      case MyDslPackage.EXPR__IF_BLOCK:
        return ifBlock != null;
      case MyDslPackage.EXPR__ELSE_BLOCK:
        return elseBlock != null;
      case MyDslPackage.EXPR__BINDINGS:
        return bindings != null && !bindings.isEmpty();
      case MyDslPackage.EXPR__LET_EXPR:
        return letExpr != null;
      case MyDslPackage.EXPR__LEFT_PART:
        return leftPart != null;
      case MyDslPackage.EXPR__RECPART:
        return recpart != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == RStatement.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RForEach.class)
    {
      switch (derivedFeatureID)
      {
        case MyDslPackage.EXPR__FOR_EACH: return MyDslPackage.RFOR_EACH__FOR_EACH;
        default: return -1;
      }
    }
    if (baseClass == rCollection.class)
    {
      switch (derivedFeatureID)
      {
        case MyDslPackage.EXPR__BLOCK: return MyDslPackage.RCOLLECTION__BLOCK;
        default: return -1;
      }
    }
    if (baseClass == RWhile.class)
    {
      switch (derivedFeatureID)
      {
        case MyDslPackage.EXPR__WHILE: return MyDslPackage.RWHILE__WHILE;
        default: return -1;
      }
    }
    if (baseClass == RExpression.class)
    {
      switch (derivedFeatureID)
      {
        case MyDslPackage.EXPR__EXPR: return MyDslPackage.REXPRESSION__EXPR;
        default: return -1;
      }
    }
    if (baseClass == RecExpression.class)
    {
      switch (derivedFeatureID)
      {
        case MyDslPackage.EXPR__REC_EXP: return MyDslPackage.REC_EXPRESSION__REC_EXP;
        default: return -1;
      }
    }
    if (baseClass == nonLeftRecExpression.class)
    {
      switch (derivedFeatureID)
      {
        case MyDslPackage.EXPR__CONDITION: return MyDslPackage.NON_LEFT_REC_EXPRESSION__CONDITION;
        case MyDslPackage.EXPR__IF_BLOCK: return MyDslPackage.NON_LEFT_REC_EXPRESSION__IF_BLOCK;
        case MyDslPackage.EXPR__ELSE_BLOCK: return MyDslPackage.NON_LEFT_REC_EXPRESSION__ELSE_BLOCK;
        case MyDslPackage.EXPR__BINDINGS: return MyDslPackage.NON_LEFT_REC_EXPRESSION__BINDINGS;
        case MyDslPackage.EXPR__LET_EXPR: return MyDslPackage.NON_LEFT_REC_EXPRESSION__LET_EXPR;
        default: return -1;
      }
    }
    if (baseClass == binding.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == callExp.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == RStatement.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RForEach.class)
    {
      switch (baseFeatureID)
      {
        case MyDslPackage.RFOR_EACH__FOR_EACH: return MyDslPackage.EXPR__FOR_EACH;
        default: return -1;
      }
    }
    if (baseClass == rCollection.class)
    {
      switch (baseFeatureID)
      {
        case MyDslPackage.RCOLLECTION__BLOCK: return MyDslPackage.EXPR__BLOCK;
        default: return -1;
      }
    }
    if (baseClass == RWhile.class)
    {
      switch (baseFeatureID)
      {
        case MyDslPackage.RWHILE__WHILE: return MyDslPackage.EXPR__WHILE;
        default: return -1;
      }
    }
    if (baseClass == RExpression.class)
    {
      switch (baseFeatureID)
      {
        case MyDslPackage.REXPRESSION__EXPR: return MyDslPackage.EXPR__EXPR;
        default: return -1;
      }
    }
    if (baseClass == RecExpression.class)
    {
      switch (baseFeatureID)
      {
        case MyDslPackage.REC_EXPRESSION__REC_EXP: return MyDslPackage.EXPR__REC_EXP;
        default: return -1;
      }
    }
    if (baseClass == nonLeftRecExpression.class)
    {
      switch (baseFeatureID)
      {
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__CONDITION: return MyDslPackage.EXPR__CONDITION;
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__IF_BLOCK: return MyDslPackage.EXPR__IF_BLOCK;
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__ELSE_BLOCK: return MyDslPackage.EXPR__ELSE_BLOCK;
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__BINDINGS: return MyDslPackage.EXPR__BINDINGS;
        case MyDslPackage.NON_LEFT_REC_EXPRESSION__LET_EXPR: return MyDslPackage.EXPR__LET_EXPR;
        default: return -1;
      }
    }
    if (baseClass == binding.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == callExp.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //ExprImpl
